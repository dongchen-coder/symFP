
Start to analysis array index
Array index info
y.addr i
tmp.addr i
A.addr ((1024 * j) + i)
x.addr j
tmp.addr i
tmp.addr i
B.addr ((1024 * j) + i)
x.addr j
y.addr i
y.addr i
tmp.addr i
y.addr i
y.addr i

Start to analyze argument
i32 %n
double %alpha
double %beta
double* %A
double* %B
double* %tmp
double* %x
double* %y

Start to analysis global variable

Start analysis loops
--i
--Loop Bound: (0, 1024)
----array access   store double 0.000000e+00, double* %arrayidx, align 8
----array access   store double 0.000000e+00, double* %arrayidx4, align 8
----array access   %34 = load double, double* %arrayidx31, align 8
----array access   %38 = load double, double* %arrayidx34, align 8
----array access   store double %add36, double* %arrayidx38, align 8
----j
----Loop Bound: (0, 1024)
------array access   %9 = load double, double* %arrayidx9, align 8
------array access   %12 = load double, double* %arrayidx11, align 8
------array access   %15 = load double, double* %arrayidx14, align 8
------array access   store double %add15, double* %arrayidx17, align 8
------array access   %21 = load double, double* %arrayidx21, align 8
------array access   %24 = load double, double* %arrayidx23, align 8
------array access   %27 = load double, double* %arrayidx26, align 8
------array access   store double %add27, double* %arrayidx29, align 8

Finish analysis loops
Start to analyze function: gesummv
