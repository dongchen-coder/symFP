
Start to analysis array index
Array index info
A.addr ((1024 * j) + i)
u1.addr i
v1.addr j
u2.addr i
v2.addr j
A.addr ((1024 * j) + i)
x.addr i
A.addr ((1024 * i) + j)
y.addr j
x.addr i
x.addr i
z.addr i
x.addr i
w.addr i
A.addr ((1024 * j) + i)
x.addr j
w.addr i

Start to analyze argument
i32 %n
double %alpha
double %beta
double* %A
double* %u1
double* %v1
double* %u2
double* %v2
double* %w
double* %x
double* %y
double* %z

Start to analysis global variable

Start analysis loops
--i
--Loop Bound: (0, 1024)
----j
----Loop Bound: (0, 1024)
------array access   %5 = load double, double* %arrayidx, align 8
------array access   %8 = load double, double* %arrayidx5, align 8
------array access   %11 = load double, double* %arrayidx7, align 8
------array access   %14 = load double, double* %arrayidx11, align 8
------array access   %17 = load double, double* %arrayidx13, align 8
------array access   store double %add15, double* %arrayidx19, align 8
--i
--Loop Bound: (0, 1024)
----j
----Loop Bound: (0, 1024)
------array access   %27 = load double, double* %arrayidx30, align 8
------array access   %32 = load double, double* %arrayidx34, align 8
------array access   %35 = load double, double* %arrayidx37, align 8
------array access   store double %add39, double* %arrayidx41, align 8
--i
--Loop Bound: (0, 1024)
----array access   %43 = load double, double* %arrayidx52, align 8
----array access   %46 = load double, double* %arrayidx54, align 8
----array access   store double %add55, double* %arrayidx57, align 8
--i
--Loop Bound: (0, 1024)
----j
----Loop Bound: (0, 1024)
------array access   %54 = load double, double* %arrayidx68, align 8
------array access   %59 = load double, double* %arrayidx72, align 8
------array access   %62 = load double, double* %arrayidx75, align 8
------array access   store double %add77, double* %arrayidx79, align 8

Finish analysis loops
Start to analyze function: gemver
