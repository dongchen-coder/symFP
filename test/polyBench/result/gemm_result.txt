
Start to analysis array index
Array index info
C.addr ((1024 * j) + i)
C.addr ((1024 * j) + i)
A.addr ((1024 * k) + i)
B.addr ((1024 * j) + k)
C.addr ((1024 * j) + i)
C.addr ((1024 * j) + i)

Start to analyze argument
i32 %ni
i32 %nj
i32 %nk
double %alpha
double %beta
double* %A
double* %B
double* %C

Start to analysis global variable

Start analysis loops

Loop at depth 1 containing: %for.cond<header><exiting>,%for.body,%for.cond1,%for.end25,%for.inc26<latch>,%for.body3,%for.cond5,%for.end,%for.inc23,%for.body7,%for.inc
    Loop at depth 2 containing: %for.cond1<header><exiting>,%for.body3,%for.cond5,%for.end,%for.inc23<latch>,%for.body7,%for.inc
        Loop at depth 3 containing: %for.cond5<header><exiting>,%for.body7,%for.inc<latch>

--i
--Loop Bound: (0, 1024)
----j
----Loop Bound: (0, 1024)
------k
------Loop Bound: (0, 1024)
start to analysis Ref
not Last level loop
start to analysis Ref
not Last level loop
start to analysis Ref
not Last level loop
start to analysis Ref
Last level loop
--i
--Loop Bound: (0, 1024)
----j
----Loop Bound: (0, 1024)
------array access   %6 = load double, double* %arrayidx, align 8
------array access   store double %mul4, double* %arrayidx, align 8
------k
------Loop Bound: (0, 1024)
--------array access   %12 = load double, double* %arrayidx11, align 8
--------array access   %16 = load double, double* %arrayidx16, align 8
--------array access   %20 = load double, double* %arrayidx21, align 8
--------array access   store double %add22, double* %arrayidx21, align 8

Finish analysis loops
Start to analyze function: gemm
