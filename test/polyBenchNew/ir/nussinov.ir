; ModuleID = '/Users/dongchen/tools/llvm-4.0.0.src/lib/Transforms/SymFP/test/polyBenchNew/bc/nussinov.bc'
source_filename = "/Users/dongchen/tools/llvm-4.0.0.src/lib/Transforms/SymFP/test/polyBenchNew/src/nussinov.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.12.0"

; Function Attrs: noinline nounwind ssp uwtable
define void @nussinov(double* %table, double* %seq) #0 {
entry:
  %table.addr = alloca double*, align 8
  %seq.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double* %table, double** %table.addr, align 8
  store double* %seq, double** %seq.addr, align 8
  store i32 1023, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc115, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %0, 0
  br i1 %cmp, label %for.body, label %for.end116

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc112, %for.body
  %2 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %2, 1024
  br i1 %cmp2, label %for.body3, label %for.end114

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %3, 1
  %cmp4 = icmp sge i32 %sub, 0
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %4 = load double*, double** %table.addr, align 8
  %5 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %5, 1024
  %6 = load i32, i32* %j, align 4
  %add5 = add nsw i32 %mul, %6
  %idxprom = sext i32 %add5 to i64
  %arrayidx = getelementptr inbounds double, double* %4, i64 %idxprom
  %7 = load double, double* %arrayidx, align 8
  %8 = load double*, double** %table.addr, align 8
  %9 = load i32, i32* %i, align 4
  %mul6 = mul nsw i32 %9, 1024
  %10 = load i32, i32* %j, align 4
  %add7 = add nsw i32 %mul6, %10
  %sub8 = sub nsw i32 %add7, 1
  %idxprom9 = sext i32 %sub8 to i64
  %arrayidx10 = getelementptr inbounds double, double* %8, i64 %idxprom9
  %11 = load double, double* %arrayidx10, align 8
  %call = call i32 (double, double, ...) bitcast (i32 (...)* @max_score to i32 (double, double, ...)*)(double %7, double %11)
  %conv = sitofp i32 %call to double
  %12 = load double*, double** %table.addr, align 8
  %13 = load i32, i32* %i, align 4
  %mul11 = mul nsw i32 %13, 1024
  %14 = load i32, i32* %j, align 4
  %add12 = add nsw i32 %mul11, %14
  %idxprom13 = sext i32 %add12 to i64
  %arrayidx14 = getelementptr inbounds double, double* %12, i64 %idxprom13
  store double %conv, double* %arrayidx14, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  %15 = load i32, i32* %i, align 4
  %add15 = add nsw i32 %15, 1
  %cmp16 = icmp slt i32 %add15, 1024
  br i1 %cmp16, label %if.then18, label %if.end34

if.then18:                                        ; preds = %if.end
  %16 = load double*, double** %table.addr, align 8
  %17 = load i32, i32* %i, align 4
  %mul19 = mul nsw i32 %17, 1024
  %18 = load i32, i32* %j, align 4
  %add20 = add nsw i32 %mul19, %18
  %idxprom21 = sext i32 %add20 to i64
  %arrayidx22 = getelementptr inbounds double, double* %16, i64 %idxprom21
  %19 = load double, double* %arrayidx22, align 8
  %20 = load double*, double** %table.addr, align 8
  %21 = load i32, i32* %i, align 4
  %add23 = add nsw i32 %21, 1
  %mul24 = mul nsw i32 %add23, 1024
  %22 = load i32, i32* %j, align 4
  %add25 = add nsw i32 %mul24, %22
  %idxprom26 = sext i32 %add25 to i64
  %arrayidx27 = getelementptr inbounds double, double* %20, i64 %idxprom26
  %23 = load double, double* %arrayidx27, align 8
  %call28 = call i32 (double, double, ...) bitcast (i32 (...)* @max_score to i32 (double, double, ...)*)(double %19, double %23)
  %conv29 = sitofp i32 %call28 to double
  %24 = load double*, double** %table.addr, align 8
  %25 = load i32, i32* %i, align 4
  %mul30 = mul nsw i32 %25, 1024
  %26 = load i32, i32* %j, align 4
  %add31 = add nsw i32 %mul30, %26
  %idxprom32 = sext i32 %add31 to i64
  %arrayidx33 = getelementptr inbounds double, double* %24, i64 %idxprom32
  store double %conv29, double* %arrayidx33, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.then18, %if.end
  %27 = load i32, i32* %j, align 4
  %sub35 = sub nsw i32 %27, 1
  %cmp36 = icmp sge i32 %sub35, 0
  br i1 %cmp36, label %land.lhs.true, label %if.end86

land.lhs.true:                                    ; preds = %if.end34
  %28 = load i32, i32* %i, align 4
  %add38 = add nsw i32 %28, 1
  %cmp39 = icmp slt i32 %add38, 1024
  br i1 %cmp39, label %if.then41, label %if.end86

if.then41:                                        ; preds = %land.lhs.true
  %29 = load i32, i32* %i, align 4
  %30 = load i32, i32* %j, align 4
  %sub42 = sub nsw i32 %30, 1
  %cmp43 = icmp slt i32 %29, %sub42
  br i1 %cmp43, label %if.then45, label %if.else

if.then45:                                        ; preds = %if.then41
  %31 = load double*, double** %table.addr, align 8
  %32 = load i32, i32* %i, align 4
  %mul46 = mul nsw i32 %32, 1024
  %33 = load i32, i32* %j, align 4
  %add47 = add nsw i32 %mul46, %33
  %idxprom48 = sext i32 %add47 to i64
  %arrayidx49 = getelementptr inbounds double, double* %31, i64 %idxprom48
  %34 = load double, double* %arrayidx49, align 8
  %35 = load double*, double** %table.addr, align 8
  %36 = load i32, i32* %i, align 4
  %add50 = add nsw i32 %36, 1
  %mul51 = mul nsw i32 %add50, 1024
  %37 = load i32, i32* %j, align 4
  %add52 = add nsw i32 %mul51, %37
  %sub53 = sub nsw i32 %add52, 1
  %idxprom54 = sext i32 %sub53 to i64
  %arrayidx55 = getelementptr inbounds double, double* %35, i64 %idxprom54
  %38 = load double, double* %arrayidx55, align 8
  %39 = load double*, double** %seq.addr, align 8
  %40 = load i32, i32* %i, align 4
  %idxprom56 = sext i32 %40 to i64
  %arrayidx57 = getelementptr inbounds double, double* %39, i64 %idxprom56
  %41 = load double, double* %arrayidx57, align 8
  %42 = load double*, double** %seq.addr, align 8
  %43 = load i32, i32* %j, align 4
  %idxprom58 = sext i32 %43 to i64
  %arrayidx59 = getelementptr inbounds double, double* %42, i64 %idxprom58
  %44 = load double, double* %arrayidx59, align 8
  %call60 = call i32 (double, double, ...) bitcast (i32 (...)* @match to i32 (double, double, ...)*)(double %41, double %44)
  %conv61 = sitofp i32 %call60 to double
  %add62 = fadd double %38, %conv61
  %call63 = call i32 (double, double, ...) bitcast (i32 (...)* @max_score to i32 (double, double, ...)*)(double %34, double %add62)
  %conv64 = sitofp i32 %call63 to double
  %45 = load double*, double** %table.addr, align 8
  %46 = load i32, i32* %i, align 4
  %mul65 = mul nsw i32 %46, 1024
  %47 = load i32, i32* %j, align 4
  %add66 = add nsw i32 %mul65, %47
  %idxprom67 = sext i32 %add66 to i64
  %arrayidx68 = getelementptr inbounds double, double* %45, i64 %idxprom67
  store double %conv64, double* %arrayidx68, align 8
  br label %if.end85

if.else:                                          ; preds = %if.then41
  %48 = load double*, double** %table.addr, align 8
  %49 = load i32, i32* %i, align 4
  %mul69 = mul nsw i32 %49, 1024
  %50 = load i32, i32* %j, align 4
  %add70 = add nsw i32 %mul69, %50
  %idxprom71 = sext i32 %add70 to i64
  %arrayidx72 = getelementptr inbounds double, double* %48, i64 %idxprom71
  %51 = load double, double* %arrayidx72, align 8
  %52 = load double*, double** %table.addr, align 8
  %53 = load i32, i32* %i, align 4
  %add73 = add nsw i32 %53, 1
  %mul74 = mul nsw i32 %add73, 1024
  %54 = load i32, i32* %j, align 4
  %add75 = add nsw i32 %mul74, %54
  %sub76 = sub nsw i32 %add75, 1
  %idxprom77 = sext i32 %sub76 to i64
  %arrayidx78 = getelementptr inbounds double, double* %52, i64 %idxprom77
  %55 = load double, double* %arrayidx78, align 8
  %call79 = call i32 (double, double, ...) bitcast (i32 (...)* @max_score to i32 (double, double, ...)*)(double %51, double %55)
  %conv80 = sitofp i32 %call79 to double
  %56 = load double*, double** %table.addr, align 8
  %57 = load i32, i32* %i, align 4
  %mul81 = mul nsw i32 %57, 1024
  %58 = load i32, i32* %j, align 4
  %add82 = add nsw i32 %mul81, %58
  %idxprom83 = sext i32 %add82 to i64
  %arrayidx84 = getelementptr inbounds double, double* %56, i64 %idxprom83
  store double %conv80, double* %arrayidx84, align 8
  br label %if.end85

if.end85:                                         ; preds = %if.else, %if.then45
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %land.lhs.true, %if.end34
  %59 = load i32, i32* %i, align 4
  %add87 = add nsw i32 %59, 1
  store i32 %add87, i32* %k, align 4
  br label %for.cond88

for.cond88:                                       ; preds = %for.inc, %if.end86
  %60 = load i32, i32* %k, align 4
  %61 = load i32, i32* %j, align 4
  %cmp89 = icmp slt i32 %60, %61
  br i1 %cmp89, label %for.body91, label %for.end

for.body91:                                       ; preds = %for.cond88
  %62 = load double*, double** %table.addr, align 8
  %63 = load i32, i32* %i, align 4
  %mul92 = mul nsw i32 %63, 1024
  %64 = load i32, i32* %j, align 4
  %add93 = add nsw i32 %mul92, %64
  %idxprom94 = sext i32 %add93 to i64
  %arrayidx95 = getelementptr inbounds double, double* %62, i64 %idxprom94
  %65 = load double, double* %arrayidx95, align 8
  %66 = load double*, double** %table.addr, align 8
  %67 = load i32, i32* %i, align 4
  %mul96 = mul nsw i32 %67, 1024
  %68 = load i32, i32* %k, align 4
  %add97 = add nsw i32 %mul96, %68
  %idxprom98 = sext i32 %add97 to i64
  %arrayidx99 = getelementptr inbounds double, double* %66, i64 %idxprom98
  %69 = load double, double* %arrayidx99, align 8
  %70 = load double*, double** %table.addr, align 8
  %71 = load i32, i32* %k, align 4
  %add100 = add nsw i32 %71, 1
  %mul101 = mul nsw i32 %add100, 1024
  %72 = load i32, i32* %j, align 4
  %add102 = add nsw i32 %mul101, %72
  %idxprom103 = sext i32 %add102 to i64
  %arrayidx104 = getelementptr inbounds double, double* %70, i64 %idxprom103
  %73 = load double, double* %arrayidx104, align 8
  %add105 = fadd double %69, %73
  %call106 = call i32 (double, double, ...) bitcast (i32 (...)* @max_score to i32 (double, double, ...)*)(double %65, double %add105)
  %conv107 = sitofp i32 %call106 to double
  %74 = load double*, double** %table.addr, align 8
  %75 = load i32, i32* %i, align 4
  %mul108 = mul nsw i32 %75, 1024
  %76 = load i32, i32* %j, align 4
  %add109 = add nsw i32 %mul108, %76
  %idxprom110 = sext i32 %add109 to i64
  %arrayidx111 = getelementptr inbounds double, double* %74, i64 %idxprom110
  store double %conv107, double* %arrayidx111, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body91
  %77 = load i32, i32* %k, align 4
  %inc = add nsw i32 %77, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond88

for.end:                                          ; preds = %for.cond88
  br label %for.inc112

for.inc112:                                       ; preds = %for.end
  %78 = load i32, i32* %j, align 4
  %inc113 = add nsw i32 %78, 1
  store i32 %inc113, i32* %j, align 4
  br label %for.cond1

for.end114:                                       ; preds = %for.cond1
  br label %for.inc115

for.inc115:                                       ; preds = %for.end114
  %79 = load i32, i32* %i, align 4
  %dec = add nsw i32 %79, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end116:                                       ; preds = %for.cond
  ret void
}

declare i32 @max_score(...) #1

declare i32 @match(...) #1

attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 4.0.0 (tags/RELEASE_400/final)"}
