; ModuleID = '/Users/dongchen/tools/llvm-4.0.0.src/lib/Transforms/SymFP/test/polyBenchNew/bc/jacobi_2d.bc'
source_filename = "/Users/dongchen/tools/llvm-4.0.0.src/lib/Transforms/SymFP/test/polyBenchNew/src/jacobi_2d.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.12.0"

; Function Attrs: noinline nounwind ssp uwtable
define void @jacobi_2d(double* %A, double* %B) #0 {
entry:
  %A.addr = alloca double*, align 8
  %B.addr = alloca double*, align 8
  %t = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %A, double** %A.addr, align 8
  store double* %B, double** %B.addr, align 8
  store i32 0, i32* %t, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc83, %entry
  %0 = load i32, i32* %t, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end85

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc35, %for.body
  %1 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %1, 1023
  br i1 %cmp2, label %for.body3, label %for.end37

for.body3:                                        ; preds = %for.cond1
  store i32 1, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %2 = load i32, i32* %j, align 4
  %cmp5 = icmp slt i32 %2, 1023
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %3 = load double*, double** %A.addr, align 8
  %4 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %4, 1024
  %5 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %5
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds double, double* %3, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %7 = load double*, double** %A.addr, align 8
  %8 = load i32, i32* %i, align 4
  %mul7 = mul nsw i32 %8, 1024
  %9 = load i32, i32* %j, align 4
  %add8 = add nsw i32 %mul7, %9
  %sub = sub nsw i32 %add8, 1
  %idxprom9 = sext i32 %sub to i64
  %arrayidx10 = getelementptr inbounds double, double* %7, i64 %idxprom9
  %10 = load double, double* %arrayidx10, align 8
  %add11 = fadd double %6, %10
  %11 = load double*, double** %A.addr, align 8
  %12 = load i32, i32* %i, align 4
  %mul12 = mul nsw i32 %12, 1024
  %add13 = add nsw i32 %mul12, 1
  %13 = load i32, i32* %j, align 4
  %add14 = add nsw i32 %add13, %13
  %idxprom15 = sext i32 %add14 to i64
  %arrayidx16 = getelementptr inbounds double, double* %11, i64 %idxprom15
  %14 = load double, double* %arrayidx16, align 8
  %add17 = fadd double %add11, %14
  %15 = load double*, double** %A.addr, align 8
  %16 = load i32, i32* %i, align 4
  %add18 = add nsw i32 1, %16
  %mul19 = mul nsw i32 %add18, 1024
  %17 = load i32, i32* %j, align 4
  %add20 = add nsw i32 %mul19, %17
  %idxprom21 = sext i32 %add20 to i64
  %arrayidx22 = getelementptr inbounds double, double* %15, i64 %idxprom21
  %18 = load double, double* %arrayidx22, align 8
  %add23 = fadd double %add17, %18
  %19 = load double*, double** %A.addr, align 8
  %20 = load i32, i32* %i, align 4
  %sub24 = sub nsw i32 %20, 1
  %mul25 = mul nsw i32 %sub24, 1024
  %21 = load i32, i32* %j, align 4
  %add26 = add nsw i32 %mul25, %21
  %idxprom27 = sext i32 %add26 to i64
  %arrayidx28 = getelementptr inbounds double, double* %19, i64 %idxprom27
  %22 = load double, double* %arrayidx28, align 8
  %add29 = fadd double %add23, %22
  %mul30 = fmul double 2.000000e-01, %add29
  %23 = load double*, double** %B.addr, align 8
  %24 = load i32, i32* %i, align 4
  %mul31 = mul nsw i32 %24, 1024
  %25 = load i32, i32* %j, align 4
  %add32 = add nsw i32 %mul31, %25
  %idxprom33 = sext i32 %add32 to i64
  %arrayidx34 = getelementptr inbounds double, double* %23, i64 %idxprom33
  store double %mul30, double* %arrayidx34, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %26 = load i32, i32* %j, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc35

for.inc35:                                        ; preds = %for.end
  %27 = load i32, i32* %i, align 4
  %inc36 = add nsw i32 %27, 1
  store i32 %inc36, i32* %i, align 4
  br label %for.cond1

for.end37:                                        ; preds = %for.cond1
  store i32 1, i32* %i, align 4
  br label %for.cond38

for.cond38:                                       ; preds = %for.inc80, %for.end37
  %28 = load i32, i32* %i, align 4
  %cmp39 = icmp slt i32 %28, 1023
  br i1 %cmp39, label %for.body40, label %for.end82

for.body40:                                       ; preds = %for.cond38
  store i32 1, i32* %j, align 4
  br label %for.cond41

for.cond41:                                       ; preds = %for.inc77, %for.body40
  %29 = load i32, i32* %j, align 4
  %cmp42 = icmp slt i32 %29, 1023
  br i1 %cmp42, label %for.body43, label %for.end79

for.body43:                                       ; preds = %for.cond41
  %30 = load double*, double** %B.addr, align 8
  %31 = load i32, i32* %i, align 4
  %mul44 = mul nsw i32 %31, 1024
  %32 = load i32, i32* %j, align 4
  %add45 = add nsw i32 %mul44, %32
  %idxprom46 = sext i32 %add45 to i64
  %arrayidx47 = getelementptr inbounds double, double* %30, i64 %idxprom46
  %33 = load double, double* %arrayidx47, align 8
  %34 = load double*, double** %B.addr, align 8
  %35 = load i32, i32* %i, align 4
  %mul48 = mul nsw i32 %35, 1024
  %36 = load i32, i32* %j, align 4
  %add49 = add nsw i32 %mul48, %36
  %sub50 = sub nsw i32 %add49, 1
  %idxprom51 = sext i32 %sub50 to i64
  %arrayidx52 = getelementptr inbounds double, double* %34, i64 %idxprom51
  %37 = load double, double* %arrayidx52, align 8
  %add53 = fadd double %33, %37
  %38 = load double*, double** %B.addr, align 8
  %39 = load i32, i32* %i, align 4
  %mul54 = mul nsw i32 %39, 1024
  %add55 = add nsw i32 %mul54, 1
  %40 = load i32, i32* %j, align 4
  %add56 = add nsw i32 %add55, %40
  %idxprom57 = sext i32 %add56 to i64
  %arrayidx58 = getelementptr inbounds double, double* %38, i64 %idxprom57
  %41 = load double, double* %arrayidx58, align 8
  %add59 = fadd double %add53, %41
  %42 = load double*, double** %B.addr, align 8
  %43 = load i32, i32* %i, align 4
  %add60 = add nsw i32 1, %43
  %mul61 = mul nsw i32 %add60, 1024
  %44 = load i32, i32* %j, align 4
  %add62 = add nsw i32 %mul61, %44
  %idxprom63 = sext i32 %add62 to i64
  %arrayidx64 = getelementptr inbounds double, double* %42, i64 %idxprom63
  %45 = load double, double* %arrayidx64, align 8
  %add65 = fadd double %add59, %45
  %46 = load double*, double** %B.addr, align 8
  %47 = load i32, i32* %i, align 4
  %sub66 = sub nsw i32 %47, 1
  %mul67 = mul nsw i32 %sub66, 1024
  %48 = load i32, i32* %j, align 4
  %add68 = add nsw i32 %mul67, %48
  %idxprom69 = sext i32 %add68 to i64
  %arrayidx70 = getelementptr inbounds double, double* %46, i64 %idxprom69
  %49 = load double, double* %arrayidx70, align 8
  %add71 = fadd double %add65, %49
  %mul72 = fmul double 2.000000e-01, %add71
  %50 = load double*, double** %A.addr, align 8
  %51 = load i32, i32* %i, align 4
  %mul73 = mul nsw i32 %51, 1024
  %52 = load i32, i32* %j, align 4
  %add74 = add nsw i32 %mul73, %52
  %idxprom75 = sext i32 %add74 to i64
  %arrayidx76 = getelementptr inbounds double, double* %50, i64 %idxprom75
  store double %mul72, double* %arrayidx76, align 8
  br label %for.inc77

for.inc77:                                        ; preds = %for.body43
  %53 = load i32, i32* %j, align 4
  %inc78 = add nsw i32 %53, 1
  store i32 %inc78, i32* %j, align 4
  br label %for.cond41

for.end79:                                        ; preds = %for.cond41
  br label %for.inc80

for.inc80:                                        ; preds = %for.end79
  %54 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %54, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond38

for.end82:                                        ; preds = %for.cond38
  br label %for.inc83

for.inc83:                                        ; preds = %for.end82
  %55 = load i32, i32* %t, align 4
  %inc84 = add nsw i32 %55, 1
  store i32 %inc84, i32* %t, align 4
  br label %for.cond

for.end85:                                        ; preds = %for.cond
  ret void
}

attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 4.0.0 (tags/RELEASE_400/final)"}
