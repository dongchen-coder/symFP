; ModuleID = '/Users/dongchen/tools/llvm-4.0.0.src/lib/Transforms/SymFP/test/polyBenchNew/bc/symm.bc'
source_filename = "/Users/dongchen/tools/llvm-4.0.0.src/lib/Transforms/SymFP/test/polyBenchNew/src/symm.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.12.0"

; Function Attrs: noinline nounwind ssp uwtable
define void @symm(double* %A, double* %B, double* %C, double %alpha, double %beta) #0 {
entry:
  %A.addr = alloca double*, align 8
  %B.addr = alloca double*, align 8
  %C.addr = alloca double*, align 8
  %alpha.addr = alloca double, align 8
  %beta.addr = alloca double, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %temp2 = alloca double, align 8
  store double* %A, double** %A.addr, align 8
  store double* %B, double** %B.addr, align 8
  store double* %C, double** %C.addr, align 8
  store double %alpha, double* %alpha.addr, align 8
  store double %beta, double* %beta.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc53, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 1024
  br i1 %cmp, label %for.body, label %for.end55

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc50, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 1024
  br i1 %cmp2, label %for.body3, label %for.end52

for.body3:                                        ; preds = %for.cond1
  store double 0.000000e+00, double* %temp2, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %2 = load i32, i32* %k, align 4
  %3 = load i32, i32* %i, align 4
  %cmp5 = icmp slt i32 %2, %3
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %4 = load double, double* %alpha.addr, align 8
  %5 = load double*, double** %B.addr, align 8
  %6 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %6, 1024
  %7 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %7
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds double, double* %5, i64 %idxprom
  %8 = load double, double* %arrayidx, align 8
  %mul7 = fmul double %4, %8
  %9 = load double*, double** %A.addr, align 8
  %10 = load i32, i32* %i, align 4
  %mul8 = mul nsw i32 %10, 1024
  %11 = load i32, i32* %k, align 4
  %add9 = add nsw i32 %mul8, %11
  %idxprom10 = sext i32 %add9 to i64
  %arrayidx11 = getelementptr inbounds double, double* %9, i64 %idxprom10
  %12 = load double, double* %arrayidx11, align 8
  %mul12 = fmul double %mul7, %12
  %13 = load double*, double** %C.addr, align 8
  %14 = load i32, i32* %k, align 4
  %mul13 = mul nsw i32 %14, 1024
  %15 = load i32, i32* %j, align 4
  %add14 = add nsw i32 %mul13, %15
  %idxprom15 = sext i32 %add14 to i64
  %arrayidx16 = getelementptr inbounds double, double* %13, i64 %idxprom15
  %16 = load double, double* %arrayidx16, align 8
  %add17 = fadd double %16, %mul12
  store double %add17, double* %arrayidx16, align 8
  %17 = load double*, double** %B.addr, align 8
  %18 = load i32, i32* %k, align 4
  %mul18 = mul nsw i32 %18, 1024
  %19 = load i32, i32* %j, align 4
  %add19 = add nsw i32 %mul18, %19
  %idxprom20 = sext i32 %add19 to i64
  %arrayidx21 = getelementptr inbounds double, double* %17, i64 %idxprom20
  %20 = load double, double* %arrayidx21, align 8
  %21 = load double*, double** %A.addr, align 8
  %22 = load i32, i32* %i, align 4
  %mul22 = mul nsw i32 %22, 1024
  %23 = load i32, i32* %k, align 4
  %add23 = add nsw i32 %mul22, %23
  %idxprom24 = sext i32 %add23 to i64
  %arrayidx25 = getelementptr inbounds double, double* %21, i64 %idxprom24
  %24 = load double, double* %arrayidx25, align 8
  %mul26 = fmul double %20, %24
  %25 = load double, double* %temp2, align 8
  %add27 = fadd double %25, %mul26
  store double %add27, double* %temp2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %26 = load i32, i32* %k, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  %27 = load double, double* %beta.addr, align 8
  %28 = load double*, double** %C.addr, align 8
  %29 = load i32, i32* %i, align 4
  %mul28 = mul nsw i32 %29, 1024
  %30 = load i32, i32* %j, align 4
  %add29 = add nsw i32 %mul28, %30
  %idxprom30 = sext i32 %add29 to i64
  %arrayidx31 = getelementptr inbounds double, double* %28, i64 %idxprom30
  %31 = load double, double* %arrayidx31, align 8
  %mul32 = fmul double %27, %31
  %32 = load double, double* %alpha.addr, align 8
  %33 = load double*, double** %B.addr, align 8
  %34 = load i32, i32* %i, align 4
  %mul33 = mul nsw i32 %34, 1024
  %35 = load i32, i32* %j, align 4
  %add34 = add nsw i32 %mul33, %35
  %idxprom35 = sext i32 %add34 to i64
  %arrayidx36 = getelementptr inbounds double, double* %33, i64 %idxprom35
  %36 = load double, double* %arrayidx36, align 8
  %mul37 = fmul double %32, %36
  %37 = load double*, double** %A.addr, align 8
  %38 = load i32, i32* %i, align 4
  %mul38 = mul nsw i32 %38, 1024
  %39 = load i32, i32* %i, align 4
  %add39 = add nsw i32 %mul38, %39
  %idxprom40 = sext i32 %add39 to i64
  %arrayidx41 = getelementptr inbounds double, double* %37, i64 %idxprom40
  %40 = load double, double* %arrayidx41, align 8
  %mul42 = fmul double %mul37, %40
  %add43 = fadd double %mul32, %mul42
  %41 = load double, double* %alpha.addr, align 8
  %42 = load double, double* %temp2, align 8
  %mul44 = fmul double %41, %42
  %add45 = fadd double %add43, %mul44
  %43 = load double*, double** %C.addr, align 8
  %44 = load i32, i32* %i, align 4
  %mul46 = mul nsw i32 %44, 1024
  %45 = load i32, i32* %j, align 4
  %add47 = add nsw i32 %mul46, %45
  %idxprom48 = sext i32 %add47 to i64
  %arrayidx49 = getelementptr inbounds double, double* %43, i64 %idxprom48
  store double %add45, double* %arrayidx49, align 8
  br label %for.inc50

for.inc50:                                        ; preds = %for.end
  %46 = load i32, i32* %j, align 4
  %inc51 = add nsw i32 %46, 1
  store i32 %inc51, i32* %j, align 4
  br label %for.cond1

for.end52:                                        ; preds = %for.cond1
  br label %for.inc53

for.inc53:                                        ; preds = %for.end52
  %47 = load i32, i32* %i, align 4
  %inc54 = add nsw i32 %47, 1
  store i32 %inc54, i32* %i, align 4
  br label %for.cond

for.end55:                                        ; preds = %for.cond
  ret void
}

attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 4.0.0 (tags/RELEASE_400/final)"}
