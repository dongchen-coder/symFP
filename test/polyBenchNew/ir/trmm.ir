; ModuleID = '/Users/dongchen/tools/llvm-4.0.0.src/lib/Transforms/SymFP/test/polyBenchNew/bc/trmm.bc'
source_filename = "/Users/dongchen/tools/llvm-4.0.0.src/lib/Transforms/SymFP/test/polyBenchNew/src/trmm.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.12.0"

; Function Attrs: noinline nounwind ssp uwtable
define void @trmm(double* %A, double* %B, double %alpha) #0 {
entry:
  %A.addr = alloca double*, align 8
  %B.addr = alloca double*, align 8
  %alpha.addr = alloca double, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double* %A, double** %A.addr, align 8
  store double* %B, double** %B.addr, align 8
  store double %alpha, double* %alpha.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc30, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 1024
  br i1 %cmp, label %for.body, label %for.end32

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc27, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 1024
  br i1 %cmp2, label %for.body3, label %for.end29

for.body3:                                        ; preds = %for.cond1
  %2 = load i32, i32* %i, align 4
  %add = add nsw i32 %2, 1
  store i32 %add, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %3 = load i32, i32* %k, align 4
  %cmp5 = icmp slt i32 %3, 1024
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %4 = load double*, double** %A.addr, align 8
  %5 = load i32, i32* %k, align 4
  %mul = mul nsw i32 %5, 1024
  %6 = load i32, i32* %i, align 4
  %add7 = add nsw i32 %mul, %6
  %idxprom = sext i32 %add7 to i64
  %arrayidx = getelementptr inbounds double, double* %4, i64 %idxprom
  %7 = load double, double* %arrayidx, align 8
  %8 = load double*, double** %B.addr, align 8
  %9 = load i32, i32* %k, align 4
  %mul8 = mul nsw i32 %9, 1024
  %10 = load i32, i32* %j, align 4
  %add9 = add nsw i32 %mul8, %10
  %idxprom10 = sext i32 %add9 to i64
  %arrayidx11 = getelementptr inbounds double, double* %8, i64 %idxprom10
  %11 = load double, double* %arrayidx11, align 8
  %mul12 = fmul double %7, %11
  %12 = load double*, double** %B.addr, align 8
  %13 = load i32, i32* %i, align 4
  %mul13 = mul nsw i32 %13, 1024
  %14 = load i32, i32* %j, align 4
  %add14 = add nsw i32 %mul13, %14
  %idxprom15 = sext i32 %add14 to i64
  %arrayidx16 = getelementptr inbounds double, double* %12, i64 %idxprom15
  %15 = load double, double* %arrayidx16, align 8
  %add17 = fadd double %15, %mul12
  store double %add17, double* %arrayidx16, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %16 = load i32, i32* %k, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  %17 = load double, double* %alpha.addr, align 8
  %18 = load double*, double** %B.addr, align 8
  %19 = load i32, i32* %i, align 4
  %mul18 = mul nsw i32 %19, 1024
  %20 = load i32, i32* %j, align 4
  %add19 = add nsw i32 %mul18, %20
  %idxprom20 = sext i32 %add19 to i64
  %arrayidx21 = getelementptr inbounds double, double* %18, i64 %idxprom20
  %21 = load double, double* %arrayidx21, align 8
  %mul22 = fmul double %17, %21
  %22 = load double*, double** %B.addr, align 8
  %23 = load i32, i32* %i, align 4
  %mul23 = mul nsw i32 %23, 1024
  %24 = load i32, i32* %j, align 4
  %add24 = add nsw i32 %mul23, %24
  %idxprom25 = sext i32 %add24 to i64
  %arrayidx26 = getelementptr inbounds double, double* %22, i64 %idxprom25
  store double %mul22, double* %arrayidx26, align 8
  br label %for.inc27

for.inc27:                                        ; preds = %for.end
  %25 = load i32, i32* %j, align 4
  %inc28 = add nsw i32 %25, 1
  store i32 %inc28, i32* %j, align 4
  br label %for.cond1

for.end29:                                        ; preds = %for.cond1
  br label %for.inc30

for.inc30:                                        ; preds = %for.end29
  %26 = load i32, i32* %i, align 4
  %inc31 = add nsw i32 %26, 1
  store i32 %inc31, i32* %i, align 4
  br label %for.cond

for.end32:                                        ; preds = %for.cond
  ret void
}

attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 4.0.0 (tags/RELEASE_400/final)"}
