; ModuleID = '/Users/dongchen/tools/llvm-4.0.0.src/lib/Transforms/SymFP/test/polyBenchNew/bc/durbin.bc'
source_filename = "/Users/dongchen/tools/llvm-4.0.0.src/lib/Transforms/SymFP/test/polyBenchNew/src/durbin.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.12.0"

; Function Attrs: noinline nounwind ssp uwtable
define void @durbin(double* %y, double* %r, double* %z) #0 {
entry:
  %y.addr = alloca double*, align 8
  %r.addr = alloca double*, align 8
  %z.addr = alloca double*, align 8
  %k = alloca i32, align 4
  %i = alloca i32, align 4
  %alpha = alloca double, align 8
  %beta = alloca double, align 8
  %sum = alloca double, align 8
  store double* %y, double** %y.addr, align 8
  store double* %r, double** %r.addr, align 8
  store double* %z, double** %z.addr, align 8
  %0 = load double*, double** %r.addr, align 8
  %arrayidx = getelementptr inbounds double, double* %0, i64 0
  %1 = load double, double* %arrayidx, align 8
  %sub = fsub double -0.000000e+00, %1
  %2 = load double*, double** %y.addr, align 8
  %arrayidx1 = getelementptr inbounds double, double* %2, i64 0
  store double %sub, double* %arrayidx1, align 8
  store double 1.000000e+00, double* %beta, align 8
  %3 = load double*, double** %r.addr, align 8
  %arrayidx2 = getelementptr inbounds double, double* %3, i64 0
  %4 = load double, double* %arrayidx2, align 8
  %sub3 = fsub double -0.000000e+00, %4
  store double %sub3, double* %alpha, align 8
  store i32 1, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc47, %entry
  %5 = load i32, i32* %k, align 4
  %cmp = icmp slt i32 %5, 1024
  br i1 %cmp, label %for.body, label %for.end49

for.body:                                         ; preds = %for.cond
  %6 = load double, double* %alpha, align 8
  %7 = load double, double* %alpha, align 8
  %mul = fmul double %6, %7
  %sub4 = fsub double 1.000000e+00, %mul
  %8 = load double, double* %beta, align 8
  %mul5 = fmul double %sub4, %8
  store double %mul5, double* %beta, align 8
  store double 0.000000e+00, double* %sum, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %for.body
  %9 = load i32, i32* %i, align 4
  %10 = load i32, i32* %k, align 4
  %cmp7 = icmp slt i32 %9, %10
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %11 = load double*, double** %r.addr, align 8
  %12 = load i32, i32* %k, align 4
  %13 = load i32, i32* %i, align 4
  %sub9 = sub nsw i32 %12, %13
  %sub10 = sub nsw i32 %sub9, 1
  %idxprom = sext i32 %sub10 to i64
  %arrayidx11 = getelementptr inbounds double, double* %11, i64 %idxprom
  %14 = load double, double* %arrayidx11, align 8
  %15 = load double*, double** %y.addr, align 8
  %16 = load i32, i32* %i, align 4
  %idxprom12 = sext i32 %16 to i64
  %arrayidx13 = getelementptr inbounds double, double* %15, i64 %idxprom12
  %17 = load double, double* %arrayidx13, align 8
  %mul14 = fmul double %14, %17
  %18 = load double, double* %sum, align 8
  %add = fadd double %18, %mul14
  store double %add, double* %sum, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  %20 = load double*, double** %r.addr, align 8
  %21 = load i32, i32* %k, align 4
  %idxprom15 = sext i32 %21 to i64
  %arrayidx16 = getelementptr inbounds double, double* %20, i64 %idxprom15
  %22 = load double, double* %arrayidx16, align 8
  %23 = load double, double* %sum, align 8
  %add17 = fadd double %22, %23
  %sub18 = fsub double -0.000000e+00, %add17
  %24 = load double, double* %beta, align 8
  %div = fdiv double %sub18, %24
  store double %div, double* %alpha, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc32, %for.end
  %25 = load i32, i32* %i, align 4
  %26 = load i32, i32* %k, align 4
  %cmp20 = icmp slt i32 %25, %26
  br i1 %cmp20, label %for.body21, label %for.end34

for.body21:                                       ; preds = %for.cond19
  %27 = load double*, double** %y.addr, align 8
  %28 = load i32, i32* %i, align 4
  %idxprom22 = sext i32 %28 to i64
  %arrayidx23 = getelementptr inbounds double, double* %27, i64 %idxprom22
  %29 = load double, double* %arrayidx23, align 8
  %30 = load double, double* %alpha, align 8
  %31 = load double*, double** %y.addr, align 8
  %32 = load i32, i32* %k, align 4
  %33 = load i32, i32* %i, align 4
  %sub24 = sub nsw i32 %32, %33
  %sub25 = sub nsw i32 %sub24, 1
  %idxprom26 = sext i32 %sub25 to i64
  %arrayidx27 = getelementptr inbounds double, double* %31, i64 %idxprom26
  %34 = load double, double* %arrayidx27, align 8
  %mul28 = fmul double %30, %34
  %add29 = fadd double %29, %mul28
  %35 = load double*, double** %z.addr, align 8
  %36 = load i32, i32* %i, align 4
  %idxprom30 = sext i32 %36 to i64
  %arrayidx31 = getelementptr inbounds double, double* %35, i64 %idxprom30
  store double %add29, double* %arrayidx31, align 8
  br label %for.inc32

for.inc32:                                        ; preds = %for.body21
  %37 = load i32, i32* %i, align 4
  %inc33 = add nsw i32 %37, 1
  store i32 %inc33, i32* %i, align 4
  br label %for.cond19

for.end34:                                        ; preds = %for.cond19
  store i32 0, i32* %i, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc42, %for.end34
  %38 = load i32, i32* %i, align 4
  %39 = load i32, i32* %k, align 4
  %cmp36 = icmp slt i32 %38, %39
  br i1 %cmp36, label %for.body37, label %for.end44

for.body37:                                       ; preds = %for.cond35
  %40 = load double*, double** %z.addr, align 8
  %41 = load i32, i32* %i, align 4
  %idxprom38 = sext i32 %41 to i64
  %arrayidx39 = getelementptr inbounds double, double* %40, i64 %idxprom38
  %42 = load double, double* %arrayidx39, align 8
  %43 = load double*, double** %y.addr, align 8
  %44 = load i32, i32* %i, align 4
  %idxprom40 = sext i32 %44 to i64
  %arrayidx41 = getelementptr inbounds double, double* %43, i64 %idxprom40
  store double %42, double* %arrayidx41, align 8
  br label %for.inc42

for.inc42:                                        ; preds = %for.body37
  %45 = load i32, i32* %i, align 4
  %inc43 = add nsw i32 %45, 1
  store i32 %inc43, i32* %i, align 4
  br label %for.cond35

for.end44:                                        ; preds = %for.cond35
  %46 = load double, double* %alpha, align 8
  %47 = load double*, double** %y.addr, align 8
  %48 = load i32, i32* %k, align 4
  %idxprom45 = sext i32 %48 to i64
  %arrayidx46 = getelementptr inbounds double, double* %47, i64 %idxprom45
  store double %46, double* %arrayidx46, align 8
  br label %for.inc47

for.inc47:                                        ; preds = %for.end44
  %49 = load i32, i32* %k, align 4
  %inc48 = add nsw i32 %49, 1
  store i32 %inc48, i32* %k, align 4
  br label %for.cond

for.end49:                                        ; preds = %for.cond
  ret void
}

attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 4.0.0 (tags/RELEASE_400/final)"}
