; ModuleID = './ss_bc/2mm.bc'
source_filename = "./ss_src/2mm.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define void @mm2(double* %tmp, double* %A, double* %B, double* %C, double* %D, double %alpha, double %beta) #0 {
entry:
  %tmp.addr = alloca double*, align 8
  %A.addr = alloca double*, align 8
  %B.addr = alloca double*, align 8
  %C.addr = alloca double*, align 8
  %D.addr = alloca double*, align 8
  %alpha.addr = alloca double, align 8
  %beta.addr = alloca double, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double* %tmp, double** %tmp.addr, align 8
  store double* %A, double** %A.addr, align 8
  store double* %B, double** %B.addr, align 8
  store double* %C, double** %C.addr, align 8
  store double* %D, double** %D.addr, align 8
  store double %alpha, double* %alpha.addr, align 8
  store double %beta, double* %beta.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc25, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 1024
  br i1 %cmp, label %for.body, label %for.end27

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc22, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 1024
  br i1 %cmp2, label %for.body3, label %for.end24

for.body3:                                        ; preds = %for.cond1
  %2 = load double*, double** %tmp.addr, align 8
  %3 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %3, 1024
  %4 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %4
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds double, double* %2, i64 %idxprom
  store double 0.000000e+00, double* %arrayidx, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %5 = load i32, i32* %k, align 4
  %cmp5 = icmp slt i32 %5, 1024
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %6 = load double, double* %alpha.addr, align 8
  %7 = load double*, double** %A.addr, align 8
  %8 = load i32, i32* %i, align 4
  %mul7 = mul nsw i32 %8, 1024
  %9 = load i32, i32* %k, align 4
  %add8 = add nsw i32 %mul7, %9
  %idxprom9 = sext i32 %add8 to i64
  %arrayidx10 = getelementptr inbounds double, double* %7, i64 %idxprom9
  %10 = load double, double* %arrayidx10, align 8
  %mul11 = fmul double %6, %10
  %11 = load double*, double** %B.addr, align 8
  %12 = load i32, i32* %k, align 4
  %mul12 = mul nsw i32 %12, 1024
  %13 = load i32, i32* %j, align 4
  %add13 = add nsw i32 %mul12, %13
  %idxprom14 = sext i32 %add13 to i64
  %arrayidx15 = getelementptr inbounds double, double* %11, i64 %idxprom14
  %14 = load double, double* %arrayidx15, align 8
  %mul16 = fmul double %mul11, %14
  %15 = load double*, double** %tmp.addr, align 8
  %16 = load i32, i32* %i, align 4
  %mul17 = mul nsw i32 %16, 1024
  %17 = load i32, i32* %j, align 4
  %add18 = add nsw i32 %mul17, %17
  %idxprom19 = sext i32 %add18 to i64
  %arrayidx20 = getelementptr inbounds double, double* %15, i64 %idxprom19
  %18 = load double, double* %arrayidx20, align 8
  %add21 = fadd double %18, %mul16
  store double %add21, double* %arrayidx20, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %19 = load i32, i32* %k, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc22

for.inc22:                                        ; preds = %for.end
  %20 = load i32, i32* %j, align 4
  %inc23 = add nsw i32 %20, 1
  store i32 %inc23, i32* %j, align 4
  br label %for.cond1

for.end24:                                        ; preds = %for.cond1
  br label %for.inc25

for.inc25:                                        ; preds = %for.end24
  %21 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %21, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond

for.end27:                                        ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc62, %for.end27
  %22 = load i32, i32* %i, align 4
  %cmp29 = icmp slt i32 %22, 1024
  br i1 %cmp29, label %for.body30, label %for.end64

for.body30:                                       ; preds = %for.cond28
  store i32 0, i32* %j, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc59, %for.body30
  %23 = load i32, i32* %j, align 4
  %cmp32 = icmp slt i32 %23, 1024
  br i1 %cmp32, label %for.body33, label %for.end61

for.body33:                                       ; preds = %for.cond31
  %24 = load double, double* %beta.addr, align 8
  %25 = load double*, double** %D.addr, align 8
  %26 = load i32, i32* %i, align 4
  %mul34 = mul nsw i32 %26, 1024
  %27 = load i32, i32* %j, align 4
  %add35 = add nsw i32 %mul34, %27
  %idxprom36 = sext i32 %add35 to i64
  %arrayidx37 = getelementptr inbounds double, double* %25, i64 %idxprom36
  %28 = load double, double* %arrayidx37, align 8
  %mul38 = fmul double %28, %24
  store double %mul38, double* %arrayidx37, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond39

for.cond39:                                       ; preds = %for.inc56, %for.body33
  %29 = load i32, i32* %k, align 4
  %cmp40 = icmp slt i32 %29, 1024
  br i1 %cmp40, label %for.body41, label %for.end58

for.body41:                                       ; preds = %for.cond39
  %30 = load double*, double** %tmp.addr, align 8
  %31 = load i32, i32* %i, align 4
  %mul42 = mul nsw i32 %31, 1024
  %32 = load i32, i32* %k, align 4
  %add43 = add nsw i32 %mul42, %32
  %idxprom44 = sext i32 %add43 to i64
  %arrayidx45 = getelementptr inbounds double, double* %30, i64 %idxprom44
  %33 = load double, double* %arrayidx45, align 8
  %34 = load double*, double** %C.addr, align 8
  %35 = load i32, i32* %k, align 4
  %mul46 = mul nsw i32 %35, 1024
  %36 = load i32, i32* %j, align 4
  %add47 = add nsw i32 %mul46, %36
  %idxprom48 = sext i32 %add47 to i64
  %arrayidx49 = getelementptr inbounds double, double* %34, i64 %idxprom48
  %37 = load double, double* %arrayidx49, align 8
  %mul50 = fmul double %33, %37
  %38 = load double*, double** %D.addr, align 8
  %39 = load i32, i32* %i, align 4
  %mul51 = mul nsw i32 %39, 1024
  %40 = load i32, i32* %j, align 4
  %add52 = add nsw i32 %mul51, %40
  %idxprom53 = sext i32 %add52 to i64
  %arrayidx54 = getelementptr inbounds double, double* %38, i64 %idxprom53
  %41 = load double, double* %arrayidx54, align 8
  %add55 = fadd double %41, %mul50
  store double %add55, double* %arrayidx54, align 8
  br label %for.inc56

for.inc56:                                        ; preds = %for.body41
  %42 = load i32, i32* %k, align 4
  %inc57 = add nsw i32 %42, 1
  store i32 %inc57, i32* %k, align 4
  br label %for.cond39

for.end58:                                        ; preds = %for.cond39
  br label %for.inc59

for.inc59:                                        ; preds = %for.end58
  %43 = load i32, i32* %j, align 4
  %inc60 = add nsw i32 %43, 1
  store i32 %inc60, i32* %j, align 4
  br label %for.cond31

for.end61:                                        ; preds = %for.cond31
  br label %for.inc62

for.inc62:                                        ; preds = %for.end61
  %44 = load i32, i32* %i, align 4
  %inc63 = add nsw i32 %44, 1
  store i32 %inc63, i32* %i, align 4
  br label %for.cond28

for.end64:                                        ; preds = %for.cond28
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0 (tags/RELEASE_600/final)"}
