; ModuleID = './ss_bc/jacobi_2d.bc'
source_filename = "./ss_src/jacobi_2d.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define void @jacobi_2d(double* %A, double* %B) #0 {
entry:
  %A.addr = alloca double*, align 8
  %B.addr = alloca double*, align 8
  %t = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %A, double** %A.addr, align 8
  store double* %B, double** %B.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc39, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 1022
  br i1 %cmp, label %for.body, label %for.end41

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 1022
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load double*, double** %A.addr, align 8
  %3 = load i32, i32* %i, align 4
  %add = add nsw i32 %3, 1
  %mul = mul nsw i32 %add, 1024
  %4 = load i32, i32* %j, align 4
  %add4 = add nsw i32 %mul, %4
  %add5 = add nsw i32 %add4, 1
  %idxprom = sext i32 %add5 to i64
  %arrayidx = getelementptr inbounds double, double* %2, i64 %idxprom
  %5 = load double, double* %arrayidx, align 8
  %6 = load double*, double** %A.addr, align 8
  %7 = load i32, i32* %i, align 4
  %add6 = add nsw i32 %7, 1
  %mul7 = mul nsw i32 %add6, 1024
  %8 = load i32, i32* %j, align 4
  %add8 = add nsw i32 %mul7, %8
  %idxprom9 = sext i32 %add8 to i64
  %arrayidx10 = getelementptr inbounds double, double* %6, i64 %idxprom9
  %9 = load double, double* %arrayidx10, align 8
  %add11 = fadd double %5, %9
  %10 = load double*, double** %A.addr, align 8
  %11 = load i32, i32* %i, align 4
  %add12 = add nsw i32 %11, 1
  %mul13 = mul nsw i32 %add12, 1024
  %12 = load i32, i32* %j, align 4
  %add14 = add nsw i32 %mul13, %12
  %add15 = add nsw i32 %add14, 2
  %idxprom16 = sext i32 %add15 to i64
  %arrayidx17 = getelementptr inbounds double, double* %10, i64 %idxprom16
  %13 = load double, double* %arrayidx17, align 8
  %add18 = fadd double %add11, %13
  %14 = load double*, double** %A.addr, align 8
  %15 = load i32, i32* %i, align 4
  %add19 = add nsw i32 %15, 2
  %mul20 = mul nsw i32 %add19, 1024
  %16 = load i32, i32* %j, align 4
  %add21 = add nsw i32 %mul20, %16
  %add22 = add nsw i32 %add21, 1
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds double, double* %14, i64 %idxprom23
  %17 = load double, double* %arrayidx24, align 8
  %add25 = fadd double %add18, %17
  %18 = load double*, double** %A.addr, align 8
  %19 = load i32, i32* %i, align 4
  %mul26 = mul nsw i32 %19, 1024
  %20 = load i32, i32* %j, align 4
  %add27 = add nsw i32 %mul26, %20
  %add28 = add nsw i32 %add27, 1
  %idxprom29 = sext i32 %add28 to i64
  %arrayidx30 = getelementptr inbounds double, double* %18, i64 %idxprom29
  %21 = load double, double* %arrayidx30, align 8
  %add31 = fadd double %add25, %21
  %mul32 = fmul double 2.000000e-01, %add31
  %22 = load double*, double** %B.addr, align 8
  %23 = load i32, i32* %i, align 4
  %add33 = add nsw i32 %23, 1
  %mul34 = mul nsw i32 %add33, 1024
  %24 = load i32, i32* %j, align 4
  %add35 = add nsw i32 %mul34, %24
  %add36 = add nsw i32 %add35, 1
  %idxprom37 = sext i32 %add36 to i64
  %arrayidx38 = getelementptr inbounds double, double* %22, i64 %idxprom37
  store double %mul32, double* %arrayidx38, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %25 = load i32, i32* %j, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc39

for.inc39:                                        ; preds = %for.end
  %26 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %26, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond

for.end41:                                        ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond42

for.cond42:                                       ; preds = %for.inc90, %for.end41
  %27 = load i32, i32* %i, align 4
  %cmp43 = icmp slt i32 %27, 1022
  br i1 %cmp43, label %for.body44, label %for.end92

for.body44:                                       ; preds = %for.cond42
  store i32 0, i32* %j, align 4
  br label %for.cond45

for.cond45:                                       ; preds = %for.inc87, %for.body44
  %28 = load i32, i32* %j, align 4
  %cmp46 = icmp slt i32 %28, 1022
  br i1 %cmp46, label %for.body47, label %for.end89

for.body47:                                       ; preds = %for.cond45
  %29 = load double*, double** %B.addr, align 8
  %30 = load i32, i32* %i, align 4
  %add48 = add nsw i32 %30, 1
  %mul49 = mul nsw i32 %add48, 1024
  %31 = load i32, i32* %j, align 4
  %add50 = add nsw i32 %mul49, %31
  %add51 = add nsw i32 %add50, 1
  %idxprom52 = sext i32 %add51 to i64
  %arrayidx53 = getelementptr inbounds double, double* %29, i64 %idxprom52
  %32 = load double, double* %arrayidx53, align 8
  %33 = load double*, double** %B.addr, align 8
  %34 = load i32, i32* %i, align 4
  %add54 = add nsw i32 %34, 1
  %mul55 = mul nsw i32 %add54, 1024
  %35 = load i32, i32* %j, align 4
  %add56 = add nsw i32 %mul55, %35
  %idxprom57 = sext i32 %add56 to i64
  %arrayidx58 = getelementptr inbounds double, double* %33, i64 %idxprom57
  %36 = load double, double* %arrayidx58, align 8
  %add59 = fadd double %32, %36
  %37 = load double*, double** %B.addr, align 8
  %38 = load i32, i32* %i, align 4
  %add60 = add nsw i32 %38, 1
  %mul61 = mul nsw i32 %add60, 1024
  %39 = load i32, i32* %j, align 4
  %add62 = add nsw i32 %mul61, %39
  %add63 = add nsw i32 %add62, 2
  %idxprom64 = sext i32 %add63 to i64
  %arrayidx65 = getelementptr inbounds double, double* %37, i64 %idxprom64
  %40 = load double, double* %arrayidx65, align 8
  %add66 = fadd double %add59, %40
  %41 = load double*, double** %B.addr, align 8
  %42 = load i32, i32* %i, align 4
  %add67 = add nsw i32 %42, 2
  %mul68 = mul nsw i32 %add67, 1024
  %43 = load i32, i32* %j, align 4
  %add69 = add nsw i32 %mul68, %43
  %add70 = add nsw i32 %add69, 1
  %idxprom71 = sext i32 %add70 to i64
  %arrayidx72 = getelementptr inbounds double, double* %41, i64 %idxprom71
  %44 = load double, double* %arrayidx72, align 8
  %add73 = fadd double %add66, %44
  %45 = load double*, double** %B.addr, align 8
  %46 = load i32, i32* %i, align 4
  %mul74 = mul nsw i32 %46, 1024
  %47 = load i32, i32* %j, align 4
  %add75 = add nsw i32 %mul74, %47
  %add76 = add nsw i32 %add75, 1
  %idxprom77 = sext i32 %add76 to i64
  %arrayidx78 = getelementptr inbounds double, double* %45, i64 %idxprom77
  %48 = load double, double* %arrayidx78, align 8
  %add79 = fadd double %add73, %48
  %mul80 = fmul double 2.000000e-01, %add79
  %49 = load double*, double** %A.addr, align 8
  %50 = load i32, i32* %i, align 4
  %add81 = add nsw i32 %50, 1
  %mul82 = mul nsw i32 %add81, 1024
  %51 = load i32, i32* %j, align 4
  %add83 = add nsw i32 %mul82, %51
  %add84 = add nsw i32 %add83, 1
  %idxprom85 = sext i32 %add84 to i64
  %arrayidx86 = getelementptr inbounds double, double* %49, i64 %idxprom85
  store double %mul80, double* %arrayidx86, align 8
  br label %for.inc87

for.inc87:                                        ; preds = %for.body47
  %52 = load i32, i32* %j, align 4
  %inc88 = add nsw i32 %52, 1
  store i32 %inc88, i32* %j, align 4
  br label %for.cond45

for.end89:                                        ; preds = %for.cond45
  br label %for.inc90

for.inc90:                                        ; preds = %for.end89
  %53 = load i32, i32* %i, align 4
  %inc91 = add nsw i32 %53, 1
  store i32 %inc91, i32* %i, align 4
  br label %for.cond42

for.end92:                                        ; preds = %for.cond42
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0 (tags/RELEASE_600/final)"}
