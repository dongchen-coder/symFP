; ModuleID = './ss_bc/jacobi_2d.bc'
source_filename = "./ss_src/jacobi_2d.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define void @jacobi_2d(double* %A, double* %B) #0 {
entry:
  %A.addr = alloca double*, align 8
  %B.addr = alloca double*, align 8
  %t = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %A, double** %A.addr, align 8
  store double* %B, double** %B.addr, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc32, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 1023
  br i1 %cmp, label %for.body, label %for.end34

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 1023
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load double*, double** %A.addr, align 8
  %3 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %3, 1024
  %4 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %4
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds double, double* %2, i64 %idxprom
  %5 = load double, double* %arrayidx, align 8
  %6 = load double*, double** %A.addr, align 8
  %7 = load i32, i32* %i, align 4
  %mul4 = mul nsw i32 %7, 1024
  %8 = load i32, i32* %j, align 4
  %add5 = add nsw i32 %mul4, %8
  %sub = sub nsw i32 %add5, 1
  %idxprom6 = sext i32 %sub to i64
  %arrayidx7 = getelementptr inbounds double, double* %6, i64 %idxprom6
  %9 = load double, double* %arrayidx7, align 8
  %add8 = fadd double %5, %9
  %10 = load double*, double** %A.addr, align 8
  %11 = load i32, i32* %i, align 4
  %mul9 = mul nsw i32 %11, 1024
  %add10 = add nsw i32 %mul9, 1
  %12 = load i32, i32* %j, align 4
  %add11 = add nsw i32 %add10, %12
  %idxprom12 = sext i32 %add11 to i64
  %arrayidx13 = getelementptr inbounds double, double* %10, i64 %idxprom12
  %13 = load double, double* %arrayidx13, align 8
  %add14 = fadd double %add8, %13
  %14 = load double*, double** %A.addr, align 8
  %15 = load i32, i32* %i, align 4
  %add15 = add nsw i32 1, %15
  %mul16 = mul nsw i32 %add15, 1024
  %16 = load i32, i32* %j, align 4
  %add17 = add nsw i32 %mul16, %16
  %idxprom18 = sext i32 %add17 to i64
  %arrayidx19 = getelementptr inbounds double, double* %14, i64 %idxprom18
  %17 = load double, double* %arrayidx19, align 8
  %add20 = fadd double %add14, %17
  %18 = load double*, double** %A.addr, align 8
  %19 = load i32, i32* %i, align 4
  %sub21 = sub nsw i32 %19, 1
  %mul22 = mul nsw i32 %sub21, 1024
  %20 = load i32, i32* %j, align 4
  %add23 = add nsw i32 %mul22, %20
  %idxprom24 = sext i32 %add23 to i64
  %arrayidx25 = getelementptr inbounds double, double* %18, i64 %idxprom24
  %21 = load double, double* %arrayidx25, align 8
  %add26 = fadd double %add20, %21
  %mul27 = fmul double 2.000000e-01, %add26
  %22 = load double*, double** %B.addr, align 8
  %23 = load i32, i32* %i, align 4
  %mul28 = mul nsw i32 %23, 1024
  %24 = load i32, i32* %j, align 4
  %add29 = add nsw i32 %mul28, %24
  %idxprom30 = sext i32 %add29 to i64
  %arrayidx31 = getelementptr inbounds double, double* %22, i64 %idxprom30
  store double %mul27, double* %arrayidx31, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %25 = load i32, i32* %j, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc32

for.inc32:                                        ; preds = %for.end
  %26 = load i32, i32* %i, align 4
  %inc33 = add nsw i32 %26, 1
  store i32 %inc33, i32* %i, align 4
  br label %for.cond

for.end34:                                        ; preds = %for.cond
  store i32 1, i32* %i, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc77, %for.end34
  %27 = load i32, i32* %i, align 4
  %cmp36 = icmp slt i32 %27, 1023
  br i1 %cmp36, label %for.body37, label %for.end79

for.body37:                                       ; preds = %for.cond35
  store i32 1, i32* %j, align 4
  br label %for.cond38

for.cond38:                                       ; preds = %for.inc74, %for.body37
  %28 = load i32, i32* %j, align 4
  %cmp39 = icmp slt i32 %28, 1023
  br i1 %cmp39, label %for.body40, label %for.end76

for.body40:                                       ; preds = %for.cond38
  %29 = load double*, double** %B.addr, align 8
  %30 = load i32, i32* %i, align 4
  %mul41 = mul nsw i32 %30, 1024
  %31 = load i32, i32* %j, align 4
  %add42 = add nsw i32 %mul41, %31
  %idxprom43 = sext i32 %add42 to i64
  %arrayidx44 = getelementptr inbounds double, double* %29, i64 %idxprom43
  %32 = load double, double* %arrayidx44, align 8
  %33 = load double*, double** %B.addr, align 8
  %34 = load i32, i32* %i, align 4
  %mul45 = mul nsw i32 %34, 1024
  %35 = load i32, i32* %j, align 4
  %add46 = add nsw i32 %mul45, %35
  %sub47 = sub nsw i32 %add46, 1
  %idxprom48 = sext i32 %sub47 to i64
  %arrayidx49 = getelementptr inbounds double, double* %33, i64 %idxprom48
  %36 = load double, double* %arrayidx49, align 8
  %add50 = fadd double %32, %36
  %37 = load double*, double** %B.addr, align 8
  %38 = load i32, i32* %i, align 4
  %mul51 = mul nsw i32 %38, 1024
  %add52 = add nsw i32 %mul51, 1
  %39 = load i32, i32* %j, align 4
  %add53 = add nsw i32 %add52, %39
  %idxprom54 = sext i32 %add53 to i64
  %arrayidx55 = getelementptr inbounds double, double* %37, i64 %idxprom54
  %40 = load double, double* %arrayidx55, align 8
  %add56 = fadd double %add50, %40
  %41 = load double*, double** %B.addr, align 8
  %42 = load i32, i32* %i, align 4
  %add57 = add nsw i32 1, %42
  %mul58 = mul nsw i32 %add57, 1024
  %43 = load i32, i32* %j, align 4
  %add59 = add nsw i32 %mul58, %43
  %idxprom60 = sext i32 %add59 to i64
  %arrayidx61 = getelementptr inbounds double, double* %41, i64 %idxprom60
  %44 = load double, double* %arrayidx61, align 8
  %add62 = fadd double %add56, %44
  %45 = load double*, double** %B.addr, align 8
  %46 = load i32, i32* %i, align 4
  %sub63 = sub nsw i32 %46, 1
  %mul64 = mul nsw i32 %sub63, 1024
  %47 = load i32, i32* %j, align 4
  %add65 = add nsw i32 %mul64, %47
  %idxprom66 = sext i32 %add65 to i64
  %arrayidx67 = getelementptr inbounds double, double* %45, i64 %idxprom66
  %48 = load double, double* %arrayidx67, align 8
  %add68 = fadd double %add62, %48
  %mul69 = fmul double 2.000000e-01, %add68
  %49 = load double*, double** %A.addr, align 8
  %50 = load i32, i32* %i, align 4
  %mul70 = mul nsw i32 %50, 1024
  %51 = load i32, i32* %j, align 4
  %add71 = add nsw i32 %mul70, %51
  %idxprom72 = sext i32 %add71 to i64
  %arrayidx73 = getelementptr inbounds double, double* %49, i64 %idxprom72
  store double %mul69, double* %arrayidx73, align 8
  br label %for.inc74

for.inc74:                                        ; preds = %for.body40
  %52 = load i32, i32* %j, align 4
  %inc75 = add nsw i32 %52, 1
  store i32 %inc75, i32* %j, align 4
  br label %for.cond38

for.end76:                                        ; preds = %for.cond38
  br label %for.inc77

for.inc77:                                        ; preds = %for.end76
  %53 = load i32, i32* %i, align 4
  %inc78 = add nsw i32 %53, 1
  store i32 %inc78, i32* %i, align 4
  br label %for.cond35

for.end79:                                        ; preds = %for.cond35
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0 (tags/RELEASE_600/final)"}
