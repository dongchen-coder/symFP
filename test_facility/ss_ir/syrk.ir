; ModuleID = './ss_bc/syrk.bc'
source_filename = "./ss_src/syrk.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @syrk(double %alpha, double %beta, double* %A, double* %C) #0 {
entry:
  %alpha.addr = alloca double, align 8
  %beta.addr = alloca double, align 8
  %A.addr = alloca double*, align 8
  %C.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double %alpha, double* %alpha.addr, align 8
  store double %beta, double* %beta.addr, align 8
  store double* %A, double** %A.addr, align 8
  store double* %C, double** %C.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc5, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 1024
  br i1 %cmp, label %for.body, label %for.end7

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 1024
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load double, double* %beta.addr, align 8
  %3 = load double*, double** %C.addr, align 8
  %4 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %4, 1024
  %5 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %5
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds double, double* %3, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %mul4 = fmul double %6, %2
  store double %mul4, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %7 = load i32, i32* %j, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc5

for.inc5:                                         ; preds = %for.end
  %8 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %8, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond

for.end7:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc38, %for.end7
  %9 = load i32, i32* %i, align 4
  %cmp9 = icmp slt i32 %9, 1024
  br i1 %cmp9, label %for.body10, label %for.end40

for.body10:                                       ; preds = %for.cond8
  store i32 0, i32* %j, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc35, %for.body10
  %10 = load i32, i32* %j, align 4
  %cmp12 = icmp slt i32 %10, 1024
  br i1 %cmp12, label %for.body13, label %for.end37

for.body13:                                       ; preds = %for.cond11
  store i32 0, i32* %k, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc32, %for.body13
  %11 = load i32, i32* %k, align 4
  %cmp15 = icmp slt i32 %11, 1024
  br i1 %cmp15, label %for.body16, label %for.end34

for.body16:                                       ; preds = %for.cond14
  %12 = load double, double* %alpha.addr, align 8
  %13 = load double*, double** %A.addr, align 8
  %14 = load i32, i32* %i, align 4
  %mul17 = mul nsw i32 %14, 1024
  %15 = load i32, i32* %k, align 4
  %add18 = add nsw i32 %mul17, %15
  %idxprom19 = sext i32 %add18 to i64
  %arrayidx20 = getelementptr inbounds double, double* %13, i64 %idxprom19
  %16 = load double, double* %arrayidx20, align 8
  %mul21 = fmul double %12, %16
  %17 = load double*, double** %A.addr, align 8
  %18 = load i32, i32* %j, align 4
  %mul22 = mul nsw i32 %18, 1024
  %19 = load i32, i32* %k, align 4
  %add23 = add nsw i32 %mul22, %19
  %idxprom24 = sext i32 %add23 to i64
  %arrayidx25 = getelementptr inbounds double, double* %17, i64 %idxprom24
  %20 = load double, double* %arrayidx25, align 8
  %mul26 = fmul double %mul21, %20
  %21 = load double*, double** %C.addr, align 8
  %22 = load i32, i32* %i, align 4
  %mul27 = mul nsw i32 %22, 1024
  %23 = load i32, i32* %j, align 4
  %add28 = add nsw i32 %mul27, %23
  %idxprom29 = sext i32 %add28 to i64
  %arrayidx30 = getelementptr inbounds double, double* %21, i64 %idxprom29
  %24 = load double, double* %arrayidx30, align 8
  %add31 = fadd double %24, %mul26
  store double %add31, double* %arrayidx30, align 8
  br label %for.inc32

for.inc32:                                        ; preds = %for.body16
  %25 = load i32, i32* %k, align 4
  %inc33 = add nsw i32 %25, 1
  store i32 %inc33, i32* %k, align 4
  br label %for.cond14

for.end34:                                        ; preds = %for.cond14
  br label %for.inc35

for.inc35:                                        ; preds = %for.end34
  %26 = load i32, i32* %j, align 4
  %inc36 = add nsw i32 %26, 1
  store i32 %inc36, i32* %j, align 4
  br label %for.cond11

for.end37:                                        ; preds = %for.cond11
  br label %for.inc38

for.inc38:                                        ; preds = %for.end37
  %27 = load i32, i32* %i, align 4
  %inc39 = add nsw i32 %27, 1
  store i32 %inc39, i32* %i, align 4
  br label %for.cond8

for.end40:                                        ; preds = %for.cond8
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.1.0 (https://github.com/llvm/llvm-project.git 0e442b077b9c6fe75076dc7e1cae5de1a693bc9b)"}
