; ModuleID = '/Users/dchen/tools/symFP/test_facility/ss_bc/floyd_warshall.bc'
source_filename = "/Users/dchen/tools/symFP/test_facility/ss_src/floyd_warshall.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.14.0"

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @floyd_warshall(double* %path) #0 {
entry:
  %path.addr = alloca double*, align 8
  %k = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %path, double** %path.addr, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc37, %entry
  %0 = load i32, i32* %k, align 4
  %cmp = icmp slt i32 %0, 1024
  br i1 %cmp, label %for.body, label %for.end39

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc34, %for.body
  %1 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %1, 1024
  br i1 %cmp2, label %for.body3, label %for.end36

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %2 = load i32, i32* %j, align 4
  %cmp5 = icmp slt i32 %2, 1024
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %3 = load double*, double** %path.addr, align 8
  %4 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %4, 1024
  %5 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %5
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds double, double* %3, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %7 = load double*, double** %path.addr, align 8
  %8 = load i32, i32* %i, align 4
  %mul7 = mul nsw i32 %8, 1024
  %9 = load i32, i32* %k, align 4
  %add8 = add nsw i32 %mul7, %9
  %idxprom9 = sext i32 %add8 to i64
  %arrayidx10 = getelementptr inbounds double, double* %7, i64 %idxprom9
  %10 = load double, double* %arrayidx10, align 8
  %11 = load double*, double** %path.addr, align 8
  %12 = load i32, i32* %k, align 4
  %mul11 = mul nsw i32 %12, 1024
  %13 = load i32, i32* %j, align 4
  %add12 = add nsw i32 %mul11, %13
  %idxprom13 = sext i32 %add12 to i64
  %arrayidx14 = getelementptr inbounds double, double* %11, i64 %idxprom13
  %14 = load double, double* %arrayidx14, align 8
  %add15 = fadd double %10, %14
  %cmp16 = fcmp olt double %6, %add15
  br i1 %cmp16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body6
  %15 = load double*, double** %path.addr, align 8
  %16 = load i32, i32* %i, align 4
  %mul17 = mul nsw i32 %16, 1024
  %17 = load i32, i32* %j, align 4
  %add18 = add nsw i32 %mul17, %17
  %idxprom19 = sext i32 %add18 to i64
  %arrayidx20 = getelementptr inbounds double, double* %15, i64 %idxprom19
  %18 = load double, double* %arrayidx20, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.body6
  %19 = load double*, double** %path.addr, align 8
  %20 = load i32, i32* %i, align 4
  %mul21 = mul nsw i32 %20, 1024
  %21 = load i32, i32* %k, align 4
  %add22 = add nsw i32 %mul21, %21
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds double, double* %19, i64 %idxprom23
  %22 = load double, double* %arrayidx24, align 8
  %23 = load double*, double** %path.addr, align 8
  %24 = load i32, i32* %k, align 4
  %mul25 = mul nsw i32 %24, 1024
  %25 = load i32, i32* %j, align 4
  %add26 = add nsw i32 %mul25, %25
  %idxprom27 = sext i32 %add26 to i64
  %arrayidx28 = getelementptr inbounds double, double* %23, i64 %idxprom27
  %26 = load double, double* %arrayidx28, align 8
  %add29 = fadd double %22, %26
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %18, %cond.true ], [ %add29, %cond.false ]
  %27 = load double*, double** %path.addr, align 8
  %28 = load i32, i32* %i, align 4
  %mul30 = mul nsw i32 %28, 1024
  %29 = load i32, i32* %j, align 4
  %add31 = add nsw i32 %mul30, %29
  %idxprom32 = sext i32 %add31 to i64
  %arrayidx33 = getelementptr inbounds double, double* %27, i64 %idxprom32
  store double %cond, double* %arrayidx33, align 8
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %30 = load i32, i32* %j, align 4
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc34

for.inc34:                                        ; preds = %for.end
  %31 = load i32, i32* %i, align 4
  %inc35 = add nsw i32 %31, 1
  store i32 %inc35, i32* %i, align 4
  br label %for.cond1

for.end36:                                        ; preds = %for.cond1
  br label %for.inc37

for.inc37:                                        ; preds = %for.end36
  %32 = load i32, i32* %k, align 4
  %inc38 = add nsw i32 %32, 1
  store i32 %inc38, i32* %k, align 4
  br label %for.cond

for.end39:                                        ; preds = %for.cond
  ret void
}

attributes #0 = { noinline nounwind optnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 8.0.0 (tags/RELEASE_800/final)"}
