; ModuleID = '/Users/dongchen/tools/llvm-4.0.0.src/lib/Transforms/SymFP/test_facility/bc/durbin.bc'
source_filename = "/Users/dongchen/tools/llvm-4.0.0.src/lib/Transforms/SymFP/test_facility/src/durbin.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

; Function Attrs: noinline nounwind ssp uwtable
define void @durbin(double* %y, double* %r, double* %z) #0 {
entry:
  %y.addr = alloca double*, align 8
  %r.addr = alloca double*, align 8
  %z.addr = alloca double*, align 8
  %k = alloca i32, align 4
  %i = alloca i32, align 4
  %alpha = alloca double, align 8
  %beta = alloca double, align 8
  %sum = alloca double, align 8
  store double* %y, double** %y.addr, align 8
  store double* %r, double** %r.addr, align 8
  store double* %z, double** %z.addr, align 8
  store i32 1, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc42, %entry
  %0 = load i32, i32* %k, align 4
  %cmp = icmp slt i32 %0, 1024
  br i1 %cmp, label %for.body, label %for.end44

for.body:                                         ; preds = %for.cond
  %1 = load double, double* %alpha, align 8
  %2 = load double, double* %alpha, align 8
  %mul = fmul double %1, %2
  %sub = fsub double 1.000000e+00, %mul
  %3 = load double, double* %beta, align 8
  %mul1 = fmul double %sub, %3
  store double %mul1, double* %beta, align 8
  store double 0.000000e+00, double* %sum, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %k, align 4
  %cmp3 = icmp slt i32 %4, %5
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %6 = load double*, double** %r.addr, align 8
  %7 = load i32, i32* %k, align 4
  %8 = load i32, i32* %i, align 4
  %sub5 = sub nsw i32 %7, %8
  %sub6 = sub nsw i32 %sub5, 1
  %idxprom = sext i32 %sub6 to i64
  %arrayidx = getelementptr inbounds double, double* %6, i64 %idxprom
  %9 = load double, double* %arrayidx, align 8
  %10 = load double*, double** %y.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %11 to i64
  %arrayidx8 = getelementptr inbounds double, double* %10, i64 %idxprom7
  %12 = load double, double* %arrayidx8, align 8
  %mul9 = fmul double %9, %12
  %13 = load double, double* %sum, align 8
  %add = fadd double %13, %mul9
  store double %add, double* %sum, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body4
  %14 = load i32, i32* %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  %15 = load double*, double** %r.addr, align 8
  %16 = load i32, i32* %k, align 4
  %idxprom10 = sext i32 %16 to i64
  %arrayidx11 = getelementptr inbounds double, double* %15, i64 %idxprom10
  %17 = load double, double* %arrayidx11, align 8
  %18 = load double, double* %sum, align 8
  %add12 = fadd double %17, %18
  %sub13 = fsub double -0.000000e+00, %add12
  %19 = load double, double* %beta, align 8
  %div = fdiv double %sub13, %19
  store double %div, double* %alpha, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc27, %for.end
  %20 = load i32, i32* %i, align 4
  %21 = load i32, i32* %k, align 4
  %cmp15 = icmp slt i32 %20, %21
  br i1 %cmp15, label %for.body16, label %for.end29

for.body16:                                       ; preds = %for.cond14
  %22 = load double*, double** %y.addr, align 8
  %23 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %23 to i64
  %arrayidx18 = getelementptr inbounds double, double* %22, i64 %idxprom17
  %24 = load double, double* %arrayidx18, align 8
  %25 = load double, double* %alpha, align 8
  %26 = load double*, double** %y.addr, align 8
  %27 = load i32, i32* %k, align 4
  %28 = load i32, i32* %i, align 4
  %sub19 = sub nsw i32 %27, %28
  %sub20 = sub nsw i32 %sub19, 1
  %idxprom21 = sext i32 %sub20 to i64
  %arrayidx22 = getelementptr inbounds double, double* %26, i64 %idxprom21
  %29 = load double, double* %arrayidx22, align 8
  %mul23 = fmul double %25, %29
  %add24 = fadd double %24, %mul23
  %30 = load double*, double** %z.addr, align 8
  %31 = load i32, i32* %i, align 4
  %idxprom25 = sext i32 %31 to i64
  %arrayidx26 = getelementptr inbounds double, double* %30, i64 %idxprom25
  store double %add24, double* %arrayidx26, align 8
  br label %for.inc27

for.inc27:                                        ; preds = %for.body16
  %32 = load i32, i32* %i, align 4
  %inc28 = add nsw i32 %32, 1
  store i32 %inc28, i32* %i, align 4
  br label %for.cond14

for.end29:                                        ; preds = %for.cond14
  store i32 0, i32* %i, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc37, %for.end29
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %k, align 4
  %cmp31 = icmp slt i32 %33, %34
  br i1 %cmp31, label %for.body32, label %for.end39

for.body32:                                       ; preds = %for.cond30
  %35 = load double*, double** %z.addr, align 8
  %36 = load i32, i32* %i, align 4
  %idxprom33 = sext i32 %36 to i64
  %arrayidx34 = getelementptr inbounds double, double* %35, i64 %idxprom33
  %37 = load double, double* %arrayidx34, align 8
  %38 = load double*, double** %y.addr, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom35 = sext i32 %39 to i64
  %arrayidx36 = getelementptr inbounds double, double* %38, i64 %idxprom35
  store double %37, double* %arrayidx36, align 8
  br label %for.inc37

for.inc37:                                        ; preds = %for.body32
  %40 = load i32, i32* %i, align 4
  %inc38 = add nsw i32 %40, 1
  store i32 %inc38, i32* %i, align 4
  br label %for.cond30

for.end39:                                        ; preds = %for.cond30
  %41 = load double, double* %alpha, align 8
  %42 = load double*, double** %y.addr, align 8
  %43 = load i32, i32* %k, align 4
  %idxprom40 = sext i32 %43 to i64
  %arrayidx41 = getelementptr inbounds double, double* %42, i64 %idxprom40
  store double %41, double* %arrayidx41, align 8
  br label %for.inc42

for.inc42:                                        ; preds = %for.end39
  %44 = load i32, i32* %k, align 4
  %inc43 = add nsw i32 %44, 1
  store i32 %inc43, i32* %k, align 4
  br label %for.cond

for.end44:                                        ; preds = %for.cond
  ret void
}

attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 4.0.0 (tags/RELEASE_400/final)"}
