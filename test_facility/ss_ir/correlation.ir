; ModuleID = '/Users/dchen/tools/symFP/test_facility/ss_bc/correlation.bc'
source_filename = "/Users/dchen/tools/symFP/test_facility/ss_src/correlation.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.14.0"

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @correlation(i32 %m, i32 %n, double* %data, double* %mean, double* %stddev, double* %symmat) #0 {
entry:
  %m.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %data.addr = alloca double*, align 8
  %mean.addr = alloca double*, align 8
  %stddev.addr = alloca double*, align 8
  %symmat.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %j1 = alloca i32, align 4
  %j2 = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store double* %data, double** %data.addr, align 8
  store double* %mean, double** %mean.addr, align 8
  store double* %stddev, double** %stddev.addr, align 8
  store double* %symmat, double** %symmat.addr, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc11, %entry
  %0 = load i32, i32* %j, align 4
  %cmp = icmp slt i32 %0, 1024
  br i1 %cmp, label %for.body, label %for.end13

for.body:                                         ; preds = %for.cond
  %1 = load double*, double** %mean.addr, align 8
  %2 = load i32, i32* %j, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds double, double* %1, i64 %idxprom
  store double 0.000000e+00, double* %arrayidx, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %3, 1024
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %data.addr, align 8
  %5 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %5, 1024
  %6 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %6
  %idxprom4 = sext i32 %add to i64
  %arrayidx5 = getelementptr inbounds double, double* %4, i64 %idxprom4
  %7 = load double, double* %arrayidx5, align 8
  %8 = load double*, double** %mean.addr, align 8
  %9 = load i32, i32* %j, align 4
  %idxprom6 = sext i32 %9 to i64
  %arrayidx7 = getelementptr inbounds double, double* %8, i64 %idxprom6
  %10 = load double, double* %arrayidx7, align 8
  %add8 = fadd double %10, %7
  store double %add8, double* %arrayidx7, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %12 = load double*, double** %mean.addr, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom9 = sext i32 %13 to i64
  %arrayidx10 = getelementptr inbounds double, double* %12, i64 %idxprom9
  %14 = load double, double* %arrayidx10, align 8
  %div = fdiv double %14, 0x414885C20147AE14
  store double %div, double* %arrayidx10, align 8
  br label %for.inc11

for.inc11:                                        ; preds = %for.end
  %15 = load i32, i32* %j, align 4
  %inc12 = add nsw i32 %15, 1
  store i32 %inc12, i32* %j, align 4
  br label %for.cond

for.end13:                                        ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc55, %for.end13
  %16 = load i32, i32* %j, align 4
  %cmp15 = icmp slt i32 %16, 1024
  br i1 %cmp15, label %for.body16, label %for.end57

for.body16:                                       ; preds = %for.cond14
  %17 = load double*, double** %stddev.addr, align 8
  %18 = load i32, i32* %j, align 4
  %idxprom17 = sext i32 %18 to i64
  %arrayidx18 = getelementptr inbounds double, double* %17, i64 %idxprom17
  store double 0.000000e+00, double* %arrayidx18, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc39, %for.body16
  %19 = load i32, i32* %i, align 4
  %cmp20 = icmp slt i32 %19, 1024
  br i1 %cmp20, label %for.body21, label %for.end41

for.body21:                                       ; preds = %for.cond19
  %20 = load double*, double** %data.addr, align 8
  %21 = load i32, i32* %i, align 4
  %mul22 = mul nsw i32 %21, 1024
  %22 = load i32, i32* %j, align 4
  %add23 = add nsw i32 %mul22, %22
  %idxprom24 = sext i32 %add23 to i64
  %arrayidx25 = getelementptr inbounds double, double* %20, i64 %idxprom24
  %23 = load double, double* %arrayidx25, align 8
  %24 = load double*, double** %mean.addr, align 8
  %25 = load i32, i32* %j, align 4
  %idxprom26 = sext i32 %25 to i64
  %arrayidx27 = getelementptr inbounds double, double* %24, i64 %idxprom26
  %26 = load double, double* %arrayidx27, align 8
  %sub = fsub double %23, %26
  %27 = load double*, double** %data.addr, align 8
  %28 = load i32, i32* %i, align 4
  %mul28 = mul nsw i32 %28, 1024
  %29 = load i32, i32* %j, align 4
  %add29 = add nsw i32 %mul28, %29
  %idxprom30 = sext i32 %add29 to i64
  %arrayidx31 = getelementptr inbounds double, double* %27, i64 %idxprom30
  %30 = load double, double* %arrayidx31, align 8
  %31 = load double*, double** %mean.addr, align 8
  %32 = load i32, i32* %j, align 4
  %idxprom32 = sext i32 %32 to i64
  %arrayidx33 = getelementptr inbounds double, double* %31, i64 %idxprom32
  %33 = load double, double* %arrayidx33, align 8
  %sub34 = fsub double %30, %33
  %mul35 = fmul double %sub, %sub34
  %34 = load double*, double** %stddev.addr, align 8
  %35 = load i32, i32* %j, align 4
  %idxprom36 = sext i32 %35 to i64
  %arrayidx37 = getelementptr inbounds double, double* %34, i64 %idxprom36
  %36 = load double, double* %arrayidx37, align 8
  %add38 = fadd double %36, %mul35
  store double %add38, double* %arrayidx37, align 8
  br label %for.inc39

for.inc39:                                        ; preds = %for.body21
  %37 = load i32, i32* %i, align 4
  %inc40 = add nsw i32 %37, 1
  store i32 %inc40, i32* %i, align 4
  br label %for.cond19

for.end41:                                        ; preds = %for.cond19
  %38 = load double*, double** %stddev.addr, align 8
  %39 = load i32, i32* %j, align 4
  %idxprom42 = sext i32 %39 to i64
  %arrayidx43 = getelementptr inbounds double, double* %38, i64 %idxprom42
  %40 = load double, double* %arrayidx43, align 8
  %div44 = fdiv double %40, 0x414885C20147AE14
  store double %div44, double* %arrayidx43, align 8
  %41 = load double*, double** %stddev.addr, align 8
  %42 = load i32, i32* %j, align 4
  %call = call i32 (double*, i32, ...) bitcast (i32 (...)* @sqrt_of_array_cell to i32 (double*, i32, ...)*)(double* %41, i32 %42)
  %conv = sitofp i32 %call to double
  %43 = load double*, double** %stddev.addr, align 8
  %44 = load i32, i32* %j, align 4
  %idxprom45 = sext i32 %44 to i64
  %arrayidx46 = getelementptr inbounds double, double* %43, i64 %idxprom45
  store double %conv, double* %arrayidx46, align 8
  %45 = load double*, double** %stddev.addr, align 8
  %46 = load i32, i32* %j, align 4
  %idxprom47 = sext i32 %46 to i64
  %arrayidx48 = getelementptr inbounds double, double* %45, i64 %idxprom47
  %47 = load double, double* %arrayidx48, align 8
  %cmp49 = fcmp ole double %47, 5.000000e-03
  br i1 %cmp49, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.end41
  br label %cond.end

cond.false:                                       ; preds = %for.end41
  %48 = load double*, double** %stddev.addr, align 8
  %49 = load i32, i32* %j, align 4
  %idxprom51 = sext i32 %49 to i64
  %arrayidx52 = getelementptr inbounds double, double* %48, i64 %idxprom51
  %50 = load double, double* %arrayidx52, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ 1.000000e+00, %cond.true ], [ %50, %cond.false ]
  %51 = load double*, double** %stddev.addr, align 8
  %52 = load i32, i32* %j, align 4
  %idxprom53 = sext i32 %52 to i64
  %arrayidx54 = getelementptr inbounds double, double* %51, i64 %idxprom53
  store double %cond, double* %arrayidx54, align 8
  br label %for.inc55

for.inc55:                                        ; preds = %cond.end
  %53 = load i32, i32* %j, align 4
  %inc56 = add nsw i32 %53, 1
  store i32 %inc56, i32* %j, align 4
  br label %for.cond14

for.end57:                                        ; preds = %for.cond14
  store i32 0, i32* %i, align 4
  br label %for.cond58

for.cond58:                                       ; preds = %for.inc84, %for.end57
  %54 = load i32, i32* %i, align 4
  %cmp59 = icmp slt i32 %54, 1024
  br i1 %cmp59, label %for.body61, label %for.end86

for.body61:                                       ; preds = %for.cond58
  store i32 0, i32* %j, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc81, %for.body61
  %55 = load i32, i32* %j, align 4
  %cmp63 = icmp slt i32 %55, 1024
  br i1 %cmp63, label %for.body65, label %for.end83

for.body65:                                       ; preds = %for.cond62
  %56 = load double*, double** %mean.addr, align 8
  %57 = load i32, i32* %j, align 4
  %idxprom66 = sext i32 %57 to i64
  %arrayidx67 = getelementptr inbounds double, double* %56, i64 %idxprom66
  %58 = load double, double* %arrayidx67, align 8
  %59 = load double*, double** %data.addr, align 8
  %60 = load i32, i32* %i, align 4
  %mul68 = mul nsw i32 %60, 1024
  %61 = load i32, i32* %j, align 4
  %add69 = add nsw i32 %mul68, %61
  %idxprom70 = sext i32 %add69 to i64
  %arrayidx71 = getelementptr inbounds double, double* %59, i64 %idxprom70
  %62 = load double, double* %arrayidx71, align 8
  %sub72 = fsub double %62, %58
  store double %sub72, double* %arrayidx71, align 8
  %63 = call double @llvm.sqrt.f64(double 0x414885C20147AE14)
  %64 = load double*, double** %stddev.addr, align 8
  %65 = load i32, i32* %j, align 4
  %idxprom73 = sext i32 %65 to i64
  %arrayidx74 = getelementptr inbounds double, double* %64, i64 %idxprom73
  %66 = load double, double* %arrayidx74, align 8
  %mul75 = fmul double %63, %66
  %67 = load double*, double** %data.addr, align 8
  %68 = load i32, i32* %i, align 4
  %mul76 = mul nsw i32 %68, 1024
  %69 = load i32, i32* %j, align 4
  %add77 = add nsw i32 %mul76, %69
  %idxprom78 = sext i32 %add77 to i64
  %arrayidx79 = getelementptr inbounds double, double* %67, i64 %idxprom78
  %70 = load double, double* %arrayidx79, align 8
  %div80 = fdiv double %70, %mul75
  store double %div80, double* %arrayidx79, align 8
  br label %for.inc81

for.inc81:                                        ; preds = %for.body65
  %71 = load i32, i32* %j, align 4
  %inc82 = add nsw i32 %71, 1
  store i32 %inc82, i32* %j, align 4
  br label %for.cond62

for.end83:                                        ; preds = %for.cond62
  br label %for.inc84

for.inc84:                                        ; preds = %for.end83
  %72 = load i32, i32* %i, align 4
  %inc85 = add nsw i32 %72, 1
  store i32 %inc85, i32* %i, align 4
  br label %for.cond58

for.end86:                                        ; preds = %for.cond58
  store i32 0, i32* %j1, align 4
  br label %for.cond87

for.cond87:                                       ; preds = %for.inc136, %for.end86
  %73 = load i32, i32* %j1, align 4
  %cmp88 = icmp slt i32 %73, 1023
  br i1 %cmp88, label %for.body90, label %for.end138

for.body90:                                       ; preds = %for.cond87
  %74 = load double*, double** %symmat.addr, align 8
  %75 = load i32, i32* %j1, align 4
  %mul91 = mul nsw i32 %75, 1024
  %76 = load i32, i32* %j1, align 4
  %add92 = add nsw i32 %mul91, %76
  %idxprom93 = sext i32 %add92 to i64
  %arrayidx94 = getelementptr inbounds double, double* %74, i64 %idxprom93
  store double 1.000000e+00, double* %arrayidx94, align 8
  %77 = load i32, i32* %j1, align 4
  %add95 = add nsw i32 %77, 1
  store i32 %add95, i32* %j2, align 4
  br label %for.cond96

for.cond96:                                       ; preds = %for.inc133, %for.body90
  %78 = load i32, i32* %j2, align 4
  %cmp97 = icmp slt i32 %78, 1024
  br i1 %cmp97, label %for.body99, label %for.end135

for.body99:                                       ; preds = %for.cond96
  %79 = load double*, double** %symmat.addr, align 8
  %80 = load i32, i32* %j1, align 4
  %mul100 = mul nsw i32 %80, 1024
  %81 = load i32, i32* %j2, align 4
  %add101 = add nsw i32 %mul100, %81
  %idxprom102 = sext i32 %add101 to i64
  %arrayidx103 = getelementptr inbounds double, double* %79, i64 %idxprom102
  store double 0.000000e+00, double* %arrayidx103, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond104

for.cond104:                                      ; preds = %for.inc122, %for.body99
  %82 = load i32, i32* %i, align 4
  %cmp105 = icmp slt i32 %82, 1024
  br i1 %cmp105, label %for.body107, label %for.end124

for.body107:                                      ; preds = %for.cond104
  %83 = load double*, double** %data.addr, align 8
  %84 = load i32, i32* %i, align 4
  %mul108 = mul nsw i32 %84, 1024
  %85 = load i32, i32* %j1, align 4
  %add109 = add nsw i32 %mul108, %85
  %idxprom110 = sext i32 %add109 to i64
  %arrayidx111 = getelementptr inbounds double, double* %83, i64 %idxprom110
  %86 = load double, double* %arrayidx111, align 8
  %87 = load double*, double** %data.addr, align 8
  %88 = load i32, i32* %i, align 4
  %mul112 = mul nsw i32 %88, 1024
  %89 = load i32, i32* %j2, align 4
  %add113 = add nsw i32 %mul112, %89
  %idxprom114 = sext i32 %add113 to i64
  %arrayidx115 = getelementptr inbounds double, double* %87, i64 %idxprom114
  %90 = load double, double* %arrayidx115, align 8
  %mul116 = fmul double %86, %90
  %91 = load double*, double** %symmat.addr, align 8
  %92 = load i32, i32* %j1, align 4
  %mul117 = mul nsw i32 %92, 1024
  %93 = load i32, i32* %j2, align 4
  %add118 = add nsw i32 %mul117, %93
  %idxprom119 = sext i32 %add118 to i64
  %arrayidx120 = getelementptr inbounds double, double* %91, i64 %idxprom119
  %94 = load double, double* %arrayidx120, align 8
  %add121 = fadd double %94, %mul116
  store double %add121, double* %arrayidx120, align 8
  br label %for.inc122

for.inc122:                                       ; preds = %for.body107
  %95 = load i32, i32* %i, align 4
  %inc123 = add nsw i32 %95, 1
  store i32 %inc123, i32* %i, align 4
  br label %for.cond104

for.end124:                                       ; preds = %for.cond104
  %96 = load double*, double** %symmat.addr, align 8
  %97 = load i32, i32* %j1, align 4
  %mul125 = mul nsw i32 %97, 1024
  %98 = load i32, i32* %j2, align 4
  %add126 = add nsw i32 %mul125, %98
  %idxprom127 = sext i32 %add126 to i64
  %arrayidx128 = getelementptr inbounds double, double* %96, i64 %idxprom127
  %99 = load double, double* %arrayidx128, align 8
  %100 = load double*, double** %symmat.addr, align 8
  %101 = load i32, i32* %j2, align 4
  %mul129 = mul nsw i32 %101, 1024
  %102 = load i32, i32* %j1, align 4
  %add130 = add nsw i32 %mul129, %102
  %idxprom131 = sext i32 %add130 to i64
  %arrayidx132 = getelementptr inbounds double, double* %100, i64 %idxprom131
  store double %99, double* %arrayidx132, align 8
  br label %for.inc133

for.inc133:                                       ; preds = %for.end124
  %103 = load i32, i32* %j2, align 4
  %inc134 = add nsw i32 %103, 1
  store i32 %inc134, i32* %j2, align 4
  br label %for.cond96

for.end135:                                       ; preds = %for.cond96
  br label %for.inc136

for.inc136:                                       ; preds = %for.end135
  %104 = load i32, i32* %j1, align 4
  %inc137 = add nsw i32 %104, 1
  store i32 %inc137, i32* %j1, align 4
  br label %for.cond87

for.end138:                                       ; preds = %for.cond87
  %105 = load double*, double** %symmat.addr, align 8
  %arrayidx139 = getelementptr inbounds double, double* %105, i64 1048575
  store double 1.000000e+00, double* %arrayidx139, align 8
  ret void
}

declare i32 @sqrt_of_array_cell(...) #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sqrt.f64(double) #2

attributes #0 = { noinline nounwind optnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 8.0.0 (tags/RELEASE_800/final)"}
