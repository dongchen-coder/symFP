; ModuleID = './ss_bc/atax.bc'
source_filename = "./ss_src/atax.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define void @atax(i32 %nx, i32 %ny, double* %A, double* %x, double* %y, double* %tmp) #0 {
entry:
  %nx.addr = alloca i32, align 4
  %ny.addr = alloca i32, align 4
  %A.addr = alloca double*, align 8
  %x.addr = alloca double*, align 8
  %y.addr = alloca double*, align 8
  %tmp.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %nx, i32* %nx.addr, align 4
  store i32 %ny, i32* %ny.addr, align 4
  store double* %A, double** %A.addr, align 8
  store double* %x, double** %x.addr, align 8
  store double* %y, double** %y.addr, align 8
  store double* %tmp, double** %tmp.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc32, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4096
  br i1 %cmp, label %for.body, label %for.end34

for.body:                                         ; preds = %for.cond
  %1 = load double*, double** %tmp.addr, align 8
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds double, double* %1, i64 %idxprom
  store double 0.000000e+00, double* %arrayidx, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %3, 4096
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %4 = load double*, double** %tmp.addr, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %5 to i64
  %arrayidx5 = getelementptr inbounds double, double* %4, i64 %idxprom4
  %6 = load double, double* %arrayidx5, align 8
  %7 = load double*, double** %A.addr, align 8
  %8 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %8, 4096
  %9 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %9
  %idxprom6 = sext i32 %add to i64
  %arrayidx7 = getelementptr inbounds double, double* %7, i64 %idxprom6
  %10 = load double, double* %arrayidx7, align 8
  %11 = load double*, double** %x.addr, align 8
  %12 = load i32, i32* %j, align 4
  %idxprom8 = sext i32 %12 to i64
  %arrayidx9 = getelementptr inbounds double, double* %11, i64 %idxprom8
  %13 = load double, double* %arrayidx9, align 8
  %mul10 = fmul double %10, %13
  %add11 = fadd double %6, %mul10
  %14 = load double*, double** %tmp.addr, align 8
  %15 = load i32, i32* %i, align 4
  %idxprom12 = sext i32 %15 to i64
  %arrayidx13 = getelementptr inbounds double, double* %14, i64 %idxprom12
  store double %add11, double* %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %16 = load i32, i32* %j, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  store i32 0, i32* %j, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc29, %for.end
  %17 = load i32, i32* %j, align 4
  %cmp15 = icmp slt i32 %17, 4096
  br i1 %cmp15, label %for.body16, label %for.end31

for.body16:                                       ; preds = %for.cond14
  %18 = load double*, double** %y.addr, align 8
  %19 = load i32, i32* %j, align 4
  %idxprom17 = sext i32 %19 to i64
  %arrayidx18 = getelementptr inbounds double, double* %18, i64 %idxprom17
  %20 = load double, double* %arrayidx18, align 8
  %21 = load double*, double** %A.addr, align 8
  %22 = load i32, i32* %i, align 4
  %mul19 = mul nsw i32 %22, 4096
  %23 = load i32, i32* %j, align 4
  %add20 = add nsw i32 %mul19, %23
  %idxprom21 = sext i32 %add20 to i64
  %arrayidx22 = getelementptr inbounds double, double* %21, i64 %idxprom21
  %24 = load double, double* %arrayidx22, align 8
  %25 = load double*, double** %tmp.addr, align 8
  %26 = load i32, i32* %i, align 4
  %idxprom23 = sext i32 %26 to i64
  %arrayidx24 = getelementptr inbounds double, double* %25, i64 %idxprom23
  %27 = load double, double* %arrayidx24, align 8
  %mul25 = fmul double %24, %27
  %add26 = fadd double %20, %mul25
  %28 = load double*, double** %y.addr, align 8
  %29 = load i32, i32* %j, align 4
  %idxprom27 = sext i32 %29 to i64
  %arrayidx28 = getelementptr inbounds double, double* %28, i64 %idxprom27
  store double %add26, double* %arrayidx28, align 8
  br label %for.inc29

for.inc29:                                        ; preds = %for.body16
  %30 = load i32, i32* %j, align 4
  %inc30 = add nsw i32 %30, 1
  store i32 %inc30, i32* %j, align 4
  br label %for.cond14

for.end31:                                        ; preds = %for.cond14
  br label %for.inc32

for.inc32:                                        ; preds = %for.end31
  %31 = load i32, i32* %i, align 4
  %inc33 = add nsw i32 %31, 1
  store i32 %inc33, i32* %i, align 4
  br label %for.cond

for.end34:                                        ; preds = %for.cond
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0 (tags/RELEASE_600/final)"}
