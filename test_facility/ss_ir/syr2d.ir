; ModuleID = '/Users/dchen/tools/symFP/test_facility/ss_bc/syr2d.bc'
source_filename = "/Users/dchen/tools/symFP/test_facility/ss_src/syr2d.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.14.0"

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @syr2k(double* %A, double* %B, double* %C, double %alpha, double %beta) #0 {
entry:
  %A.addr = alloca double*, align 8
  %B.addr = alloca double*, align 8
  %C.addr = alloca double*, align 8
  %alpha.addr = alloca double, align 8
  %beta.addr = alloca double, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double* %A, double** %A.addr, align 8
  store double* %B, double** %B.addr, align 8
  store double* %C, double** %C.addr, align 8
  store double %alpha, double* %alpha.addr, align 8
  store double %beta, double* %beta.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc43, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 1024
  br i1 %cmp, label %for.body, label %for.end45

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %2 = load i32, i32* %i, align 4
  %cmp2 = icmp sle i32 %1, %2
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %3 = load double, double* %beta.addr, align 8
  %4 = load double*, double** %C.addr, align 8
  %5 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %5, 1024
  %6 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %6
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds double, double* %4, i64 %idxprom
  %7 = load double, double* %arrayidx, align 8
  %mul4 = fmul double %7, %3
  store double %mul4, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %j, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc40, %for.end
  %9 = load i32, i32* %k, align 4
  %cmp6 = icmp slt i32 %9, 1024
  br i1 %cmp6, label %for.body7, label %for.end42

for.body7:                                        ; preds = %for.cond5
  store i32 0, i32* %j, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc37, %for.body7
  %10 = load i32, i32* %j, align 4
  %11 = load i32, i32* %i, align 4
  %cmp9 = icmp sle i32 %10, %11
  br i1 %cmp9, label %for.body10, label %for.end39

for.body10:                                       ; preds = %for.cond8
  %12 = load double*, double** %A.addr, align 8
  %13 = load i32, i32* %j, align 4
  %mul11 = mul nsw i32 %13, 1024
  %14 = load i32, i32* %k, align 4
  %add12 = add nsw i32 %mul11, %14
  %idxprom13 = sext i32 %add12 to i64
  %arrayidx14 = getelementptr inbounds double, double* %12, i64 %idxprom13
  %15 = load double, double* %arrayidx14, align 8
  %16 = load double, double* %alpha.addr, align 8
  %mul15 = fmul double %15, %16
  %17 = load double*, double** %B.addr, align 8
  %18 = load i32, i32* %i, align 4
  %mul16 = mul nsw i32 %18, 1024
  %19 = load i32, i32* %k, align 4
  %add17 = add nsw i32 %mul16, %19
  %idxprom18 = sext i32 %add17 to i64
  %arrayidx19 = getelementptr inbounds double, double* %17, i64 %idxprom18
  %20 = load double, double* %arrayidx19, align 8
  %mul20 = fmul double %mul15, %20
  %21 = load double*, double** %B.addr, align 8
  %22 = load i32, i32* %j, align 4
  %mul21 = mul nsw i32 %22, 1024
  %23 = load i32, i32* %k, align 4
  %add22 = add nsw i32 %mul21, %23
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds double, double* %21, i64 %idxprom23
  %24 = load double, double* %arrayidx24, align 8
  %25 = load double, double* %alpha.addr, align 8
  %mul25 = fmul double %24, %25
  %26 = load double*, double** %A.addr, align 8
  %27 = load i32, i32* %i, align 4
  %mul26 = mul nsw i32 %27, 1024
  %28 = load i32, i32* %k, align 4
  %add27 = add nsw i32 %mul26, %28
  %idxprom28 = sext i32 %add27 to i64
  %arrayidx29 = getelementptr inbounds double, double* %26, i64 %idxprom28
  %29 = load double, double* %arrayidx29, align 8
  %mul30 = fmul double %mul25, %29
  %add31 = fadd double %mul20, %mul30
  %30 = load double*, double** %C.addr, align 8
  %31 = load i32, i32* %i, align 4
  %mul32 = mul nsw i32 %31, 1024
  %32 = load i32, i32* %j, align 4
  %add33 = add nsw i32 %mul32, %32
  %idxprom34 = sext i32 %add33 to i64
  %arrayidx35 = getelementptr inbounds double, double* %30, i64 %idxprom34
  %33 = load double, double* %arrayidx35, align 8
  %add36 = fadd double %33, %add31
  store double %add36, double* %arrayidx35, align 8
  br label %for.inc37

for.inc37:                                        ; preds = %for.body10
  %34 = load i32, i32* %j, align 4
  %inc38 = add nsw i32 %34, 1
  store i32 %inc38, i32* %j, align 4
  br label %for.cond8

for.end39:                                        ; preds = %for.cond8
  br label %for.inc40

for.inc40:                                        ; preds = %for.end39
  %35 = load i32, i32* %k, align 4
  %inc41 = add nsw i32 %35, 1
  store i32 %inc41, i32* %k, align 4
  br label %for.cond5

for.end42:                                        ; preds = %for.cond5
  br label %for.inc43

for.inc43:                                        ; preds = %for.end42
  %36 = load i32, i32* %i, align 4
  %inc44 = add nsw i32 %36, 1
  store i32 %inc44, i32* %i, align 4
  br label %for.cond

for.end45:                                        ; preds = %for.cond
  ret void
}

attributes #0 = { noinline nounwind optnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 8.0.0 (tags/RELEASE_800/final)"}
