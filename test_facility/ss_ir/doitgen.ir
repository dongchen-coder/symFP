; ModuleID = './ss_bc/doitgen.bc'
source_filename = "./ss_src/doitgen.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @doitgen(double* %sum, double* %A, double* %C4) #0 {
entry:
  %sum.addr = alloca double*, align 8
  %A.addr = alloca double*, align 8
  %C4.addr = alloca double*, align 8
  %r = alloca i32, align 4
  %q = alloca i32, align 4
  %p = alloca i32, align 4
  %s = alloca i32, align 4
  store double* %sum, double** %sum.addr, align 8
  store double* %A, double** %A.addr, align 8
  store double* %C4, double** %C4.addr, align 8
  store i32 0, i32* %r, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc59, %entry
  %0 = load i32, i32* %r, align 4
  %cmp = icmp slt i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end61

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %q, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc56, %for.body
  %1 = load i32, i32* %q, align 4
  %cmp2 = icmp slt i32 %1, 256
  br i1 %cmp2, label %for.body3, label %for.end58

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %p, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc33, %for.body3
  %2 = load i32, i32* %p, align 4
  %cmp5 = icmp slt i32 %2, 256
  br i1 %cmp5, label %for.body6, label %for.end35

for.body6:                                        ; preds = %for.cond4
  %3 = load double*, double** %sum.addr, align 8
  %4 = load i32, i32* %r, align 4
  %mul = mul nsw i32 %4, 256
  %mul7 = mul nsw i32 %mul, 256
  %5 = load i32, i32* %q, align 4
  %mul8 = mul nsw i32 %5, 256
  %add = add nsw i32 %mul7, %mul8
  %6 = load i32, i32* %p, align 4
  %add9 = add nsw i32 %add, %6
  %idxprom = sext i32 %add9 to i64
  %arrayidx = getelementptr inbounds double, double* %3, i64 %idxprom
  store double 0.000000e+00, double* %arrayidx, align 8
  store i32 0, i32* %s, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc, %for.body6
  %7 = load i32, i32* %s, align 4
  %cmp11 = icmp slt i32 %7, 256
  br i1 %cmp11, label %for.body12, label %for.end

for.body12:                                       ; preds = %for.cond10
  %8 = load double*, double** %A.addr, align 8
  %9 = load i32, i32* %r, align 4
  %mul13 = mul nsw i32 %9, 256
  %mul14 = mul nsw i32 %mul13, 256
  %10 = load i32, i32* %q, align 4
  %mul15 = mul nsw i32 %10, 256
  %add16 = add nsw i32 %mul14, %mul15
  %11 = load i32, i32* %s, align 4
  %add17 = add nsw i32 %add16, %11
  %idxprom18 = sext i32 %add17 to i64
  %arrayidx19 = getelementptr inbounds double, double* %8, i64 %idxprom18
  %12 = load double, double* %arrayidx19, align 8
  %13 = load double*, double** %C4.addr, align 8
  %14 = load i32, i32* %s, align 4
  %mul20 = mul nsw i32 %14, 256
  %15 = load i32, i32* %p, align 4
  %add21 = add nsw i32 %mul20, %15
  %idxprom22 = sext i32 %add21 to i64
  %arrayidx23 = getelementptr inbounds double, double* %13, i64 %idxprom22
  %16 = load double, double* %arrayidx23, align 8
  %mul24 = fmul double %12, %16
  %17 = load double*, double** %sum.addr, align 8
  %18 = load i32, i32* %r, align 4
  %mul25 = mul nsw i32 %18, 256
  %mul26 = mul nsw i32 %mul25, 256
  %19 = load i32, i32* %q, align 4
  %mul27 = mul nsw i32 %19, 256
  %add28 = add nsw i32 %mul26, %mul27
  %20 = load i32, i32* %p, align 4
  %add29 = add nsw i32 %add28, %20
  %idxprom30 = sext i32 %add29 to i64
  %arrayidx31 = getelementptr inbounds double, double* %17, i64 %idxprom30
  %21 = load double, double* %arrayidx31, align 8
  %add32 = fadd double %21, %mul24
  store double %add32, double* %arrayidx31, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body12
  %22 = load i32, i32* %s, align 4
  %inc = add nsw i32 %22, 1
  store i32 %inc, i32* %s, align 4
  br label %for.cond10, !llvm.loop !2

for.end:                                          ; preds = %for.cond10
  br label %for.inc33

for.inc33:                                        ; preds = %for.end
  %23 = load i32, i32* %p, align 4
  %inc34 = add nsw i32 %23, 1
  store i32 %inc34, i32* %p, align 4
  br label %for.cond4, !llvm.loop !4

for.end35:                                        ; preds = %for.cond4
  store i32 0, i32* %p, align 4
  br label %for.cond36

for.cond36:                                       ; preds = %for.inc53, %for.end35
  %24 = load i32, i32* %p, align 4
  %cmp37 = icmp slt i32 %24, 256
  br i1 %cmp37, label %for.body38, label %for.end55

for.body38:                                       ; preds = %for.cond36
  %25 = load double*, double** %sum.addr, align 8
  %26 = load i32, i32* %r, align 4
  %mul39 = mul nsw i32 %26, 256
  %mul40 = mul nsw i32 %mul39, 256
  %27 = load i32, i32* %q, align 4
  %mul41 = mul nsw i32 %27, 256
  %add42 = add nsw i32 %mul40, %mul41
  %28 = load i32, i32* %p, align 4
  %add43 = add nsw i32 %add42, %28
  %idxprom44 = sext i32 %add43 to i64
  %arrayidx45 = getelementptr inbounds double, double* %25, i64 %idxprom44
  %29 = load double, double* %arrayidx45, align 8
  %30 = load double*, double** %A.addr, align 8
  %31 = load i32, i32* %r, align 4
  %mul46 = mul nsw i32 %31, 256
  %mul47 = mul nsw i32 %mul46, 256
  %32 = load i32, i32* %q, align 4
  %mul48 = mul nsw i32 %32, 256
  %add49 = add nsw i32 %mul47, %mul48
  %33 = load i32, i32* %p, align 4
  %add50 = add nsw i32 %add49, %33
  %idxprom51 = sext i32 %add50 to i64
  %arrayidx52 = getelementptr inbounds double, double* %30, i64 %idxprom51
  store double %29, double* %arrayidx52, align 8
  br label %for.inc53

for.inc53:                                        ; preds = %for.body38
  %34 = load i32, i32* %p, align 4
  %inc54 = add nsw i32 %34, 1
  store i32 %inc54, i32* %p, align 4
  br label %for.cond36, !llvm.loop !5

for.end55:                                        ; preds = %for.cond36
  br label %for.inc56

for.inc56:                                        ; preds = %for.end55
  %35 = load i32, i32* %q, align 4
  %inc57 = add nsw i32 %35, 1
  store i32 %inc57, i32* %q, align 4
  br label %for.cond1, !llvm.loop !6

for.end58:                                        ; preds = %for.cond1
  br label %for.inc59

for.inc59:                                        ; preds = %for.end58
  %36 = load i32, i32* %r, align 4
  %inc60 = add nsw i32 %36, 1
  store i32 %inc60, i32* %r, align 4
  br label %for.cond, !llvm.loop !7

for.end61:                                        ; preds = %for.cond
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 13.0.0 (https://github.com/llvm/llvm-project.git 482283042f795ecc27838a3b2f76b5494991401c)"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.mustprogress"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
