; ModuleID = './ss_bc/heat_3d.bc'
source_filename = "./ss_src/heat_3d.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define void @heat_3d(double* %B, double* %A) #0 {
entry:
  %B.addr = alloca double*, align 8
  %A.addr = alloca double*, align 8
  %t = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double* %B, double** %B.addr, align 8
  store double* %A, double** %A.addr, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc103, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 255
  br i1 %cmp, label %for.body, label %for.end105

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc100, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 255
  br i1 %cmp2, label %for.body3, label %for.end102

for.body3:                                        ; preds = %for.cond1
  store i32 1, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %2 = load i32, i32* %k, align 4
  %cmp5 = icmp slt i32 %2, 255
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %3 = load double*, double** %A.addr, align 8
  %4 = load i32, i32* %i, align 4
  %add = add nsw i32 %4, 1
  %mul = mul nsw i32 %add, 256
  %mul7 = mul nsw i32 %mul, 256
  %5 = load i32, i32* %j, align 4
  %mul8 = mul nsw i32 %5, 256
  %add9 = add nsw i32 %mul7, %mul8
  %6 = load i32, i32* %k, align 4
  %add10 = add nsw i32 %add9, %6
  %idxprom = sext i32 %add10 to i64
  %arrayidx = getelementptr inbounds double, double* %3, i64 %idxprom
  %7 = load double, double* %arrayidx, align 8
  %8 = load double*, double** %A.addr, align 8
  %9 = load i32, i32* %i, align 4
  %mul11 = mul nsw i32 %9, 256
  %mul12 = mul nsw i32 %mul11, 256
  %10 = load i32, i32* %j, align 4
  %mul13 = mul nsw i32 %10, 256
  %add14 = add nsw i32 %mul12, %mul13
  %11 = load i32, i32* %k, align 4
  %add15 = add nsw i32 %add14, %11
  %idxprom16 = sext i32 %add15 to i64
  %arrayidx17 = getelementptr inbounds double, double* %8, i64 %idxprom16
  %12 = load double, double* %arrayidx17, align 8
  %mul18 = fmul double 2.000000e+00, %12
  %sub = fsub double %7, %mul18
  %13 = load double*, double** %A.addr, align 8
  %14 = load i32, i32* %i, align 4
  %sub19 = sub nsw i32 %14, 1
  %mul20 = mul nsw i32 %sub19, 256
  %mul21 = mul nsw i32 %mul20, 256
  %15 = load i32, i32* %j, align 4
  %mul22 = mul nsw i32 %15, 256
  %add23 = add nsw i32 %mul21, %mul22
  %16 = load i32, i32* %k, align 4
  %add24 = add nsw i32 %add23, %16
  %idxprom25 = sext i32 %add24 to i64
  %arrayidx26 = getelementptr inbounds double, double* %13, i64 %idxprom25
  %17 = load double, double* %arrayidx26, align 8
  %add27 = fadd double %sub, %17
  %mul28 = fmul double 1.250000e-01, %add27
  %18 = load double*, double** %A.addr, align 8
  %19 = load i32, i32* %i, align 4
  %mul29 = mul nsw i32 %19, 256
  %mul30 = mul nsw i32 %mul29, 256
  %20 = load i32, i32* %j, align 4
  %add31 = add nsw i32 %20, 1
  %mul32 = mul nsw i32 %add31, 256
  %add33 = add nsw i32 %mul30, %mul32
  %21 = load i32, i32* %k, align 4
  %add34 = add nsw i32 %add33, %21
  %idxprom35 = sext i32 %add34 to i64
  %arrayidx36 = getelementptr inbounds double, double* %18, i64 %idxprom35
  %22 = load double, double* %arrayidx36, align 8
  %23 = load double*, double** %A.addr, align 8
  %24 = load i32, i32* %i, align 4
  %mul37 = mul nsw i32 %24, 256
  %mul38 = mul nsw i32 %mul37, 256
  %25 = load i32, i32* %j, align 4
  %mul39 = mul nsw i32 %25, 256
  %add40 = add nsw i32 %mul38, %mul39
  %26 = load i32, i32* %k, align 4
  %add41 = add nsw i32 %add40, %26
  %idxprom42 = sext i32 %add41 to i64
  %arrayidx43 = getelementptr inbounds double, double* %23, i64 %idxprom42
  %27 = load double, double* %arrayidx43, align 8
  %mul44 = fmul double 2.000000e+00, %27
  %sub45 = fsub double %22, %mul44
  %28 = load double*, double** %A.addr, align 8
  %29 = load i32, i32* %i, align 4
  %mul46 = mul nsw i32 %29, 256
  %mul47 = mul nsw i32 %mul46, 256
  %30 = load i32, i32* %j, align 4
  %sub48 = sub nsw i32 %30, 1
  %mul49 = mul nsw i32 %sub48, 256
  %add50 = add nsw i32 %mul47, %mul49
  %31 = load i32, i32* %k, align 4
  %add51 = add nsw i32 %add50, %31
  %idxprom52 = sext i32 %add51 to i64
  %arrayidx53 = getelementptr inbounds double, double* %28, i64 %idxprom52
  %32 = load double, double* %arrayidx53, align 8
  %add54 = fadd double %sub45, %32
  %mul55 = fmul double 1.250000e-01, %add54
  %add56 = fadd double %mul28, %mul55
  %33 = load double*, double** %A.addr, align 8
  %34 = load i32, i32* %i, align 4
  %mul57 = mul nsw i32 %34, 256
  %mul58 = mul nsw i32 %mul57, 256
  %35 = load i32, i32* %j, align 4
  %mul59 = mul nsw i32 %35, 256
  %add60 = add nsw i32 %mul58, %mul59
  %36 = load i32, i32* %k, align 4
  %add61 = add nsw i32 %add60, %36
  %add62 = add nsw i32 %add61, 1
  %idxprom63 = sext i32 %add62 to i64
  %arrayidx64 = getelementptr inbounds double, double* %33, i64 %idxprom63
  %37 = load double, double* %arrayidx64, align 8
  %38 = load double*, double** %A.addr, align 8
  %39 = load i32, i32* %i, align 4
  %mul65 = mul nsw i32 %39, 256
  %mul66 = mul nsw i32 %mul65, 256
  %40 = load i32, i32* %j, align 4
  %mul67 = mul nsw i32 %40, 256
  %add68 = add nsw i32 %mul66, %mul67
  %41 = load i32, i32* %k, align 4
  %add69 = add nsw i32 %add68, %41
  %idxprom70 = sext i32 %add69 to i64
  %arrayidx71 = getelementptr inbounds double, double* %38, i64 %idxprom70
  %42 = load double, double* %arrayidx71, align 8
  %mul72 = fmul double 2.000000e+00, %42
  %sub73 = fsub double %37, %mul72
  %43 = load double*, double** %A.addr, align 8
  %44 = load i32, i32* %i, align 4
  %mul74 = mul nsw i32 %44, 256
  %mul75 = mul nsw i32 %mul74, 256
  %45 = load i32, i32* %j, align 4
  %mul76 = mul nsw i32 %45, 256
  %add77 = add nsw i32 %mul75, %mul76
  %46 = load i32, i32* %k, align 4
  %add78 = add nsw i32 %add77, %46
  %sub79 = sub nsw i32 %add78, 1
  %idxprom80 = sext i32 %sub79 to i64
  %arrayidx81 = getelementptr inbounds double, double* %43, i64 %idxprom80
  %47 = load double, double* %arrayidx81, align 8
  %add82 = fadd double %sub73, %47
  %mul83 = fmul double 1.250000e-01, %add82
  %add84 = fadd double %add56, %mul83
  %48 = load double*, double** %A.addr, align 8
  %49 = load i32, i32* %i, align 4
  %mul85 = mul nsw i32 %49, 256
  %mul86 = mul nsw i32 %mul85, 256
  %50 = load i32, i32* %j, align 4
  %mul87 = mul nsw i32 %50, 256
  %add88 = add nsw i32 %mul86, %mul87
  %51 = load i32, i32* %k, align 4
  %add89 = add nsw i32 %add88, %51
  %idxprom90 = sext i32 %add89 to i64
  %arrayidx91 = getelementptr inbounds double, double* %48, i64 %idxprom90
  %52 = load double, double* %arrayidx91, align 8
  %add92 = fadd double %add84, %52
  %53 = load double*, double** %B.addr, align 8
  %54 = load i32, i32* %i, align 4
  %mul93 = mul nsw i32 %54, 256
  %mul94 = mul nsw i32 %mul93, 256
  %55 = load i32, i32* %j, align 4
  %mul95 = mul nsw i32 %55, 256
  %add96 = add nsw i32 %mul94, %mul95
  %56 = load i32, i32* %k, align 4
  %add97 = add nsw i32 %add96, %56
  %idxprom98 = sext i32 %add97 to i64
  %arrayidx99 = getelementptr inbounds double, double* %53, i64 %idxprom98
  store double %add92, double* %arrayidx99, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %57 = load i32, i32* %k, align 4
  %inc = add nsw i32 %57, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc100

for.inc100:                                       ; preds = %for.end
  %58 = load i32, i32* %j, align 4
  %inc101 = add nsw i32 %58, 1
  store i32 %inc101, i32* %j, align 4
  br label %for.cond1

for.end102:                                       ; preds = %for.cond1
  br label %for.inc103

for.inc103:                                       ; preds = %for.end102
  %59 = load i32, i32* %i, align 4
  %inc104 = add nsw i32 %59, 1
  store i32 %inc104, i32* %i, align 4
  br label %for.cond

for.end105:                                       ; preds = %for.cond
  store i32 1, i32* %i, align 4
  br label %for.cond106

for.cond106:                                      ; preds = %for.inc219, %for.end105
  %60 = load i32, i32* %i, align 4
  %cmp107 = icmp slt i32 %60, 255
  br i1 %cmp107, label %for.body108, label %for.end221

for.body108:                                      ; preds = %for.cond106
  store i32 1, i32* %j, align 4
  br label %for.cond109

for.cond109:                                      ; preds = %for.inc216, %for.body108
  %61 = load i32, i32* %j, align 4
  %cmp110 = icmp slt i32 %61, 255
  br i1 %cmp110, label %for.body111, label %for.end218

for.body111:                                      ; preds = %for.cond109
  store i32 1, i32* %k, align 4
  br label %for.cond112

for.cond112:                                      ; preds = %for.inc213, %for.body111
  %62 = load i32, i32* %k, align 4
  %cmp113 = icmp slt i32 %62, 255
  br i1 %cmp113, label %for.body114, label %for.end215

for.body114:                                      ; preds = %for.cond112
  %63 = load double*, double** %B.addr, align 8
  %64 = load i32, i32* %i, align 4
  %add115 = add nsw i32 %64, 1
  %mul116 = mul nsw i32 %add115, 256
  %mul117 = mul nsw i32 %mul116, 256
  %65 = load i32, i32* %j, align 4
  %mul118 = mul nsw i32 %65, 256
  %add119 = add nsw i32 %mul117, %mul118
  %66 = load i32, i32* %k, align 4
  %add120 = add nsw i32 %add119, %66
  %idxprom121 = sext i32 %add120 to i64
  %arrayidx122 = getelementptr inbounds double, double* %63, i64 %idxprom121
  %67 = load double, double* %arrayidx122, align 8
  %68 = load double*, double** %B.addr, align 8
  %69 = load i32, i32* %i, align 4
  %mul123 = mul nsw i32 %69, 256
  %mul124 = mul nsw i32 %mul123, 256
  %70 = load i32, i32* %j, align 4
  %mul125 = mul nsw i32 %70, 256
  %add126 = add nsw i32 %mul124, %mul125
  %71 = load i32, i32* %k, align 4
  %add127 = add nsw i32 %add126, %71
  %idxprom128 = sext i32 %add127 to i64
  %arrayidx129 = getelementptr inbounds double, double* %68, i64 %idxprom128
  %72 = load double, double* %arrayidx129, align 8
  %mul130 = fmul double 2.000000e+00, %72
  %sub131 = fsub double %67, %mul130
  %73 = load double*, double** %B.addr, align 8
  %74 = load i32, i32* %i, align 4
  %sub132 = sub nsw i32 %74, 1
  %mul133 = mul nsw i32 %sub132, 256
  %mul134 = mul nsw i32 %mul133, 256
  %75 = load i32, i32* %j, align 4
  %mul135 = mul nsw i32 %75, 256
  %add136 = add nsw i32 %mul134, %mul135
  %76 = load i32, i32* %k, align 4
  %add137 = add nsw i32 %add136, %76
  %idxprom138 = sext i32 %add137 to i64
  %arrayidx139 = getelementptr inbounds double, double* %73, i64 %idxprom138
  %77 = load double, double* %arrayidx139, align 8
  %add140 = fadd double %sub131, %77
  %mul141 = fmul double 1.250000e-01, %add140
  %78 = load double*, double** %B.addr, align 8
  %79 = load i32, i32* %i, align 4
  %mul142 = mul nsw i32 %79, 256
  %mul143 = mul nsw i32 %mul142, 256
  %80 = load i32, i32* %j, align 4
  %add144 = add nsw i32 %80, 1
  %mul145 = mul nsw i32 %add144, 256
  %add146 = add nsw i32 %mul143, %mul145
  %81 = load i32, i32* %k, align 4
  %add147 = add nsw i32 %add146, %81
  %idxprom148 = sext i32 %add147 to i64
  %arrayidx149 = getelementptr inbounds double, double* %78, i64 %idxprom148
  %82 = load double, double* %arrayidx149, align 8
  %83 = load double*, double** %B.addr, align 8
  %84 = load i32, i32* %i, align 4
  %mul150 = mul nsw i32 %84, 256
  %mul151 = mul nsw i32 %mul150, 256
  %85 = load i32, i32* %j, align 4
  %mul152 = mul nsw i32 %85, 256
  %add153 = add nsw i32 %mul151, %mul152
  %86 = load i32, i32* %k, align 4
  %add154 = add nsw i32 %add153, %86
  %idxprom155 = sext i32 %add154 to i64
  %arrayidx156 = getelementptr inbounds double, double* %83, i64 %idxprom155
  %87 = load double, double* %arrayidx156, align 8
  %mul157 = fmul double 2.000000e+00, %87
  %sub158 = fsub double %82, %mul157
  %88 = load double*, double** %B.addr, align 8
  %89 = load i32, i32* %i, align 4
  %mul159 = mul nsw i32 %89, 256
  %mul160 = mul nsw i32 %mul159, 256
  %90 = load i32, i32* %j, align 4
  %sub161 = sub nsw i32 %90, 1
  %mul162 = mul nsw i32 %sub161, 256
  %add163 = add nsw i32 %mul160, %mul162
  %91 = load i32, i32* %k, align 4
  %add164 = add nsw i32 %add163, %91
  %idxprom165 = sext i32 %add164 to i64
  %arrayidx166 = getelementptr inbounds double, double* %88, i64 %idxprom165
  %92 = load double, double* %arrayidx166, align 8
  %add167 = fadd double %sub158, %92
  %mul168 = fmul double 1.250000e-01, %add167
  %add169 = fadd double %mul141, %mul168
  %93 = load double*, double** %B.addr, align 8
  %94 = load i32, i32* %i, align 4
  %mul170 = mul nsw i32 %94, 256
  %mul171 = mul nsw i32 %mul170, 256
  %95 = load i32, i32* %j, align 4
  %mul172 = mul nsw i32 %95, 256
  %add173 = add nsw i32 %mul171, %mul172
  %96 = load i32, i32* %k, align 4
  %add174 = add nsw i32 %add173, %96
  %add175 = add nsw i32 %add174, 1
  %idxprom176 = sext i32 %add175 to i64
  %arrayidx177 = getelementptr inbounds double, double* %93, i64 %idxprom176
  %97 = load double, double* %arrayidx177, align 8
  %98 = load double*, double** %B.addr, align 8
  %99 = load i32, i32* %i, align 4
  %mul178 = mul nsw i32 %99, 256
  %mul179 = mul nsw i32 %mul178, 256
  %100 = load i32, i32* %j, align 4
  %mul180 = mul nsw i32 %100, 256
  %add181 = add nsw i32 %mul179, %mul180
  %101 = load i32, i32* %k, align 4
  %add182 = add nsw i32 %add181, %101
  %idxprom183 = sext i32 %add182 to i64
  %arrayidx184 = getelementptr inbounds double, double* %98, i64 %idxprom183
  %102 = load double, double* %arrayidx184, align 8
  %mul185 = fmul double 2.000000e+00, %102
  %sub186 = fsub double %97, %mul185
  %103 = load double*, double** %B.addr, align 8
  %104 = load i32, i32* %i, align 4
  %mul187 = mul nsw i32 %104, 256
  %mul188 = mul nsw i32 %mul187, 256
  %105 = load i32, i32* %j, align 4
  %mul189 = mul nsw i32 %105, 256
  %add190 = add nsw i32 %mul188, %mul189
  %106 = load i32, i32* %k, align 4
  %add191 = add nsw i32 %add190, %106
  %sub192 = sub nsw i32 %add191, 1
  %idxprom193 = sext i32 %sub192 to i64
  %arrayidx194 = getelementptr inbounds double, double* %103, i64 %idxprom193
  %107 = load double, double* %arrayidx194, align 8
  %add195 = fadd double %sub186, %107
  %mul196 = fmul double 1.250000e-01, %add195
  %add197 = fadd double %add169, %mul196
  %108 = load double*, double** %B.addr, align 8
  %109 = load i32, i32* %i, align 4
  %mul198 = mul nsw i32 %109, 256
  %mul199 = mul nsw i32 %mul198, 256
  %110 = load i32, i32* %j, align 4
  %mul200 = mul nsw i32 %110, 256
  %add201 = add nsw i32 %mul199, %mul200
  %111 = load i32, i32* %k, align 4
  %add202 = add nsw i32 %add201, %111
  %idxprom203 = sext i32 %add202 to i64
  %arrayidx204 = getelementptr inbounds double, double* %108, i64 %idxprom203
  %112 = load double, double* %arrayidx204, align 8
  %add205 = fadd double %add197, %112
  %113 = load double*, double** %A.addr, align 8
  %114 = load i32, i32* %i, align 4
  %mul206 = mul nsw i32 %114, 256
  %mul207 = mul nsw i32 %mul206, 256
  %115 = load i32, i32* %j, align 4
  %mul208 = mul nsw i32 %115, 256
  %add209 = add nsw i32 %mul207, %mul208
  %116 = load i32, i32* %k, align 4
  %add210 = add nsw i32 %add209, %116
  %idxprom211 = sext i32 %add210 to i64
  %arrayidx212 = getelementptr inbounds double, double* %113, i64 %idxprom211
  store double %add205, double* %arrayidx212, align 8
  br label %for.inc213

for.inc213:                                       ; preds = %for.body114
  %117 = load i32, i32* %k, align 4
  %inc214 = add nsw i32 %117, 1
  store i32 %inc214, i32* %k, align 4
  br label %for.cond112

for.end215:                                       ; preds = %for.cond112
  br label %for.inc216

for.inc216:                                       ; preds = %for.end215
  %118 = load i32, i32* %j, align 4
  %inc217 = add nsw i32 %118, 1
  store i32 %inc217, i32* %j, align 4
  br label %for.cond109

for.end218:                                       ; preds = %for.cond109
  br label %for.inc219

for.inc219:                                       ; preds = %for.end218
  %119 = load i32, i32* %i, align 4
  %inc220 = add nsw i32 %119, 1
  store i32 %inc220, i32* %i, align 4
  br label %for.cond106

for.end221:                                       ; preds = %for.cond106
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0 (tags/RELEASE_600/final)"}
