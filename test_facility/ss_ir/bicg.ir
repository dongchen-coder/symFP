; ModuleID = './ss_bc/bicg.bc'
source_filename = "./ss_src/bicg.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define void @bicg_cpu(i32 %nx, i32 %ny, double* %A, double* %r, double* %s, double* %p, double* %q) #0 {
entry:
  %nx.addr = alloca i32, align 4
  %ny.addr = alloca i32, align 4
  %A.addr = alloca double*, align 8
  %r.addr = alloca double*, align 8
  %s.addr = alloca double*, align 8
  %p.addr = alloca double*, align 8
  %q.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %nx, i32* %nx.addr, align 4
  store i32 %ny, i32* %ny.addr, align 4
  store double* %A, double** %A.addr, align 8
  store double* %r, double** %r.addr, align 8
  store double* %s, double** %s.addr, align 8
  store double* %p, double** %p.addr, align 8
  store double* %q, double** %q.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc24, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 4096
  br i1 %cmp, label %for.body, label %for.end26

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 4096
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load double*, double** %s.addr, align 8
  %3 = load i32, i32* %j, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds double, double* %2, i64 %idxprom
  %4 = load double, double* %arrayidx, align 8
  %5 = load double*, double** %r.addr, align 8
  %6 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %6 to i64
  %arrayidx5 = getelementptr inbounds double, double* %5, i64 %idxprom4
  %7 = load double, double* %arrayidx5, align 8
  %8 = load double*, double** %A.addr, align 8
  %9 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %9, 4096
  %10 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %10
  %idxprom6 = sext i32 %add to i64
  %arrayidx7 = getelementptr inbounds double, double* %8, i64 %idxprom6
  %11 = load double, double* %arrayidx7, align 8
  %mul8 = fmul double %7, %11
  %add9 = fadd double %4, %mul8
  %12 = load double*, double** %s.addr, align 8
  %13 = load i32, i32* %j, align 4
  %idxprom10 = sext i32 %13 to i64
  %arrayidx11 = getelementptr inbounds double, double* %12, i64 %idxprom10
  store double %add9, double* %arrayidx11, align 8
  %14 = load double*, double** %q.addr, align 8
  %15 = load i32, i32* %i, align 4
  %idxprom12 = sext i32 %15 to i64
  %arrayidx13 = getelementptr inbounds double, double* %14, i64 %idxprom12
  %16 = load double, double* %arrayidx13, align 8
  %17 = load double*, double** %A.addr, align 8
  %18 = load i32, i32* %i, align 4
  %mul14 = mul nsw i32 %18, 4096
  %19 = load i32, i32* %j, align 4
  %add15 = add nsw i32 %mul14, %19
  %idxprom16 = sext i32 %add15 to i64
  %arrayidx17 = getelementptr inbounds double, double* %17, i64 %idxprom16
  %20 = load double, double* %arrayidx17, align 8
  %21 = load double*, double** %p.addr, align 8
  %22 = load i32, i32* %j, align 4
  %idxprom18 = sext i32 %22 to i64
  %arrayidx19 = getelementptr inbounds double, double* %21, i64 %idxprom18
  %23 = load double, double* %arrayidx19, align 8
  %mul20 = fmul double %20, %23
  %add21 = fadd double %16, %mul20
  %24 = load double*, double** %q.addr, align 8
  %25 = load i32, i32* %i, align 4
  %idxprom22 = sext i32 %25 to i64
  %arrayidx23 = getelementptr inbounds double, double* %24, i64 %idxprom22
  store double %add21, double* %arrayidx23, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %26 = load i32, i32* %j, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc24

for.inc24:                                        ; preds = %for.end
  %27 = load i32, i32* %i, align 4
  %inc25 = add nsw i32 %27, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond

for.end26:                                        ; preds = %for.cond
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0 (tags/RELEASE_600/final)"}
