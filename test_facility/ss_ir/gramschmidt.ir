; ModuleID = '/Users/dchen/tools/symFP/test_facility/ss_bc/gramschmidt.bc'
source_filename = "/Users/dchen/tools/symFP/test_facility/ss_src/gramschmidt.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.14.0"

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @gramschmidt(double* %A, double* %R, double* %Q) #0 {
entry:
  %A.addr = alloca double*, align 8
  %R.addr = alloca double*, align 8
  %Q.addr = alloca double*, align 8
  %k = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %nrm = alloca double, align 8
  store double* %A, double** %A.addr, align 8
  store double* %R, double** %R.addr, align 8
  store double* %Q, double** %Q.addr, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc86, %entry
  %0 = load i32, i32* %k, align 4
  %cmp = icmp slt i32 %0, 1024
  br i1 %cmp, label %for.body, label %for.end88

for.body:                                         ; preds = %for.cond
  store double 0.000000e+00, double* %nrm, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %1, 1024
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load double*, double** %A.addr, align 8
  %3 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %3, 1024
  %4 = load i32, i32* %k, align 4
  %add = add nsw i32 %mul, %4
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds double, double* %2, i64 %idxprom
  %5 = load double, double* %arrayidx, align 8
  %6 = load double*, double** %A.addr, align 8
  %7 = load i32, i32* %i, align 4
  %mul4 = mul nsw i32 %7, 1024
  %8 = load i32, i32* %k, align 4
  %add5 = add nsw i32 %mul4, %8
  %idxprom6 = sext i32 %add5 to i64
  %arrayidx7 = getelementptr inbounds double, double* %6, i64 %idxprom6
  %9 = load double, double* %arrayidx7, align 8
  %mul8 = fmul double %5, %9
  %10 = load double, double* %nrm, align 8
  %add9 = fadd double %10, %mul8
  store double %add9, double* %nrm, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %11 = load i32, i32* %i, align 4
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %12 = load double, double* %nrm, align 8
  %13 = call double @llvm.sqrt.f64(double %12)
  %14 = load double*, double** %R.addr, align 8
  %15 = load i32, i32* %k, align 4
  %mul10 = mul nsw i32 %15, 1024
  %16 = load i32, i32* %k, align 4
  %add11 = add nsw i32 %mul10, %16
  %idxprom12 = sext i32 %add11 to i64
  %arrayidx13 = getelementptr inbounds double, double* %14, i64 %idxprom12
  store double %13, double* %arrayidx13, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc29, %for.end
  %17 = load i32, i32* %i, align 4
  %cmp15 = icmp slt i32 %17, 1024
  br i1 %cmp15, label %for.body16, label %for.end31

for.body16:                                       ; preds = %for.cond14
  %18 = load double*, double** %A.addr, align 8
  %19 = load i32, i32* %i, align 4
  %mul17 = mul nsw i32 %19, 1024
  %20 = load i32, i32* %k, align 4
  %add18 = add nsw i32 %mul17, %20
  %idxprom19 = sext i32 %add18 to i64
  %arrayidx20 = getelementptr inbounds double, double* %18, i64 %idxprom19
  %21 = load double, double* %arrayidx20, align 8
  %22 = load double*, double** %R.addr, align 8
  %23 = load i32, i32* %k, align 4
  %mul21 = mul nsw i32 %23, 1024
  %24 = load i32, i32* %k, align 4
  %add22 = add nsw i32 %mul21, %24
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds double, double* %22, i64 %idxprom23
  %25 = load double, double* %arrayidx24, align 8
  %div = fdiv double %21, %25
  %26 = load double*, double** %Q.addr, align 8
  %27 = load i32, i32* %i, align 4
  %mul25 = mul nsw i32 %27, 1024
  %28 = load i32, i32* %k, align 4
  %add26 = add nsw i32 %mul25, %28
  %idxprom27 = sext i32 %add26 to i64
  %arrayidx28 = getelementptr inbounds double, double* %26, i64 %idxprom27
  store double %div, double* %arrayidx28, align 8
  br label %for.inc29

for.inc29:                                        ; preds = %for.body16
  %29 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %29, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond14

for.end31:                                        ; preds = %for.cond14
  %30 = load i32, i32* %k, align 4
  %add32 = add nsw i32 %30, 1
  store i32 %add32, i32* %j, align 4
  br label %for.cond33

for.cond33:                                       ; preds = %for.inc83, %for.end31
  %31 = load i32, i32* %j, align 4
  %cmp34 = icmp slt i32 %31, 1024
  br i1 %cmp34, label %for.body35, label %for.end85

for.body35:                                       ; preds = %for.cond33
  %32 = load double*, double** %R.addr, align 8
  %33 = load i32, i32* %k, align 4
  %mul36 = mul nsw i32 %33, 1024
  %34 = load i32, i32* %j, align 4
  %add37 = add nsw i32 %mul36, %34
  %idxprom38 = sext i32 %add37 to i64
  %arrayidx39 = getelementptr inbounds double, double* %32, i64 %idxprom38
  store double 0.000000e+00, double* %arrayidx39, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond40

for.cond40:                                       ; preds = %for.inc57, %for.body35
  %35 = load i32, i32* %i, align 4
  %cmp41 = icmp slt i32 %35, 1024
  br i1 %cmp41, label %for.body42, label %for.end59

for.body42:                                       ; preds = %for.cond40
  %36 = load double*, double** %Q.addr, align 8
  %37 = load i32, i32* %i, align 4
  %mul43 = mul nsw i32 %37, 1024
  %38 = load i32, i32* %k, align 4
  %add44 = add nsw i32 %mul43, %38
  %idxprom45 = sext i32 %add44 to i64
  %arrayidx46 = getelementptr inbounds double, double* %36, i64 %idxprom45
  %39 = load double, double* %arrayidx46, align 8
  %40 = load double*, double** %A.addr, align 8
  %41 = load i32, i32* %i, align 4
  %mul47 = mul nsw i32 %41, 1024
  %42 = load i32, i32* %j, align 4
  %add48 = add nsw i32 %mul47, %42
  %idxprom49 = sext i32 %add48 to i64
  %arrayidx50 = getelementptr inbounds double, double* %40, i64 %idxprom49
  %43 = load double, double* %arrayidx50, align 8
  %mul51 = fmul double %39, %43
  %44 = load double*, double** %R.addr, align 8
  %45 = load i32, i32* %k, align 4
  %mul52 = mul nsw i32 %45, 1024
  %46 = load i32, i32* %j, align 4
  %add53 = add nsw i32 %mul52, %46
  %idxprom54 = sext i32 %add53 to i64
  %arrayidx55 = getelementptr inbounds double, double* %44, i64 %idxprom54
  %47 = load double, double* %arrayidx55, align 8
  %add56 = fadd double %47, %mul51
  store double %add56, double* %arrayidx55, align 8
  br label %for.inc57

for.inc57:                                        ; preds = %for.body42
  %48 = load i32, i32* %i, align 4
  %inc58 = add nsw i32 %48, 1
  store i32 %inc58, i32* %i, align 4
  br label %for.cond40

for.end59:                                        ; preds = %for.cond40
  store i32 0, i32* %i, align 4
  br label %for.cond60

for.cond60:                                       ; preds = %for.inc80, %for.end59
  %49 = load i32, i32* %i, align 4
  %cmp61 = icmp slt i32 %49, 1024
  br i1 %cmp61, label %for.body62, label %for.end82

for.body62:                                       ; preds = %for.cond60
  %50 = load double*, double** %A.addr, align 8
  %51 = load i32, i32* %i, align 4
  %mul63 = mul nsw i32 %51, 1024
  %52 = load i32, i32* %j, align 4
  %add64 = add nsw i32 %mul63, %52
  %idxprom65 = sext i32 %add64 to i64
  %arrayidx66 = getelementptr inbounds double, double* %50, i64 %idxprom65
  %53 = load double, double* %arrayidx66, align 8
  %54 = load double*, double** %Q.addr, align 8
  %55 = load i32, i32* %i, align 4
  %mul67 = mul nsw i32 %55, 1024
  %56 = load i32, i32* %k, align 4
  %add68 = add nsw i32 %mul67, %56
  %idxprom69 = sext i32 %add68 to i64
  %arrayidx70 = getelementptr inbounds double, double* %54, i64 %idxprom69
  %57 = load double, double* %arrayidx70, align 8
  %58 = load double*, double** %R.addr, align 8
  %59 = load i32, i32* %k, align 4
  %mul71 = mul nsw i32 %59, 1024
  %60 = load i32, i32* %j, align 4
  %add72 = add nsw i32 %mul71, %60
  %idxprom73 = sext i32 %add72 to i64
  %arrayidx74 = getelementptr inbounds double, double* %58, i64 %idxprom73
  %61 = load double, double* %arrayidx74, align 8
  %mul75 = fmul double %57, %61
  %sub = fsub double %53, %mul75
  %62 = load double*, double** %A.addr, align 8
  %63 = load i32, i32* %i, align 4
  %mul76 = mul nsw i32 %63, 1024
  %64 = load i32, i32* %j, align 4
  %add77 = add nsw i32 %mul76, %64
  %idxprom78 = sext i32 %add77 to i64
  %arrayidx79 = getelementptr inbounds double, double* %62, i64 %idxprom78
  store double %sub, double* %arrayidx79, align 8
  br label %for.inc80

for.inc80:                                        ; preds = %for.body62
  %65 = load i32, i32* %i, align 4
  %inc81 = add nsw i32 %65, 1
  store i32 %inc81, i32* %i, align 4
  br label %for.cond60

for.end82:                                        ; preds = %for.cond60
  br label %for.inc83

for.inc83:                                        ; preds = %for.end82
  %66 = load i32, i32* %j, align 4
  %inc84 = add nsw i32 %66, 1
  store i32 %inc84, i32* %j, align 4
  br label %for.cond33

for.end85:                                        ; preds = %for.cond33
  br label %for.inc86

for.inc86:                                        ; preds = %for.end85
  %67 = load i32, i32* %k, align 4
  %inc87 = add nsw i32 %67, 1
  store i32 %inc87, i32* %k, align 4
  br label %for.cond

for.end88:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sqrt.f64(double) #1

attributes #0 = { noinline nounwind optnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 8.0.0 (tags/RELEASE_800/final)"}
