; ModuleID = './ss_bc/cholesky.bc'
source_filename = "./ss_src/cholesky.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define void @cholesky(double* %A) #0 {
entry:
  %A.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  store double* %A, double** %A.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc55, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 1024
  br i1 %cmp, label %for.body, label %for.end57

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc24, %for.body
  %1 = load i32, i32* %j, align 4
  %2 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %1, %2
  br i1 %cmp2, label %for.body3, label %for.end26

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %3 = load i32, i32* %k, align 4
  %4 = load i32, i32* %j, align 4
  %cmp5 = icmp slt i32 %3, %4
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %5 = load double*, double** %A.addr, align 8
  %6 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %6, 1024
  %7 = load i32, i32* %k, align 4
  %add = add nsw i32 %mul, %7
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds double, double* %5, i64 %idxprom
  %8 = load double, double* %arrayidx, align 8
  %9 = load double*, double** %A.addr, align 8
  %10 = load i32, i32* %j, align 4
  %mul7 = mul nsw i32 %10, 1024
  %11 = load i32, i32* %k, align 4
  %add8 = add nsw i32 %mul7, %11
  %idxprom9 = sext i32 %add8 to i64
  %arrayidx10 = getelementptr inbounds double, double* %9, i64 %idxprom9
  %12 = load double, double* %arrayidx10, align 8
  %mul11 = fmul double %8, %12
  %13 = load double*, double** %A.addr, align 8
  %14 = load i32, i32* %i, align 4
  %mul12 = mul nsw i32 %14, 1024
  %15 = load i32, i32* %j, align 4
  %add13 = add nsw i32 %mul12, %15
  %idxprom14 = sext i32 %add13 to i64
  %arrayidx15 = getelementptr inbounds double, double* %13, i64 %idxprom14
  %16 = load double, double* %arrayidx15, align 8
  %sub = fsub double %16, %mul11
  store double %sub, double* %arrayidx15, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %17 = load i32, i32* %k, align 4
  %inc = add nsw i32 %17, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  %18 = load double*, double** %A.addr, align 8
  %19 = load i32, i32* %j, align 4
  %mul16 = mul nsw i32 %19, 1024
  %20 = load i32, i32* %j, align 4
  %add17 = add nsw i32 %mul16, %20
  %idxprom18 = sext i32 %add17 to i64
  %arrayidx19 = getelementptr inbounds double, double* %18, i64 %idxprom18
  %21 = load double, double* %arrayidx19, align 8
  %22 = load double*, double** %A.addr, align 8
  %23 = load i32, i32* %i, align 4
  %mul20 = mul nsw i32 %23, 1024
  %24 = load i32, i32* %j, align 4
  %add21 = add nsw i32 %mul20, %24
  %idxprom22 = sext i32 %add21 to i64
  %arrayidx23 = getelementptr inbounds double, double* %22, i64 %idxprom22
  %25 = load double, double* %arrayidx23, align 8
  %div = fdiv double %25, %21
  store double %div, double* %arrayidx23, align 8
  br label %for.inc24

for.inc24:                                        ; preds = %for.end
  %26 = load i32, i32* %j, align 4
  %inc25 = add nsw i32 %26, 1
  store i32 %inc25, i32* %j, align 4
  br label %for.cond1

for.end26:                                        ; preds = %for.cond1
  store i32 0, i32* %k, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc44, %for.end26
  %27 = load i32, i32* %k, align 4
  %28 = load i32, i32* %i, align 4
  %cmp28 = icmp slt i32 %27, %28
  br i1 %cmp28, label %for.body29, label %for.end46

for.body29:                                       ; preds = %for.cond27
  %29 = load double*, double** %A.addr, align 8
  %30 = load i32, i32* %i, align 4
  %mul30 = mul nsw i32 %30, 1024
  %31 = load i32, i32* %k, align 4
  %add31 = add nsw i32 %mul30, %31
  %idxprom32 = sext i32 %add31 to i64
  %arrayidx33 = getelementptr inbounds double, double* %29, i64 %idxprom32
  %32 = load double, double* %arrayidx33, align 8
  %33 = load double*, double** %A.addr, align 8
  %34 = load i32, i32* %i, align 4
  %mul34 = mul nsw i32 %34, 1024
  %35 = load i32, i32* %k, align 4
  %add35 = add nsw i32 %mul34, %35
  %idxprom36 = sext i32 %add35 to i64
  %arrayidx37 = getelementptr inbounds double, double* %33, i64 %idxprom36
  %36 = load double, double* %arrayidx37, align 8
  %mul38 = fmul double %32, %36
  %37 = load double*, double** %A.addr, align 8
  %38 = load i32, i32* %i, align 4
  %mul39 = mul nsw i32 %38, 1024
  %39 = load i32, i32* %i, align 4
  %add40 = add nsw i32 %mul39, %39
  %idxprom41 = sext i32 %add40 to i64
  %arrayidx42 = getelementptr inbounds double, double* %37, i64 %idxprom41
  %40 = load double, double* %arrayidx42, align 8
  %sub43 = fsub double %40, %mul38
  store double %sub43, double* %arrayidx42, align 8
  br label %for.inc44

for.inc44:                                        ; preds = %for.body29
  %41 = load i32, i32* %k, align 4
  %inc45 = add nsw i32 %41, 1
  store i32 %inc45, i32* %k, align 4
  br label %for.cond27

for.end46:                                        ; preds = %for.cond27
  %42 = load double*, double** %A.addr, align 8
  %43 = load i32, i32* %i, align 4
  %mul47 = mul nsw i32 %43, 1024
  %44 = load i32, i32* %i, align 4
  %add48 = add nsw i32 %mul47, %44
  %idxprom49 = sext i32 %add48 to i64
  %arrayidx50 = getelementptr inbounds double, double* %42, i64 %idxprom49
  %45 = load double, double* %arrayidx50, align 8
  %call = call double @sqrt(double %45) #2
  %46 = load double*, double** %A.addr, align 8
  %47 = load i32, i32* %i, align 4
  %mul51 = mul nsw i32 %47, 1024
  %48 = load i32, i32* %i, align 4
  %add52 = add nsw i32 %mul51, %48
  %idxprom53 = sext i32 %add52 to i64
  %arrayidx54 = getelementptr inbounds double, double* %46, i64 %idxprom53
  store double %call, double* %arrayidx54, align 8
  br label %for.inc55

for.inc55:                                        ; preds = %for.end46
  %49 = load i32, i32* %i, align 4
  %inc56 = add nsw i32 %49, 1
  store i32 %inc56, i32* %i, align 4
  br label %for.cond

for.end57:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind
declare double @sqrt(double) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0 (tags/RELEASE_600/final)"}
