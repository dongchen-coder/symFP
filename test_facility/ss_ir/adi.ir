; ModuleID = './ss_bc/adi.bc'
source_filename = "./ss_src/adi.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @adi(double* %p, double* %q, double* %v, double* %u) #0 {
entry:
  %p.addr = alloca double*, align 8
  %q.addr = alloca double*, align 8
  %v.addr = alloca double*, align 8
  %u.addr = alloca double*, align 8
  %t = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %DX = alloca double, align 8
  %DY = alloca double, align 8
  %DT = alloca double, align 8
  %B1 = alloca double, align 8
  %B2 = alloca double, align 8
  %mul1 = alloca double, align 8
  %mul2 = alloca double, align 8
  %a = alloca double, align 8
  %b = alloca double, align 8
  %c = alloca double, align 8
  %d = alloca double, align 8
  %e = alloca double, align 8
  %f = alloca double, align 8
  store double* %p, double** %p.addr, align 8
  store double* %q, double** %q.addr, align 8
  store double* %v, double** %v.addr, align 8
  store double* %u, double** %u.addr, align 8
  store double 0x3F20000000000000, double* %DX, align 8
  store double 0x3F20000000000000, double* %DY, align 8
  store double 2.000000e-02, double* %DT, align 8
  store double 2.000000e+00, double* %B1, align 8
  store double 1.000000e+00, double* %B2, align 8
  %0 = load double, double* %B1, align 8
  %1 = load double, double* %DT, align 8
  %mul = fmul double %0, %1
  %2 = load double, double* %DX, align 8
  %3 = load double, double* %DX, align 8
  %mul3 = fmul double %2, %3
  %div = fdiv double %mul, %mul3
  store double %div, double* %mul1, align 8
  %4 = load double, double* %B2, align 8
  %5 = load double, double* %DT, align 8
  %mul4 = fmul double %4, %5
  %6 = load double, double* %DY, align 8
  %7 = load double, double* %DY, align 8
  %mul5 = fmul double %6, %7
  %div6 = fdiv double %mul4, %mul5
  store double %div6, double* %mul2, align 8
  %8 = load double, double* %mul1, align 8
  %fneg = fneg double %8
  %div7 = fdiv double %fneg, 2.000000e+00
  store double %div7, double* %a, align 8
  %9 = load double, double* %mul1, align 8
  %add = fadd double 1.000000e+00, %9
  store double %add, double* %b, align 8
  %10 = load double, double* %a, align 8
  store double %10, double* %c, align 8
  %11 = load double, double* %mul2, align 8
  %fneg8 = fneg double %11
  %div9 = fdiv double %fneg8, 2.000000e+00
  store double %div9, double* %d, align 8
  %12 = load double, double* %mul2, align 8
  %add10 = fadd double 1.000000e+00, %12
  store double %add10, double* %e, align 8
  %13 = load double, double* %d, align 8
  store double %13, double* %f, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc127, %entry
  %14 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %14, 8190
  br i1 %cmp, label %for.body, label %for.end129

for.body:                                         ; preds = %for.cond
  %15 = load double*, double** %v.addr, align 8
  %16 = load i32, i32* %i, align 4
  %add11 = add nsw i32 0, %16
  %add12 = add nsw i32 %add11, 1
  %idxprom = sext i32 %add12 to i64
  %arrayidx = getelementptr inbounds double, double* %15, i64 %idxprom
  store double 1.000000e+00, double* %arrayidx, align 8
  %17 = load double*, double** %p.addr, align 8
  %18 = load i32, i32* %i, align 4
  %add13 = add nsw i32 %18, 1
  %mul14 = mul nsw i32 %add13, 8192
  %add15 = add nsw i32 %mul14, 0
  %idxprom16 = sext i32 %add15 to i64
  %arrayidx17 = getelementptr inbounds double, double* %17, i64 %idxprom16
  store double 0.000000e+00, double* %arrayidx17, align 8
  %19 = load double*, double** %v.addr, align 8
  %20 = load i32, i32* %i, align 4
  %add18 = add nsw i32 %20, 1
  %add19 = add nsw i32 0, %add18
  %idxprom20 = sext i32 %add19 to i64
  %arrayidx21 = getelementptr inbounds double, double* %19, i64 %idxprom20
  %21 = load double, double* %arrayidx21, align 8
  %22 = load double*, double** %q.addr, align 8
  %23 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %23, 1
  %mul23 = mul nsw i32 %add22, 8192
  %add24 = add nsw i32 %mul23, 0
  %idxprom25 = sext i32 %add24 to i64
  %arrayidx26 = getelementptr inbounds double, double* %22, i64 %idxprom25
  store double %21, double* %arrayidx26, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc, %for.body
  %24 = load i32, i32* %j, align 4
  %cmp28 = icmp slt i32 %24, 8190
  br i1 %cmp28, label %for.body29, label %for.end

for.body29:                                       ; preds = %for.cond27
  %25 = load double, double* %c, align 8
  %fneg30 = fneg double %25
  %26 = load double, double* %a, align 8
  %27 = load double*, double** %p.addr, align 8
  %28 = load i32, i32* %i, align 4
  %add31 = add nsw i32 %28, 1
  %mul32 = mul nsw i32 %add31, 8192
  %29 = load i32, i32* %j, align 4
  %add33 = add nsw i32 %mul32, %29
  %idxprom34 = sext i32 %add33 to i64
  %arrayidx35 = getelementptr inbounds double, double* %27, i64 %idxprom34
  %30 = load double, double* %arrayidx35, align 8
  %mul36 = fmul double %26, %30
  %31 = load double, double* %b, align 8
  %add37 = fadd double %mul36, %31
  %div38 = fdiv double %fneg30, %add37
  %32 = load double*, double** %p.addr, align 8
  %33 = load i32, i32* %i, align 4
  %add39 = add nsw i32 %33, 1
  %mul40 = mul nsw i32 %add39, 8192
  %34 = load i32, i32* %j, align 4
  %add41 = add nsw i32 %mul40, %34
  %add42 = add nsw i32 %add41, 1
  %idxprom43 = sext i32 %add42 to i64
  %arrayidx44 = getelementptr inbounds double, double* %32, i64 %idxprom43
  store double %div38, double* %arrayidx44, align 8
  %35 = load double, double* %d, align 8
  %fneg45 = fneg double %35
  %36 = load double*, double** %u.addr, align 8
  %37 = load i32, i32* %j, align 4
  %add46 = add nsw i32 %37, 1
  %mul47 = mul nsw i32 %add46, 8192
  %38 = load i32, i32* %i, align 4
  %add48 = add nsw i32 %mul47, %38
  %idxprom49 = sext i32 %add48 to i64
  %arrayidx50 = getelementptr inbounds double, double* %36, i64 %idxprom49
  %39 = load double, double* %arrayidx50, align 8
  %mul51 = fmul double %fneg45, %39
  %40 = load double, double* %d, align 8
  %mul52 = fmul double 2.000000e+00, %40
  %add53 = fadd double 1.000000e+00, %mul52
  %41 = load double*, double** %u.addr, align 8
  %42 = load i32, i32* %j, align 4
  %add54 = add nsw i32 %42, 1
  %mul55 = mul nsw i32 %add54, 8192
  %43 = load i32, i32* %i, align 4
  %add56 = add nsw i32 %mul55, %43
  %add57 = add nsw i32 %add56, 1
  %idxprom58 = sext i32 %add57 to i64
  %arrayidx59 = getelementptr inbounds double, double* %41, i64 %idxprom58
  %44 = load double, double* %arrayidx59, align 8
  %mul60 = fmul double %add53, %44
  %add61 = fadd double %mul51, %mul60
  %45 = load double, double* %f, align 8
  %46 = load double*, double** %u.addr, align 8
  %47 = load i32, i32* %j, align 4
  %add62 = add nsw i32 %47, 1
  %mul63 = mul nsw i32 %add62, 8192
  %48 = load i32, i32* %i, align 4
  %add64 = add nsw i32 %mul63, %48
  %add65 = add nsw i32 %add64, 2
  %idxprom66 = sext i32 %add65 to i64
  %arrayidx67 = getelementptr inbounds double, double* %46, i64 %idxprom66
  %49 = load double, double* %arrayidx67, align 8
  %mul68 = fmul double %45, %49
  %sub = fsub double %add61, %mul68
  %50 = load double, double* %a, align 8
  %51 = load double*, double** %q.addr, align 8
  %52 = load i32, i32* %i, align 4
  %add69 = add nsw i32 %52, 1
  %mul70 = mul nsw i32 %add69, 8192
  %53 = load i32, i32* %j, align 4
  %add71 = add nsw i32 %mul70, %53
  %idxprom72 = sext i32 %add71 to i64
  %arrayidx73 = getelementptr inbounds double, double* %51, i64 %idxprom72
  %54 = load double, double* %arrayidx73, align 8
  %mul74 = fmul double %50, %54
  %sub75 = fsub double %sub, %mul74
  %55 = load double, double* %a, align 8
  %56 = load double*, double** %p.addr, align 8
  %57 = load i32, i32* %i, align 4
  %add76 = add nsw i32 %57, 1
  %mul77 = mul nsw i32 %add76, 8192
  %58 = load i32, i32* %j, align 4
  %add78 = add nsw i32 %mul77, %58
  %idxprom79 = sext i32 %add78 to i64
  %arrayidx80 = getelementptr inbounds double, double* %56, i64 %idxprom79
  %59 = load double, double* %arrayidx80, align 8
  %mul81 = fmul double %55, %59
  %60 = load double, double* %b, align 8
  %add82 = fadd double %mul81, %60
  %div83 = fdiv double %sub75, %add82
  %61 = load double*, double** %q.addr, align 8
  %62 = load i32, i32* %i, align 4
  %add84 = add nsw i32 %62, 1
  %mul85 = mul nsw i32 %add84, 8192
  %63 = load i32, i32* %j, align 4
  %add86 = add nsw i32 %mul85, %63
  %add87 = add nsw i32 %add86, 1
  %idxprom88 = sext i32 %add87 to i64
  %arrayidx89 = getelementptr inbounds double, double* %61, i64 %idxprom88
  store double %div83, double* %arrayidx89, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body29
  %64 = load i32, i32* %j, align 4
  %inc = add nsw i32 %64, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond27

for.end:                                          ; preds = %for.cond27
  %65 = load double*, double** %v.addr, align 8
  %66 = load i32, i32* %i, align 4
  %add90 = add nsw i32 %66, 1
  %add91 = add nsw i32 67100672, %add90
  %idxprom92 = sext i32 %add91 to i64
  %arrayidx93 = getelementptr inbounds double, double* %65, i64 %idxprom92
  store double 1.000000e+00, double* %arrayidx93, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond94

for.cond94:                                       ; preds = %for.inc124, %for.end
  %67 = load i32, i32* %j, align 4
  %cmp95 = icmp slt i32 %67, 8190
  br i1 %cmp95, label %for.body96, label %for.end126

for.body96:                                       ; preds = %for.cond94
  %68 = load double*, double** %p.addr, align 8
  %69 = load i32, i32* %i, align 4
  %add97 = add nsw i32 %69, 1
  %mul98 = mul nsw i32 %add97, 8192
  %70 = load i32, i32* %j, align 4
  %sub99 = sub nsw i32 8190, %70
  %add100 = add nsw i32 %mul98, %sub99
  %idxprom101 = sext i32 %add100 to i64
  %arrayidx102 = getelementptr inbounds double, double* %68, i64 %idxprom101
  %71 = load double, double* %arrayidx102, align 8
  %72 = load double*, double** %v.addr, align 8
  %73 = load i32, i32* %j, align 4
  %sub103 = sub nsw i32 8191, %73
  %mul104 = mul nsw i32 %sub103, 8192
  %74 = load i32, i32* %i, align 4
  %add105 = add nsw i32 %mul104, %74
  %add106 = add nsw i32 %add105, 1
  %idxprom107 = sext i32 %add106 to i64
  %arrayidx108 = getelementptr inbounds double, double* %72, i64 %idxprom107
  %75 = load double, double* %arrayidx108, align 8
  %mul109 = fmul double %71, %75
  %76 = load double*, double** %q.addr, align 8
  %77 = load i32, i32* %i, align 4
  %add110 = add nsw i32 %77, 1
  %mul111 = mul nsw i32 %add110, 8192
  %add112 = add nsw i32 %mul111, 8192
  %sub113 = sub nsw i32 %add112, 2
  %78 = load i32, i32* %j, align 4
  %sub114 = sub nsw i32 %sub113, %78
  %idxprom115 = sext i32 %sub114 to i64
  %arrayidx116 = getelementptr inbounds double, double* %76, i64 %idxprom115
  %79 = load double, double* %arrayidx116, align 8
  %add117 = fadd double %mul109, %79
  %80 = load double*, double** %v.addr, align 8
  %81 = load i32, i32* %j, align 4
  %sub118 = sub nsw i32 8190, %81
  %mul119 = mul nsw i32 %sub118, 8192
  %82 = load i32, i32* %i, align 4
  %add120 = add nsw i32 %82, 1
  %add121 = add nsw i32 %mul119, %add120
  %idxprom122 = sext i32 %add121 to i64
  %arrayidx123 = getelementptr inbounds double, double* %80, i64 %idxprom122
  store double %add117, double* %arrayidx123, align 8
  br label %for.inc124

for.inc124:                                       ; preds = %for.body96
  %83 = load i32, i32* %j, align 4
  %inc125 = add nsw i32 %83, 1
  store i32 %inc125, i32* %j, align 4
  br label %for.cond94

for.end126:                                       ; preds = %for.cond94
  br label %for.inc127

for.inc127:                                       ; preds = %for.end126
  %84 = load i32, i32* %i, align 4
  %inc128 = add nsw i32 %84, 1
  store i32 %inc128, i32* %i, align 4
  br label %for.cond

for.end129:                                       ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond130

for.cond130:                                      ; preds = %for.inc262, %for.end129
  %85 = load i32, i32* %i, align 4
  %cmp131 = icmp slt i32 %85, 8190
  br i1 %cmp131, label %for.body132, label %for.end264

for.body132:                                      ; preds = %for.cond130
  %86 = load double*, double** %u.addr, align 8
  %87 = load i32, i32* %i, align 4
  %add133 = add nsw i32 %87, 1
  %mul134 = mul nsw i32 %add133, 8192
  %add135 = add nsw i32 %mul134, 0
  %idxprom136 = sext i32 %add135 to i64
  %arrayidx137 = getelementptr inbounds double, double* %86, i64 %idxprom136
  store double 1.000000e+00, double* %arrayidx137, align 8
  %88 = load double*, double** %p.addr, align 8
  %89 = load i32, i32* %i, align 4
  %add138 = add nsw i32 %89, 1
  %mul139 = mul nsw i32 %add138, 8192
  %add140 = add nsw i32 %mul139, 0
  %idxprom141 = sext i32 %add140 to i64
  %arrayidx142 = getelementptr inbounds double, double* %88, i64 %idxprom141
  store double 0.000000e+00, double* %arrayidx142, align 8
  %90 = load double*, double** %u.addr, align 8
  %91 = load i32, i32* %i, align 4
  %add143 = add nsw i32 %91, 1
  %mul144 = mul nsw i32 %add143, 8192
  %add145 = add nsw i32 %mul144, 0
  %idxprom146 = sext i32 %add145 to i64
  %arrayidx147 = getelementptr inbounds double, double* %90, i64 %idxprom146
  %92 = load double, double* %arrayidx147, align 8
  %93 = load double*, double** %q.addr, align 8
  %94 = load i32, i32* %i, align 4
  %add148 = add nsw i32 %94, 1
  %mul149 = mul nsw i32 %add148, 8192
  %add150 = add nsw i32 %mul149, 0
  %idxprom151 = sext i32 %add150 to i64
  %arrayidx152 = getelementptr inbounds double, double* %93, i64 %idxprom151
  store double %92, double* %arrayidx152, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond153

for.cond153:                                      ; preds = %for.inc217, %for.body132
  %95 = load i32, i32* %j, align 4
  %cmp154 = icmp slt i32 %95, 8190
  br i1 %cmp154, label %for.body155, label %for.end219

for.body155:                                      ; preds = %for.cond153
  %96 = load double, double* %f, align 8
  %fneg156 = fneg double %96
  %97 = load double, double* %d, align 8
  %98 = load double*, double** %p.addr, align 8
  %99 = load i32, i32* %i, align 4
  %add157 = add nsw i32 %99, 1
  %mul158 = mul nsw i32 %add157, 8192
  %100 = load i32, i32* %j, align 4
  %add159 = add nsw i32 %mul158, %100
  %idxprom160 = sext i32 %add159 to i64
  %arrayidx161 = getelementptr inbounds double, double* %98, i64 %idxprom160
  %101 = load double, double* %arrayidx161, align 8
  %mul162 = fmul double %97, %101
  %102 = load double, double* %e, align 8
  %add163 = fadd double %mul162, %102
  %div164 = fdiv double %fneg156, %add163
  %103 = load double*, double** %p.addr, align 8
  %104 = load i32, i32* %i, align 4
  %add165 = add nsw i32 %104, 1
  %mul166 = mul nsw i32 %add165, 8192
  %105 = load i32, i32* %j, align 4
  %add167 = add nsw i32 %mul166, %105
  %add168 = add nsw i32 %add167, 1
  %idxprom169 = sext i32 %add168 to i64
  %arrayidx170 = getelementptr inbounds double, double* %103, i64 %idxprom169
  store double %div164, double* %arrayidx170, align 8
  %106 = load double, double* %a, align 8
  %fneg171 = fneg double %106
  %107 = load double*, double** %v.addr, align 8
  %108 = load i32, i32* %i, align 4
  %mul172 = mul nsw i32 %108, 8192
  %109 = load i32, i32* %j, align 4
  %add173 = add nsw i32 %mul172, %109
  %add174 = add nsw i32 %add173, 1
  %idxprom175 = sext i32 %add174 to i64
  %arrayidx176 = getelementptr inbounds double, double* %107, i64 %idxprom175
  %110 = load double, double* %arrayidx176, align 8
  %mul177 = fmul double %fneg171, %110
  %111 = load double, double* %a, align 8
  %mul178 = fmul double 2.000000e+00, %111
  %add179 = fadd double 1.000000e+00, %mul178
  %112 = load double*, double** %v.addr, align 8
  %113 = load i32, i32* %i, align 4
  %add180 = add nsw i32 %113, 1
  %mul181 = mul nsw i32 %add180, 8192
  %114 = load i32, i32* %j, align 4
  %add182 = add nsw i32 %mul181, %114
  %add183 = add nsw i32 %add182, 1
  %idxprom184 = sext i32 %add183 to i64
  %arrayidx185 = getelementptr inbounds double, double* %112, i64 %idxprom184
  %115 = load double, double* %arrayidx185, align 8
  %mul186 = fmul double %add179, %115
  %add187 = fadd double %mul177, %mul186
  %116 = load double, double* %c, align 8
  %117 = load double*, double** %v.addr, align 8
  %118 = load i32, i32* %i, align 4
  %add188 = add nsw i32 %118, 2
  %mul189 = mul nsw i32 %add188, 8192
  %119 = load i32, i32* %j, align 4
  %add190 = add nsw i32 %mul189, %119
  %add191 = add nsw i32 %add190, 1
  %idxprom192 = sext i32 %add191 to i64
  %arrayidx193 = getelementptr inbounds double, double* %117, i64 %idxprom192
  %120 = load double, double* %arrayidx193, align 8
  %mul194 = fmul double %116, %120
  %sub195 = fsub double %add187, %mul194
  %121 = load double, double* %d, align 8
  %122 = load double*, double** %q.addr, align 8
  %123 = load i32, i32* %i, align 4
  %add196 = add nsw i32 %123, 1
  %mul197 = mul nsw i32 %add196, 8192
  %124 = load i32, i32* %j, align 4
  %add198 = add nsw i32 %mul197, %124
  %idxprom199 = sext i32 %add198 to i64
  %arrayidx200 = getelementptr inbounds double, double* %122, i64 %idxprom199
  %125 = load double, double* %arrayidx200, align 8
  %mul201 = fmul double %121, %125
  %sub202 = fsub double %sub195, %mul201
  %126 = load double, double* %d, align 8
  %127 = load double*, double** %p.addr, align 8
  %128 = load i32, i32* %i, align 4
  %add203 = add nsw i32 %128, 1
  %mul204 = mul nsw i32 %add203, 8192
  %129 = load i32, i32* %j, align 4
  %add205 = add nsw i32 %mul204, %129
  %idxprom206 = sext i32 %add205 to i64
  %arrayidx207 = getelementptr inbounds double, double* %127, i64 %idxprom206
  %130 = load double, double* %arrayidx207, align 8
  %mul208 = fmul double %126, %130
  %131 = load double, double* %e, align 8
  %add209 = fadd double %mul208, %131
  %div210 = fdiv double %sub202, %add209
  %132 = load double*, double** %q.addr, align 8
  %133 = load i32, i32* %i, align 4
  %add211 = add nsw i32 %133, 1
  %mul212 = mul nsw i32 %add211, 8192
  %134 = load i32, i32* %j, align 4
  %add213 = add nsw i32 %mul212, %134
  %add214 = add nsw i32 %add213, 1
  %idxprom215 = sext i32 %add214 to i64
  %arrayidx216 = getelementptr inbounds double, double* %132, i64 %idxprom215
  store double %div210, double* %arrayidx216, align 8
  br label %for.inc217

for.inc217:                                       ; preds = %for.body155
  %135 = load i32, i32* %j, align 4
  %inc218 = add nsw i32 %135, 1
  store i32 %inc218, i32* %j, align 4
  br label %for.cond153

for.end219:                                       ; preds = %for.cond153
  %136 = load double*, double** %u.addr, align 8
  %137 = load i32, i32* %i, align 4
  %add220 = add nsw i32 %137, 1
  %mul221 = mul nsw i32 %add220, 8192
  %add222 = add nsw i32 %mul221, 8192
  %sub223 = sub nsw i32 %add222, 1
  %idxprom224 = sext i32 %sub223 to i64
  %arrayidx225 = getelementptr inbounds double, double* %136, i64 %idxprom224
  store double 1.000000e+00, double* %arrayidx225, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond226

for.cond226:                                      ; preds = %for.inc259, %for.end219
  %138 = load i32, i32* %j, align 4
  %cmp227 = icmp slt i32 %138, 8190
  br i1 %cmp227, label %for.body228, label %for.end261

for.body228:                                      ; preds = %for.cond226
  %139 = load double*, double** %p.addr, align 8
  %140 = load i32, i32* %i, align 4
  %add229 = add nsw i32 %140, 1
  %mul230 = mul nsw i32 %add229, 8192
  %add231 = add nsw i32 %mul230, 8192
  %sub232 = sub nsw i32 %add231, 2
  %141 = load i32, i32* %j, align 4
  %sub233 = sub nsw i32 %sub232, %141
  %idxprom234 = sext i32 %sub233 to i64
  %arrayidx235 = getelementptr inbounds double, double* %139, i64 %idxprom234
  %142 = load double, double* %arrayidx235, align 8
  %143 = load double*, double** %u.addr, align 8
  %144 = load i32, i32* %i, align 4
  %add236 = add nsw i32 %144, 1
  %mul237 = mul nsw i32 %add236, 8192
  %add238 = add nsw i32 %mul237, 8192
  %sub239 = sub nsw i32 %add238, 1
  %145 = load i32, i32* %j, align 4
  %sub240 = sub nsw i32 %sub239, %145
  %idxprom241 = sext i32 %sub240 to i64
  %arrayidx242 = getelementptr inbounds double, double* %143, i64 %idxprom241
  %146 = load double, double* %arrayidx242, align 8
  %mul243 = fmul double %142, %146
  %147 = load double*, double** %q.addr, align 8
  %148 = load i32, i32* %i, align 4
  %add244 = add nsw i32 %148, 1
  %mul245 = mul nsw i32 %add244, 8192
  %add246 = add nsw i32 %mul245, 8192
  %sub247 = sub nsw i32 %add246, 2
  %149 = load i32, i32* %j, align 4
  %sub248 = sub nsw i32 %sub247, %149
  %idxprom249 = sext i32 %sub248 to i64
  %arrayidx250 = getelementptr inbounds double, double* %147, i64 %idxprom249
  %150 = load double, double* %arrayidx250, align 8
  %add251 = fadd double %mul243, %150
  %151 = load double*, double** %u.addr, align 8
  %152 = load i32, i32* %i, align 4
  %add252 = add nsw i32 %152, 1
  %mul253 = mul nsw i32 %add252, 8192
  %add254 = add nsw i32 %mul253, 8192
  %sub255 = sub nsw i32 %add254, 2
  %153 = load i32, i32* %j, align 4
  %sub256 = sub nsw i32 %sub255, %153
  %idxprom257 = sext i32 %sub256 to i64
  %arrayidx258 = getelementptr inbounds double, double* %151, i64 %idxprom257
  store double %add251, double* %arrayidx258, align 8
  br label %for.inc259

for.inc259:                                       ; preds = %for.body228
  %154 = load i32, i32* %j, align 4
  %inc260 = add nsw i32 %154, 1
  store i32 %inc260, i32* %j, align 4
  br label %for.cond226

for.end261:                                       ; preds = %for.cond226
  br label %for.inc262

for.inc262:                                       ; preds = %for.end261
  %155 = load i32, i32* %i, align 4
  %inc263 = add nsw i32 %155, 1
  store i32 %inc263, i32* %i, align 4
  br label %for.cond130

for.end264:                                       ; preds = %for.cond130
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.1.0 (https://github.com/llvm/llvm-project.git 0e442b077b9c6fe75076dc7e1cae5de1a693bc9b)"}
