; ModuleID = './ss_bc/adi.bc'
source_filename = "./ss_src/adi.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define void @adi(double* %p, double* %q, double* %v, double* %u) #0 {
entry:
  %p.addr = alloca double*, align 8
  %q.addr = alloca double*, align 8
  %v.addr = alloca double*, align 8
  %u.addr = alloca double*, align 8
  %t = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %DX = alloca double, align 8
  %DY = alloca double, align 8
  %DT = alloca double, align 8
  %B1 = alloca double, align 8
  %B2 = alloca double, align 8
  %mul1 = alloca double, align 8
  %mul2 = alloca double, align 8
  %a = alloca double, align 8
  %b = alloca double, align 8
  %c = alloca double, align 8
  %d = alloca double, align 8
  %e = alloca double, align 8
  %f = alloca double, align 8
  store double* %p, double** %p.addr, align 8
  store double* %q, double** %q.addr, align 8
  store double* %v, double** %v.addr, align 8
  store double* %u, double** %u.addr, align 8
  store double 0x3F40000000000000, double* %DX, align 8
  store double 0x3F40000000000000, double* %DY, align 8
  store double 2.000000e-02, double* %DT, align 8
  store double 2.000000e+00, double* %B1, align 8
  store double 1.000000e+00, double* %B2, align 8
  %0 = load double, double* %B1, align 8
  %1 = load double, double* %DT, align 8
  %mul = fmul double %0, %1
  %2 = load double, double* %DX, align 8
  %3 = load double, double* %DX, align 8
  %mul3 = fmul double %2, %3
  %div = fdiv double %mul, %mul3
  store double %div, double* %mul1, align 8
  %4 = load double, double* %B2, align 8
  %5 = load double, double* %DT, align 8
  %mul4 = fmul double %4, %5
  %6 = load double, double* %DY, align 8
  %7 = load double, double* %DY, align 8
  %mul5 = fmul double %6, %7
  %div6 = fdiv double %mul4, %mul5
  store double %div6, double* %mul2, align 8
  %8 = load double, double* %mul1, align 8
  %sub = fsub double -0.000000e+00, %8
  %div7 = fdiv double %sub, 2.000000e+00
  store double %div7, double* %a, align 8
  %9 = load double, double* %mul1, align 8
  %add = fadd double 1.000000e+00, %9
  store double %add, double* %b, align 8
  %10 = load double, double* %a, align 8
  store double %10, double* %c, align 8
  %11 = load double, double* %mul2, align 8
  %sub8 = fsub double -0.000000e+00, %11
  %div9 = fdiv double %sub8, 2.000000e+00
  store double %div9, double* %d, align 8
  %12 = load double, double* %mul2, align 8
  %add10 = fadd double 1.000000e+00, %12
  store double %add10, double* %e, align 8
  %13 = load double, double* %d, align 8
  store double %13, double* %f, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc128, %entry
  %14 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %14, 2046
  br i1 %cmp, label %for.body, label %for.end130

for.body:                                         ; preds = %for.cond
  %15 = load double*, double** %v.addr, align 8
  %16 = load i32, i32* %i, align 4
  %add11 = add nsw i32 0, %16
  %add12 = add nsw i32 %add11, 1
  %idxprom = sext i32 %add12 to i64
  %arrayidx = getelementptr inbounds double, double* %15, i64 %idxprom
  store double 1.000000e+00, double* %arrayidx, align 8
  %17 = load double*, double** %p.addr, align 8
  %18 = load i32, i32* %i, align 4
  %add13 = add nsw i32 %18, 1
  %mul14 = mul nsw i32 %add13, 2048
  %add15 = add nsw i32 %mul14, 0
  %idxprom16 = sext i32 %add15 to i64
  %arrayidx17 = getelementptr inbounds double, double* %17, i64 %idxprom16
  store double 0.000000e+00, double* %arrayidx17, align 8
  %19 = load double*, double** %v.addr, align 8
  %20 = load i32, i32* %i, align 4
  %add18 = add nsw i32 %20, 1
  %add19 = add nsw i32 0, %add18
  %idxprom20 = sext i32 %add19 to i64
  %arrayidx21 = getelementptr inbounds double, double* %19, i64 %idxprom20
  %21 = load double, double* %arrayidx21, align 8
  %22 = load double*, double** %q.addr, align 8
  %23 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %23, 1
  %mul23 = mul nsw i32 %add22, 2048
  %add24 = add nsw i32 %mul23, 0
  %idxprom25 = sext i32 %add24 to i64
  %arrayidx26 = getelementptr inbounds double, double* %22, i64 %idxprom25
  store double %21, double* %arrayidx26, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc, %for.body
  %24 = load i32, i32* %j, align 4
  %cmp28 = icmp slt i32 %24, 2046
  br i1 %cmp28, label %for.body29, label %for.end

for.body29:                                       ; preds = %for.cond27
  %25 = load double, double* %c, align 8
  %sub30 = fsub double -0.000000e+00, %25
  %26 = load double, double* %a, align 8
  %27 = load double*, double** %p.addr, align 8
  %28 = load i32, i32* %i, align 4
  %add31 = add nsw i32 %28, 1
  %mul32 = mul nsw i32 %add31, 2048
  %29 = load i32, i32* %j, align 4
  %add33 = add nsw i32 %mul32, %29
  %idxprom34 = sext i32 %add33 to i64
  %arrayidx35 = getelementptr inbounds double, double* %27, i64 %idxprom34
  %30 = load double, double* %arrayidx35, align 8
  %mul36 = fmul double %26, %30
  %31 = load double, double* %b, align 8
  %add37 = fadd double %mul36, %31
  %div38 = fdiv double %sub30, %add37
  %32 = load double*, double** %p.addr, align 8
  %33 = load i32, i32* %i, align 4
  %add39 = add nsw i32 %33, 1
  %mul40 = mul nsw i32 %add39, 2048
  %34 = load i32, i32* %j, align 4
  %add41 = add nsw i32 %mul40, %34
  %add42 = add nsw i32 %add41, 1
  %idxprom43 = sext i32 %add42 to i64
  %arrayidx44 = getelementptr inbounds double, double* %32, i64 %idxprom43
  store double %div38, double* %arrayidx44, align 8
  %35 = load double, double* %d, align 8
  %sub45 = fsub double -0.000000e+00, %35
  %36 = load double*, double** %u.addr, align 8
  %37 = load i32, i32* %j, align 4
  %add46 = add nsw i32 %37, 1
  %mul47 = mul nsw i32 %add46, 2048
  %38 = load i32, i32* %i, align 4
  %add48 = add nsw i32 %mul47, %38
  %idxprom49 = sext i32 %add48 to i64
  %arrayidx50 = getelementptr inbounds double, double* %36, i64 %idxprom49
  %39 = load double, double* %arrayidx50, align 8
  %mul51 = fmul double %sub45, %39
  %40 = load double, double* %d, align 8
  %mul52 = fmul double 2.000000e+00, %40
  %add53 = fadd double 1.000000e+00, %mul52
  %41 = load double*, double** %u.addr, align 8
  %42 = load i32, i32* %j, align 4
  %add54 = add nsw i32 %42, 1
  %mul55 = mul nsw i32 %add54, 2048
  %43 = load i32, i32* %i, align 4
  %add56 = add nsw i32 %mul55, %43
  %add57 = add nsw i32 %add56, 1
  %idxprom58 = sext i32 %add57 to i64
  %arrayidx59 = getelementptr inbounds double, double* %41, i64 %idxprom58
  %44 = load double, double* %arrayidx59, align 8
  %mul60 = fmul double %add53, %44
  %add61 = fadd double %mul51, %mul60
  %45 = load double, double* %f, align 8
  %46 = load double*, double** %u.addr, align 8
  %47 = load i32, i32* %j, align 4
  %add62 = add nsw i32 %47, 1
  %mul63 = mul nsw i32 %add62, 2048
  %48 = load i32, i32* %i, align 4
  %add64 = add nsw i32 %mul63, %48
  %add65 = add nsw i32 %add64, 2
  %idxprom66 = sext i32 %add65 to i64
  %arrayidx67 = getelementptr inbounds double, double* %46, i64 %idxprom66
  %49 = load double, double* %arrayidx67, align 8
  %mul68 = fmul double %45, %49
  %sub69 = fsub double %add61, %mul68
  %50 = load double, double* %a, align 8
  %51 = load double*, double** %q.addr, align 8
  %52 = load i32, i32* %i, align 4
  %add70 = add nsw i32 %52, 1
  %mul71 = mul nsw i32 %add70, 2048
  %53 = load i32, i32* %j, align 4
  %add72 = add nsw i32 %mul71, %53
  %idxprom73 = sext i32 %add72 to i64
  %arrayidx74 = getelementptr inbounds double, double* %51, i64 %idxprom73
  %54 = load double, double* %arrayidx74, align 8
  %mul75 = fmul double %50, %54
  %sub76 = fsub double %sub69, %mul75
  %55 = load double, double* %a, align 8
  %56 = load double*, double** %p.addr, align 8
  %57 = load i32, i32* %i, align 4
  %add77 = add nsw i32 %57, 1
  %mul78 = mul nsw i32 %add77, 2048
  %58 = load i32, i32* %j, align 4
  %add79 = add nsw i32 %mul78, %58
  %idxprom80 = sext i32 %add79 to i64
  %arrayidx81 = getelementptr inbounds double, double* %56, i64 %idxprom80
  %59 = load double, double* %arrayidx81, align 8
  %mul82 = fmul double %55, %59
  %60 = load double, double* %b, align 8
  %add83 = fadd double %mul82, %60
  %div84 = fdiv double %sub76, %add83
  %61 = load double*, double** %q.addr, align 8
  %62 = load i32, i32* %i, align 4
  %add85 = add nsw i32 %62, 1
  %mul86 = mul nsw i32 %add85, 2048
  %63 = load i32, i32* %j, align 4
  %add87 = add nsw i32 %mul86, %63
  %add88 = add nsw i32 %add87, 1
  %idxprom89 = sext i32 %add88 to i64
  %arrayidx90 = getelementptr inbounds double, double* %61, i64 %idxprom89
  store double %div84, double* %arrayidx90, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body29
  %64 = load i32, i32* %j, align 4
  %inc = add nsw i32 %64, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond27

for.end:                                          ; preds = %for.cond27
  %65 = load double*, double** %v.addr, align 8
  %66 = load i32, i32* %i, align 4
  %add91 = add nsw i32 %66, 1
  %add92 = add nsw i32 4192256, %add91
  %idxprom93 = sext i32 %add92 to i64
  %arrayidx94 = getelementptr inbounds double, double* %65, i64 %idxprom93
  store double 1.000000e+00, double* %arrayidx94, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond95

for.cond95:                                       ; preds = %for.inc125, %for.end
  %67 = load i32, i32* %j, align 4
  %cmp96 = icmp slt i32 %67, 2046
  br i1 %cmp96, label %for.body97, label %for.end127

for.body97:                                       ; preds = %for.cond95
  %68 = load double*, double** %p.addr, align 8
  %69 = load i32, i32* %i, align 4
  %add98 = add nsw i32 %69, 1
  %mul99 = mul nsw i32 %add98, 2048
  %70 = load i32, i32* %j, align 4
  %sub100 = sub nsw i32 2046, %70
  %add101 = add nsw i32 %mul99, %sub100
  %idxprom102 = sext i32 %add101 to i64
  %arrayidx103 = getelementptr inbounds double, double* %68, i64 %idxprom102
  %71 = load double, double* %arrayidx103, align 8
  %72 = load double*, double** %v.addr, align 8
  %73 = load i32, i32* %j, align 4
  %sub104 = sub nsw i32 2047, %73
  %mul105 = mul nsw i32 %sub104, 2048
  %74 = load i32, i32* %i, align 4
  %add106 = add nsw i32 %mul105, %74
  %add107 = add nsw i32 %add106, 1
  %idxprom108 = sext i32 %add107 to i64
  %arrayidx109 = getelementptr inbounds double, double* %72, i64 %idxprom108
  %75 = load double, double* %arrayidx109, align 8
  %mul110 = fmul double %71, %75
  %76 = load double*, double** %q.addr, align 8
  %77 = load i32, i32* %i, align 4
  %add111 = add nsw i32 %77, 1
  %mul112 = mul nsw i32 %add111, 2048
  %add113 = add nsw i32 %mul112, 2048
  %sub114 = sub nsw i32 %add113, 2
  %78 = load i32, i32* %j, align 4
  %sub115 = sub nsw i32 %sub114, %78
  %idxprom116 = sext i32 %sub115 to i64
  %arrayidx117 = getelementptr inbounds double, double* %76, i64 %idxprom116
  %79 = load double, double* %arrayidx117, align 8
  %add118 = fadd double %mul110, %79
  %80 = load double*, double** %v.addr, align 8
  %81 = load i32, i32* %j, align 4
  %sub119 = sub nsw i32 2046, %81
  %mul120 = mul nsw i32 %sub119, 2048
  %82 = load i32, i32* %i, align 4
  %add121 = add nsw i32 %82, 1
  %add122 = add nsw i32 %mul120, %add121
  %idxprom123 = sext i32 %add122 to i64
  %arrayidx124 = getelementptr inbounds double, double* %80, i64 %idxprom123
  store double %add118, double* %arrayidx124, align 8
  br label %for.inc125

for.inc125:                                       ; preds = %for.body97
  %83 = load i32, i32* %j, align 4
  %inc126 = add nsw i32 %83, 1
  store i32 %inc126, i32* %j, align 4
  br label %for.cond95

for.end127:                                       ; preds = %for.cond95
  br label %for.inc128

for.inc128:                                       ; preds = %for.end127
  %84 = load i32, i32* %i, align 4
  %inc129 = add nsw i32 %84, 1
  store i32 %inc129, i32* %i, align 4
  br label %for.cond

for.end130:                                       ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond131

for.cond131:                                      ; preds = %for.inc263, %for.end130
  %85 = load i32, i32* %i, align 4
  %cmp132 = icmp slt i32 %85, 2046
  br i1 %cmp132, label %for.body133, label %for.end265

for.body133:                                      ; preds = %for.cond131
  %86 = load double*, double** %u.addr, align 8
  %87 = load i32, i32* %i, align 4
  %add134 = add nsw i32 %87, 1
  %mul135 = mul nsw i32 %add134, 2048
  %add136 = add nsw i32 %mul135, 0
  %idxprom137 = sext i32 %add136 to i64
  %arrayidx138 = getelementptr inbounds double, double* %86, i64 %idxprom137
  store double 1.000000e+00, double* %arrayidx138, align 8
  %88 = load double*, double** %p.addr, align 8
  %89 = load i32, i32* %i, align 4
  %add139 = add nsw i32 %89, 1
  %mul140 = mul nsw i32 %add139, 2048
  %add141 = add nsw i32 %mul140, 0
  %idxprom142 = sext i32 %add141 to i64
  %arrayidx143 = getelementptr inbounds double, double* %88, i64 %idxprom142
  store double 0.000000e+00, double* %arrayidx143, align 8
  %90 = load double*, double** %u.addr, align 8
  %91 = load i32, i32* %i, align 4
  %add144 = add nsw i32 %91, 1
  %mul145 = mul nsw i32 %add144, 2048
  %add146 = add nsw i32 %mul145, 0
  %idxprom147 = sext i32 %add146 to i64
  %arrayidx148 = getelementptr inbounds double, double* %90, i64 %idxprom147
  %92 = load double, double* %arrayidx148, align 8
  %93 = load double*, double** %q.addr, align 8
  %94 = load i32, i32* %i, align 4
  %add149 = add nsw i32 %94, 1
  %mul150 = mul nsw i32 %add149, 2048
  %add151 = add nsw i32 %mul150, 0
  %idxprom152 = sext i32 %add151 to i64
  %arrayidx153 = getelementptr inbounds double, double* %93, i64 %idxprom152
  store double %92, double* %arrayidx153, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond154

for.cond154:                                      ; preds = %for.inc218, %for.body133
  %95 = load i32, i32* %j, align 4
  %cmp155 = icmp slt i32 %95, 2046
  br i1 %cmp155, label %for.body156, label %for.end220

for.body156:                                      ; preds = %for.cond154
  %96 = load double, double* %f, align 8
  %sub157 = fsub double -0.000000e+00, %96
  %97 = load double, double* %d, align 8
  %98 = load double*, double** %p.addr, align 8
  %99 = load i32, i32* %i, align 4
  %add158 = add nsw i32 %99, 1
  %mul159 = mul nsw i32 %add158, 2048
  %100 = load i32, i32* %j, align 4
  %add160 = add nsw i32 %mul159, %100
  %idxprom161 = sext i32 %add160 to i64
  %arrayidx162 = getelementptr inbounds double, double* %98, i64 %idxprom161
  %101 = load double, double* %arrayidx162, align 8
  %mul163 = fmul double %97, %101
  %102 = load double, double* %e, align 8
  %add164 = fadd double %mul163, %102
  %div165 = fdiv double %sub157, %add164
  %103 = load double*, double** %p.addr, align 8
  %104 = load i32, i32* %i, align 4
  %add166 = add nsw i32 %104, 1
  %mul167 = mul nsw i32 %add166, 2048
  %105 = load i32, i32* %j, align 4
  %add168 = add nsw i32 %mul167, %105
  %add169 = add nsw i32 %add168, 1
  %idxprom170 = sext i32 %add169 to i64
  %arrayidx171 = getelementptr inbounds double, double* %103, i64 %idxprom170
  store double %div165, double* %arrayidx171, align 8
  %106 = load double, double* %a, align 8
  %sub172 = fsub double -0.000000e+00, %106
  %107 = load double*, double** %v.addr, align 8
  %108 = load i32, i32* %i, align 4
  %mul173 = mul nsw i32 %108, 2048
  %109 = load i32, i32* %j, align 4
  %add174 = add nsw i32 %mul173, %109
  %add175 = add nsw i32 %add174, 1
  %idxprom176 = sext i32 %add175 to i64
  %arrayidx177 = getelementptr inbounds double, double* %107, i64 %idxprom176
  %110 = load double, double* %arrayidx177, align 8
  %mul178 = fmul double %sub172, %110
  %111 = load double, double* %a, align 8
  %mul179 = fmul double 2.000000e+00, %111
  %add180 = fadd double 1.000000e+00, %mul179
  %112 = load double*, double** %v.addr, align 8
  %113 = load i32, i32* %i, align 4
  %add181 = add nsw i32 %113, 1
  %mul182 = mul nsw i32 %add181, 2048
  %114 = load i32, i32* %j, align 4
  %add183 = add nsw i32 %mul182, %114
  %add184 = add nsw i32 %add183, 1
  %idxprom185 = sext i32 %add184 to i64
  %arrayidx186 = getelementptr inbounds double, double* %112, i64 %idxprom185
  %115 = load double, double* %arrayidx186, align 8
  %mul187 = fmul double %add180, %115
  %add188 = fadd double %mul178, %mul187
  %116 = load double, double* %c, align 8
  %117 = load double*, double** %v.addr, align 8
  %118 = load i32, i32* %i, align 4
  %add189 = add nsw i32 %118, 2
  %mul190 = mul nsw i32 %add189, 2048
  %119 = load i32, i32* %j, align 4
  %add191 = add nsw i32 %mul190, %119
  %add192 = add nsw i32 %add191, 1
  %idxprom193 = sext i32 %add192 to i64
  %arrayidx194 = getelementptr inbounds double, double* %117, i64 %idxprom193
  %120 = load double, double* %arrayidx194, align 8
  %mul195 = fmul double %116, %120
  %sub196 = fsub double %add188, %mul195
  %121 = load double, double* %d, align 8
  %122 = load double*, double** %q.addr, align 8
  %123 = load i32, i32* %i, align 4
  %add197 = add nsw i32 %123, 1
  %mul198 = mul nsw i32 %add197, 2048
  %124 = load i32, i32* %j, align 4
  %add199 = add nsw i32 %mul198, %124
  %idxprom200 = sext i32 %add199 to i64
  %arrayidx201 = getelementptr inbounds double, double* %122, i64 %idxprom200
  %125 = load double, double* %arrayidx201, align 8
  %mul202 = fmul double %121, %125
  %sub203 = fsub double %sub196, %mul202
  %126 = load double, double* %d, align 8
  %127 = load double*, double** %p.addr, align 8
  %128 = load i32, i32* %i, align 4
  %add204 = add nsw i32 %128, 1
  %mul205 = mul nsw i32 %add204, 2048
  %129 = load i32, i32* %j, align 4
  %add206 = add nsw i32 %mul205, %129
  %idxprom207 = sext i32 %add206 to i64
  %arrayidx208 = getelementptr inbounds double, double* %127, i64 %idxprom207
  %130 = load double, double* %arrayidx208, align 8
  %mul209 = fmul double %126, %130
  %131 = load double, double* %e, align 8
  %add210 = fadd double %mul209, %131
  %div211 = fdiv double %sub203, %add210
  %132 = load double*, double** %q.addr, align 8
  %133 = load i32, i32* %i, align 4
  %add212 = add nsw i32 %133, 1
  %mul213 = mul nsw i32 %add212, 2048
  %134 = load i32, i32* %j, align 4
  %add214 = add nsw i32 %mul213, %134
  %add215 = add nsw i32 %add214, 1
  %idxprom216 = sext i32 %add215 to i64
  %arrayidx217 = getelementptr inbounds double, double* %132, i64 %idxprom216
  store double %div211, double* %arrayidx217, align 8
  br label %for.inc218

for.inc218:                                       ; preds = %for.body156
  %135 = load i32, i32* %j, align 4
  %inc219 = add nsw i32 %135, 1
  store i32 %inc219, i32* %j, align 4
  br label %for.cond154

for.end220:                                       ; preds = %for.cond154
  %136 = load double*, double** %u.addr, align 8
  %137 = load i32, i32* %i, align 4
  %add221 = add nsw i32 %137, 1
  %mul222 = mul nsw i32 %add221, 2048
  %add223 = add nsw i32 %mul222, 2048
  %sub224 = sub nsw i32 %add223, 1
  %idxprom225 = sext i32 %sub224 to i64
  %arrayidx226 = getelementptr inbounds double, double* %136, i64 %idxprom225
  store double 1.000000e+00, double* %arrayidx226, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond227

for.cond227:                                      ; preds = %for.inc260, %for.end220
  %138 = load i32, i32* %j, align 4
  %cmp228 = icmp slt i32 %138, 2046
  br i1 %cmp228, label %for.body229, label %for.end262

for.body229:                                      ; preds = %for.cond227
  %139 = load double*, double** %p.addr, align 8
  %140 = load i32, i32* %i, align 4
  %add230 = add nsw i32 %140, 1
  %mul231 = mul nsw i32 %add230, 2048
  %add232 = add nsw i32 %mul231, 2048
  %sub233 = sub nsw i32 %add232, 2
  %141 = load i32, i32* %j, align 4
  %sub234 = sub nsw i32 %sub233, %141
  %idxprom235 = sext i32 %sub234 to i64
  %arrayidx236 = getelementptr inbounds double, double* %139, i64 %idxprom235
  %142 = load double, double* %arrayidx236, align 8
  %143 = load double*, double** %u.addr, align 8
  %144 = load i32, i32* %i, align 4
  %add237 = add nsw i32 %144, 1
  %mul238 = mul nsw i32 %add237, 2048
  %add239 = add nsw i32 %mul238, 2048
  %sub240 = sub nsw i32 %add239, 1
  %145 = load i32, i32* %j, align 4
  %sub241 = sub nsw i32 %sub240, %145
  %idxprom242 = sext i32 %sub241 to i64
  %arrayidx243 = getelementptr inbounds double, double* %143, i64 %idxprom242
  %146 = load double, double* %arrayidx243, align 8
  %mul244 = fmul double %142, %146
  %147 = load double*, double** %q.addr, align 8
  %148 = load i32, i32* %i, align 4
  %add245 = add nsw i32 %148, 1
  %mul246 = mul nsw i32 %add245, 2048
  %add247 = add nsw i32 %mul246, 2048
  %sub248 = sub nsw i32 %add247, 2
  %149 = load i32, i32* %j, align 4
  %sub249 = sub nsw i32 %sub248, %149
  %idxprom250 = sext i32 %sub249 to i64
  %arrayidx251 = getelementptr inbounds double, double* %147, i64 %idxprom250
  %150 = load double, double* %arrayidx251, align 8
  %add252 = fadd double %mul244, %150
  %151 = load double*, double** %u.addr, align 8
  %152 = load i32, i32* %i, align 4
  %add253 = add nsw i32 %152, 1
  %mul254 = mul nsw i32 %add253, 2048
  %add255 = add nsw i32 %mul254, 2048
  %sub256 = sub nsw i32 %add255, 2
  %153 = load i32, i32* %j, align 4
  %sub257 = sub nsw i32 %sub256, %153
  %idxprom258 = sext i32 %sub257 to i64
  %arrayidx259 = getelementptr inbounds double, double* %151, i64 %idxprom258
  store double %add252, double* %arrayidx259, align 8
  br label %for.inc260

for.inc260:                                       ; preds = %for.body229
  %154 = load i32, i32* %j, align 4
  %inc261 = add nsw i32 %154, 1
  store i32 %inc261, i32* %j, align 4
  br label %for.cond227

for.end262:                                       ; preds = %for.cond227
  br label %for.inc263

for.inc263:                                       ; preds = %for.end262
  %155 = load i32, i32* %i, align 4
  %inc264 = add nsw i32 %155, 1
  store i32 %inc264, i32* %i, align 4
  br label %for.cond131

for.end265:                                       ; preds = %for.cond131
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0 (tags/RELEASE_600/final)"}
