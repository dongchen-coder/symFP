; ModuleID = '/Users/dongchen/tools/llvm-4.0.0.src/lib/Transforms/SymFP/test_facility/bc/seidel_2d.bc'
source_filename = "/Users/dongchen/tools/llvm-4.0.0.src/lib/Transforms/SymFP/test_facility/src/seidel_2d.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.13.0"

; Function Attrs: noinline nounwind ssp uwtable
define void @seidel_2d(double* %A) #0 {
entry:
  %A.addr = alloca double*, align 8
  %t = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %A, double** %A.addr, align 8
  store i32 0, i32* %t, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc65, %entry
  %0 = load i32, i32* %t, align 4
  %cmp = icmp sle i32 %0, 9
  br i1 %cmp, label %for.body, label %for.end67

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc62, %for.body
  %1 = load i32, i32* %i, align 4
  %cmp2 = icmp sle i32 %1, 1022
  br i1 %cmp2, label %for.body3, label %for.end64

for.body3:                                        ; preds = %for.cond1
  store i32 1, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body3
  %2 = load i32, i32* %j, align 4
  %cmp5 = icmp sle i32 %2, 1022
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %3 = load double*, double** %A.addr, align 8
  %4 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %4, 1
  %mul = mul nsw i32 %sub, 1024
  %5 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %5
  %sub7 = sub nsw i32 %add, 1
  %idxprom = sext i32 %sub7 to i64
  %arrayidx = getelementptr inbounds double, double* %3, i64 %idxprom
  %6 = load double, double* %arrayidx, align 8
  %7 = load double*, double** %A.addr, align 8
  %8 = load i32, i32* %i, align 4
  %sub8 = sub nsw i32 %8, 1
  %mul9 = mul nsw i32 %sub8, 1024
  %9 = load i32, i32* %j, align 4
  %add10 = add nsw i32 %mul9, %9
  %idxprom11 = sext i32 %add10 to i64
  %arrayidx12 = getelementptr inbounds double, double* %7, i64 %idxprom11
  %10 = load double, double* %arrayidx12, align 8
  %add13 = fadd double %6, %10
  %11 = load double*, double** %A.addr, align 8
  %12 = load i32, i32* %i, align 4
  %sub14 = sub nsw i32 %12, 1
  %mul15 = mul nsw i32 %sub14, 1024
  %13 = load i32, i32* %j, align 4
  %add16 = add nsw i32 %mul15, %13
  %add17 = add nsw i32 %add16, 1
  %idxprom18 = sext i32 %add17 to i64
  %arrayidx19 = getelementptr inbounds double, double* %11, i64 %idxprom18
  %14 = load double, double* %arrayidx19, align 8
  %add20 = fadd double %add13, %14
  %15 = load double*, double** %A.addr, align 8
  %16 = load i32, i32* %i, align 4
  %mul21 = mul nsw i32 %16, 1024
  %17 = load i32, i32* %j, align 4
  %add22 = add nsw i32 %mul21, %17
  %sub23 = sub nsw i32 %add22, 1
  %idxprom24 = sext i32 %sub23 to i64
  %arrayidx25 = getelementptr inbounds double, double* %15, i64 %idxprom24
  %18 = load double, double* %arrayidx25, align 8
  %add26 = fadd double %add20, %18
  %19 = load double*, double** %A.addr, align 8
  %20 = load i32, i32* %i, align 4
  %mul27 = mul nsw i32 %20, 1024
  %21 = load i32, i32* %j, align 4
  %add28 = add nsw i32 %mul27, %21
  %idxprom29 = sext i32 %add28 to i64
  %arrayidx30 = getelementptr inbounds double, double* %19, i64 %idxprom29
  %22 = load double, double* %arrayidx30, align 8
  %add31 = fadd double %add26, %22
  %23 = load double*, double** %A.addr, align 8
  %24 = load i32, i32* %i, align 4
  %mul32 = mul nsw i32 %24, 1024
  %25 = load i32, i32* %j, align 4
  %add33 = add nsw i32 %mul32, %25
  %add34 = add nsw i32 %add33, 1
  %idxprom35 = sext i32 %add34 to i64
  %arrayidx36 = getelementptr inbounds double, double* %23, i64 %idxprom35
  %26 = load double, double* %arrayidx36, align 8
  %add37 = fadd double %add31, %26
  %27 = load double*, double** %A.addr, align 8
  %28 = load i32, i32* %i, align 4
  %add38 = add nsw i32 %28, 1
  %mul39 = mul nsw i32 %add38, 1024
  %29 = load i32, i32* %j, align 4
  %add40 = add nsw i32 %mul39, %29
  %sub41 = sub nsw i32 %add40, 1
  %idxprom42 = sext i32 %sub41 to i64
  %arrayidx43 = getelementptr inbounds double, double* %27, i64 %idxprom42
  %30 = load double, double* %arrayidx43, align 8
  %add44 = fadd double %add37, %30
  %31 = load double*, double** %A.addr, align 8
  %32 = load i32, i32* %i, align 4
  %add45 = add nsw i32 %32, 1
  %mul46 = mul nsw i32 %add45, 1024
  %33 = load i32, i32* %j, align 4
  %add47 = add nsw i32 %mul46, %33
  %idxprom48 = sext i32 %add47 to i64
  %arrayidx49 = getelementptr inbounds double, double* %31, i64 %idxprom48
  %34 = load double, double* %arrayidx49, align 8
  %add50 = fadd double %add44, %34
  %35 = load double*, double** %A.addr, align 8
  %36 = load i32, i32* %i, align 4
  %add51 = add nsw i32 %36, 1
  %mul52 = mul nsw i32 %add51, 1024
  %37 = load i32, i32* %j, align 4
  %add53 = add nsw i32 %mul52, %37
  %add54 = add nsw i32 %add53, 1
  %idxprom55 = sext i32 %add54 to i64
  %arrayidx56 = getelementptr inbounds double, double* %35, i64 %idxprom55
  %38 = load double, double* %arrayidx56, align 8
  %add57 = fadd double %add50, %38
  %div = fdiv double %add57, 9.000000e+00
  %39 = load double*, double** %A.addr, align 8
  %40 = load i32, i32* %i, align 4
  %mul58 = mul nsw i32 %40, 1024
  %41 = load i32, i32* %j, align 4
  %add59 = add nsw i32 %mul58, %41
  %idxprom60 = sext i32 %add59 to i64
  %arrayidx61 = getelementptr inbounds double, double* %39, i64 %idxprom60
  store double %div, double* %arrayidx61, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %42 = load i32, i32* %j, align 4
  %inc = add nsw i32 %42, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc62

for.inc62:                                        ; preds = %for.end
  %43 = load i32, i32* %i, align 4
  %inc63 = add nsw i32 %43, 1
  store i32 %inc63, i32* %i, align 4
  br label %for.cond1

for.end64:                                        ; preds = %for.cond1
  br label %for.inc65

for.inc65:                                        ; preds = %for.end64
  %44 = load i32, i32* %t, align 4
  %inc66 = add nsw i32 %44, 1
  store i32 %inc66, i32* %t, align 4
  br label %for.cond

for.end67:                                        ; preds = %for.cond
  ret void
}

attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 4.0.0 (tags/RELEASE_400/final)"}
