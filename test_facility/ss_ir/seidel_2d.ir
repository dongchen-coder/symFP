; ModuleID = './ss_bc/seidel_2d.bc'
source_filename = "./ss_src/seidel_2d.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define void @seidel_2d(double* %A) #0 {
entry:
  %A.addr = alloca double*, align 8
  %t = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %A, double** %A.addr, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc59, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 1022
  br i1 %cmp, label %for.body, label %for.end61

for.body:                                         ; preds = %for.cond
  store i32 1, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp sle i32 %1, 1022
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load double*, double** %A.addr, align 8
  %3 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %3, 1
  %mul = mul nsw i32 %sub, 1024
  %4 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %4
  %sub4 = sub nsw i32 %add, 1
  %idxprom = sext i32 %sub4 to i64
  %arrayidx = getelementptr inbounds double, double* %2, i64 %idxprom
  %5 = load double, double* %arrayidx, align 8
  %6 = load double*, double** %A.addr, align 8
  %7 = load i32, i32* %i, align 4
  %sub5 = sub nsw i32 %7, 1
  %mul6 = mul nsw i32 %sub5, 1024
  %8 = load i32, i32* %j, align 4
  %add7 = add nsw i32 %mul6, %8
  %idxprom8 = sext i32 %add7 to i64
  %arrayidx9 = getelementptr inbounds double, double* %6, i64 %idxprom8
  %9 = load double, double* %arrayidx9, align 8
  %add10 = fadd double %5, %9
  %10 = load double*, double** %A.addr, align 8
  %11 = load i32, i32* %i, align 4
  %sub11 = sub nsw i32 %11, 1
  %mul12 = mul nsw i32 %sub11, 1024
  %12 = load i32, i32* %j, align 4
  %add13 = add nsw i32 %mul12, %12
  %add14 = add nsw i32 %add13, 1
  %idxprom15 = sext i32 %add14 to i64
  %arrayidx16 = getelementptr inbounds double, double* %10, i64 %idxprom15
  %13 = load double, double* %arrayidx16, align 8
  %add17 = fadd double %add10, %13
  %14 = load double*, double** %A.addr, align 8
  %15 = load i32, i32* %i, align 4
  %mul18 = mul nsw i32 %15, 1024
  %16 = load i32, i32* %j, align 4
  %add19 = add nsw i32 %mul18, %16
  %sub20 = sub nsw i32 %add19, 1
  %idxprom21 = sext i32 %sub20 to i64
  %arrayidx22 = getelementptr inbounds double, double* %14, i64 %idxprom21
  %17 = load double, double* %arrayidx22, align 8
  %add23 = fadd double %add17, %17
  %18 = load double*, double** %A.addr, align 8
  %19 = load i32, i32* %i, align 4
  %mul24 = mul nsw i32 %19, 1024
  %20 = load i32, i32* %j, align 4
  %add25 = add nsw i32 %mul24, %20
  %idxprom26 = sext i32 %add25 to i64
  %arrayidx27 = getelementptr inbounds double, double* %18, i64 %idxprom26
  %21 = load double, double* %arrayidx27, align 8
  %add28 = fadd double %add23, %21
  %22 = load double*, double** %A.addr, align 8
  %23 = load i32, i32* %i, align 4
  %mul29 = mul nsw i32 %23, 1024
  %24 = load i32, i32* %j, align 4
  %add30 = add nsw i32 %mul29, %24
  %add31 = add nsw i32 %add30, 1
  %idxprom32 = sext i32 %add31 to i64
  %arrayidx33 = getelementptr inbounds double, double* %22, i64 %idxprom32
  %25 = load double, double* %arrayidx33, align 8
  %add34 = fadd double %add28, %25
  %26 = load double*, double** %A.addr, align 8
  %27 = load i32, i32* %i, align 4
  %add35 = add nsw i32 %27, 1
  %mul36 = mul nsw i32 %add35, 1024
  %28 = load i32, i32* %j, align 4
  %add37 = add nsw i32 %mul36, %28
  %sub38 = sub nsw i32 %add37, 1
  %idxprom39 = sext i32 %sub38 to i64
  %arrayidx40 = getelementptr inbounds double, double* %26, i64 %idxprom39
  %29 = load double, double* %arrayidx40, align 8
  %add41 = fadd double %add34, %29
  %30 = load double*, double** %A.addr, align 8
  %31 = load i32, i32* %i, align 4
  %add42 = add nsw i32 %31, 1
  %mul43 = mul nsw i32 %add42, 1024
  %32 = load i32, i32* %j, align 4
  %add44 = add nsw i32 %mul43, %32
  %idxprom45 = sext i32 %add44 to i64
  %arrayidx46 = getelementptr inbounds double, double* %30, i64 %idxprom45
  %33 = load double, double* %arrayidx46, align 8
  %add47 = fadd double %add41, %33
  %34 = load double*, double** %A.addr, align 8
  %35 = load i32, i32* %i, align 4
  %add48 = add nsw i32 %35, 1
  %mul49 = mul nsw i32 %add48, 1024
  %36 = load i32, i32* %j, align 4
  %add50 = add nsw i32 %mul49, %36
  %add51 = add nsw i32 %add50, 1
  %idxprom52 = sext i32 %add51 to i64
  %arrayidx53 = getelementptr inbounds double, double* %34, i64 %idxprom52
  %37 = load double, double* %arrayidx53, align 8
  %add54 = fadd double %add47, %37
  %div = fdiv double %add54, 9.000000e+00
  %38 = load double*, double** %A.addr, align 8
  %39 = load i32, i32* %i, align 4
  %mul55 = mul nsw i32 %39, 1024
  %40 = load i32, i32* %j, align 4
  %add56 = add nsw i32 %mul55, %40
  %idxprom57 = sext i32 %add56 to i64
  %arrayidx58 = getelementptr inbounds double, double* %38, i64 %idxprom57
  store double %div, double* %arrayidx58, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %41 = load i32, i32* %j, align 4
  %inc = add nsw i32 %41, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc59

for.inc59:                                        ; preds = %for.end
  %42 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %42, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond

for.end61:                                        ; preds = %for.cond
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0 (tags/RELEASE_600/final)"}
