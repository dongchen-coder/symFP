; ModuleID = './ss_bc/gemver.bc'
source_filename = "./ss_src/gemver.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @gemver(i32 %n, double %alpha, double %beta, double* %A, double* %u1, double* %v1, double* %u2, double* %v2, double* %w, double* %x, double* %y, double* %z) #0 {
entry:
  %n.addr = alloca i32, align 4
  %alpha.addr = alloca double, align 8
  %beta.addr = alloca double, align 8
  %A.addr = alloca double*, align 8
  %u1.addr = alloca double*, align 8
  %v1.addr = alloca double*, align 8
  %u2.addr = alloca double*, align 8
  %v2.addr = alloca double*, align 8
  %w.addr = alloca double*, align 8
  %x.addr = alloca double*, align 8
  %y.addr = alloca double*, align 8
  %z.addr = alloca double*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double %alpha, double* %alpha.addr, align 8
  store double %beta, double* %beta.addr, align 8
  store double* %A, double** %A.addr, align 8
  store double* %u1, double** %u1.addr, align 8
  store double* %v1, double** %v1.addr, align 8
  store double* %u2, double** %u2.addr, align 8
  store double* %v2, double** %v2.addr, align 8
  store double* %w, double** %w.addr, align 8
  store double* %x, double** %x.addr, align 8
  store double* %y, double** %y.addr, align 8
  store double* %z, double** %z.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc20, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 1024
  br i1 %cmp, label %for.body, label %for.end22

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %1 = load i32, i32* %j, align 4
  %cmp2 = icmp slt i32 %1, 1024
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %2 = load double*, double** %A.addr, align 8
  %3 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %3, 1024
  %4 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %4
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds double, double* %2, i64 %idxprom
  %5 = load double, double* %arrayidx, align 8
  %6 = load double*, double** %u1.addr, align 8
  %7 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %7 to i64
  %arrayidx5 = getelementptr inbounds double, double* %6, i64 %idxprom4
  %8 = load double, double* %arrayidx5, align 8
  %9 = load double*, double** %v1.addr, align 8
  %10 = load i32, i32* %j, align 4
  %idxprom6 = sext i32 %10 to i64
  %arrayidx7 = getelementptr inbounds double, double* %9, i64 %idxprom6
  %11 = load double, double* %arrayidx7, align 8
  %mul8 = fmul double %8, %11
  %add9 = fadd double %5, %mul8
  %12 = load double*, double** %u2.addr, align 8
  %13 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %13 to i64
  %arrayidx11 = getelementptr inbounds double, double* %12, i64 %idxprom10
  %14 = load double, double* %arrayidx11, align 8
  %15 = load double*, double** %v2.addr, align 8
  %16 = load i32, i32* %j, align 4
  %idxprom12 = sext i32 %16 to i64
  %arrayidx13 = getelementptr inbounds double, double* %15, i64 %idxprom12
  %17 = load double, double* %arrayidx13, align 8
  %mul14 = fmul double %14, %17
  %add15 = fadd double %add9, %mul14
  %18 = load double*, double** %A.addr, align 8
  %19 = load i32, i32* %i, align 4
  %mul16 = mul nsw i32 %19, 1024
  %20 = load i32, i32* %j, align 4
  %add17 = add nsw i32 %mul16, %20
  %idxprom18 = sext i32 %add17 to i64
  %arrayidx19 = getelementptr inbounds double, double* %18, i64 %idxprom18
  store double %add15, double* %arrayidx19, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %21 = load i32, i32* %j, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc20

for.inc20:                                        ; preds = %for.end
  %22 = load i32, i32* %i, align 4
  %inc21 = add nsw i32 %22, 1
  store i32 %inc21, i32* %i, align 4
  br label %for.cond

for.end22:                                        ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc45, %for.end22
  %23 = load i32, i32* %i, align 4
  %cmp24 = icmp slt i32 %23, 1024
  br i1 %cmp24, label %for.body25, label %for.end47

for.body25:                                       ; preds = %for.cond23
  store i32 0, i32* %j, align 4
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc42, %for.body25
  %24 = load i32, i32* %j, align 4
  %cmp27 = icmp slt i32 %24, 1024
  br i1 %cmp27, label %for.body28, label %for.end44

for.body28:                                       ; preds = %for.cond26
  %25 = load double*, double** %x.addr, align 8
  %26 = load i32, i32* %i, align 4
  %idxprom29 = sext i32 %26 to i64
  %arrayidx30 = getelementptr inbounds double, double* %25, i64 %idxprom29
  %27 = load double, double* %arrayidx30, align 8
  %28 = load double, double* %beta.addr, align 8
  %29 = load double*, double** %A.addr, align 8
  %30 = load i32, i32* %j, align 4
  %mul31 = mul nsw i32 %30, 1024
  %31 = load i32, i32* %i, align 4
  %add32 = add nsw i32 %mul31, %31
  %idxprom33 = sext i32 %add32 to i64
  %arrayidx34 = getelementptr inbounds double, double* %29, i64 %idxprom33
  %32 = load double, double* %arrayidx34, align 8
  %mul35 = fmul double %28, %32
  %33 = load double*, double** %y.addr, align 8
  %34 = load i32, i32* %j, align 4
  %idxprom36 = sext i32 %34 to i64
  %arrayidx37 = getelementptr inbounds double, double* %33, i64 %idxprom36
  %35 = load double, double* %arrayidx37, align 8
  %mul38 = fmul double %mul35, %35
  %add39 = fadd double %27, %mul38
  %36 = load double*, double** %x.addr, align 8
  %37 = load i32, i32* %i, align 4
  %idxprom40 = sext i32 %37 to i64
  %arrayidx41 = getelementptr inbounds double, double* %36, i64 %idxprom40
  store double %add39, double* %arrayidx41, align 8
  br label %for.inc42

for.inc42:                                        ; preds = %for.body28
  %38 = load i32, i32* %j, align 4
  %inc43 = add nsw i32 %38, 1
  store i32 %inc43, i32* %j, align 4
  br label %for.cond26

for.end44:                                        ; preds = %for.cond26
  br label %for.inc45

for.inc45:                                        ; preds = %for.end44
  %39 = load i32, i32* %i, align 4
  %inc46 = add nsw i32 %39, 1
  store i32 %inc46, i32* %i, align 4
  br label %for.cond23

for.end47:                                        ; preds = %for.cond23
  store i32 0, i32* %i, align 4
  br label %for.cond48

for.cond48:                                       ; preds = %for.inc58, %for.end47
  %40 = load i32, i32* %i, align 4
  %cmp49 = icmp slt i32 %40, 1024
  br i1 %cmp49, label %for.body50, label %for.end60

for.body50:                                       ; preds = %for.cond48
  %41 = load double*, double** %x.addr, align 8
  %42 = load i32, i32* %i, align 4
  %idxprom51 = sext i32 %42 to i64
  %arrayidx52 = getelementptr inbounds double, double* %41, i64 %idxprom51
  %43 = load double, double* %arrayidx52, align 8
  %44 = load double*, double** %z.addr, align 8
  %45 = load i32, i32* %i, align 4
  %idxprom53 = sext i32 %45 to i64
  %arrayidx54 = getelementptr inbounds double, double* %44, i64 %idxprom53
  %46 = load double, double* %arrayidx54, align 8
  %add55 = fadd double %43, %46
  %47 = load double*, double** %x.addr, align 8
  %48 = load i32, i32* %i, align 4
  %idxprom56 = sext i32 %48 to i64
  %arrayidx57 = getelementptr inbounds double, double* %47, i64 %idxprom56
  store double %add55, double* %arrayidx57, align 8
  br label %for.inc58

for.inc58:                                        ; preds = %for.body50
  %49 = load i32, i32* %i, align 4
  %inc59 = add nsw i32 %49, 1
  store i32 %inc59, i32* %i, align 4
  br label %for.cond48

for.end60:                                        ; preds = %for.cond48
  store i32 0, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc83, %for.end60
  %50 = load i32, i32* %i, align 4
  %cmp62 = icmp slt i32 %50, 1024
  br i1 %cmp62, label %for.body63, label %for.end85

for.body63:                                       ; preds = %for.cond61
  store i32 0, i32* %j, align 4
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc80, %for.body63
  %51 = load i32, i32* %j, align 4
  %cmp65 = icmp slt i32 %51, 1024
  br i1 %cmp65, label %for.body66, label %for.end82

for.body66:                                       ; preds = %for.cond64
  %52 = load double*, double** %w.addr, align 8
  %53 = load i32, i32* %i, align 4
  %idxprom67 = sext i32 %53 to i64
  %arrayidx68 = getelementptr inbounds double, double* %52, i64 %idxprom67
  %54 = load double, double* %arrayidx68, align 8
  %55 = load double, double* %alpha.addr, align 8
  %56 = load double*, double** %A.addr, align 8
  %57 = load i32, i32* %i, align 4
  %mul69 = mul nsw i32 %57, 1024
  %58 = load i32, i32* %j, align 4
  %add70 = add nsw i32 %mul69, %58
  %idxprom71 = sext i32 %add70 to i64
  %arrayidx72 = getelementptr inbounds double, double* %56, i64 %idxprom71
  %59 = load double, double* %arrayidx72, align 8
  %mul73 = fmul double %55, %59
  %60 = load double*, double** %x.addr, align 8
  %61 = load i32, i32* %j, align 4
  %idxprom74 = sext i32 %61 to i64
  %arrayidx75 = getelementptr inbounds double, double* %60, i64 %idxprom74
  %62 = load double, double* %arrayidx75, align 8
  %mul76 = fmul double %mul73, %62
  %add77 = fadd double %54, %mul76
  %63 = load double*, double** %w.addr, align 8
  %64 = load i32, i32* %i, align 4
  %idxprom78 = sext i32 %64 to i64
  %arrayidx79 = getelementptr inbounds double, double* %63, i64 %idxprom78
  store double %add77, double* %arrayidx79, align 8
  br label %for.inc80

for.inc80:                                        ; preds = %for.body66
  %65 = load i32, i32* %j, align 4
  %inc81 = add nsw i32 %65, 1
  store i32 %inc81, i32* %j, align 4
  br label %for.cond64

for.end82:                                        ; preds = %for.cond64
  br label %for.inc83

for.inc83:                                        ; preds = %for.end82
  %66 = load i32, i32* %i, align 4
  %inc84 = add nsw i32 %66, 1
  store i32 %inc84, i32* %i, align 4
  br label %for.cond61

for.end85:                                        ; preds = %for.cond61
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 11.1.0 (https://github.com/llvm/llvm-project.git 0e442b077b9c6fe75076dc7e1cae5de1a693bc9b)"}
