; ModuleID = '/Users/dchen/tools/symFP/test_facility/ss_bc/deriche.bc'
source_filename = "/Users/dchen/tools/symFP/test_facility/ss_src/deriche.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.14.0"

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @deriche(double* %y1, double* %imgIn, double* %y2, double* %imgOut, double %alpha) #0 {
entry:
  %y1.addr = alloca double*, align 8
  %imgIn.addr = alloca double*, align 8
  %y2.addr = alloca double*, align 8
  %imgOut.addr = alloca double*, align 8
  %alpha.addr = alloca double, align 8
  %k = alloca double, align 8
  %a1 = alloca double, align 8
  %a2 = alloca double, align 8
  %a3 = alloca double, align 8
  %a4 = alloca double, align 8
  %b1 = alloca double, align 8
  %b2 = alloca double, align 8
  %c1 = alloca double, align 8
  %c2 = alloca double, align 8
  %a5 = alloca double, align 8
  %a6 = alloca double, align 8
  %a7 = alloca double, align 8
  %a8 = alloca double, align 8
  %ym1 = alloca double, align 8
  %ym2 = alloca double, align 8
  %xm1 = alloca double, align 8
  %yp1 = alloca double, align 8
  %yp2 = alloca double, align 8
  %xp1 = alloca double, align 8
  %xp2 = alloca double, align 8
  %tm1 = alloca double, align 8
  %tp1 = alloca double, align 8
  %tp2 = alloca double, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store double* %y1, double** %y1.addr, align 8
  store double* %imgIn, double** %imgIn.addr, align 8
  store double* %y2, double** %y2.addr, align 8
  store double* %imgOut, double** %imgOut.addr, align 8
  store double %alpha, double* %alpha.addr, align 8
  %0 = load double, double* %alpha.addr, align 8
  %sub = fsub double -0.000000e+00, %0
  %1 = call double @llvm.exp.f64(double %sub)
  %sub1 = fsub double 1.000000e+00, %1
  %2 = load double, double* %alpha.addr, align 8
  %sub2 = fsub double -0.000000e+00, %2
  %3 = call double @llvm.exp.f64(double %sub2)
  %sub3 = fsub double 1.000000e+00, %3
  %mul = fmul double %sub1, %sub3
  %4 = load double, double* %alpha.addr, align 8
  %mul4 = fmul double 2.000000e+00, %4
  %5 = load double, double* %alpha.addr, align 8
  %sub5 = fsub double -0.000000e+00, %5
  %6 = call double @llvm.exp.f64(double %sub5)
  %mul6 = fmul double %mul4, %6
  %add = fadd double 1.000000e+00, %mul6
  %7 = load double, double* %alpha.addr, align 8
  %mul7 = fmul double 2.000000e+00, %7
  %8 = call double @llvm.exp.f64(double %mul7)
  %sub8 = fsub double %add, %8
  %div = fdiv double %mul, %sub8
  store double %div, double* %k, align 8
  %9 = load double, double* %k, align 8
  store double %9, double* %a5, align 8
  store double %9, double* %a1, align 8
  %10 = load double, double* %k, align 8
  %11 = load double, double* %alpha.addr, align 8
  %sub9 = fsub double -0.000000e+00, %11
  %12 = call double @llvm.exp.f64(double %sub9)
  %mul10 = fmul double %10, %12
  %13 = load double, double* %alpha.addr, align 8
  %sub11 = fsub double %13, 1.000000e+00
  %mul12 = fmul double %mul10, %sub11
  store double %mul12, double* %a6, align 8
  store double %mul12, double* %a2, align 8
  %14 = load double, double* %k, align 8
  %15 = load double, double* %alpha.addr, align 8
  %sub13 = fsub double -0.000000e+00, %15
  %16 = call double @llvm.exp.f64(double %sub13)
  %mul14 = fmul double %14, %16
  %17 = load double, double* %alpha.addr, align 8
  %add15 = fadd double %17, 1.000000e+00
  %mul16 = fmul double %mul14, %add15
  store double %mul16, double* %a7, align 8
  store double %mul16, double* %a3, align 8
  %18 = load double, double* %k, align 8
  %sub17 = fsub double -0.000000e+00, %18
  %19 = load double, double* %alpha.addr, align 8
  %mul18 = fmul double -2.000000e+00, %19
  %20 = call double @llvm.exp.f64(double %mul18)
  %mul19 = fmul double %sub17, %20
  store double %mul19, double* %a8, align 8
  store double %mul19, double* %a4, align 8
  %21 = load double, double* %alpha.addr, align 8
  %sub20 = fsub double -0.000000e+00, %21
  %22 = call double @llvm.pow.f64(double 2.000000e+00, double %sub20)
  store double %22, double* %b1, align 8
  %23 = load double, double* %alpha.addr, align 8
  %mul21 = fmul double -2.000000e+00, %23
  %24 = call double @llvm.exp.f64(double %mul21)
  %sub22 = fsub double -0.000000e+00, %24
  store double %sub22, double* %b2, align 8
  store double 1.000000e+00, double* %c2, align 8
  store double 1.000000e+00, double* %c1, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc47, %entry
  %25 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %25, 1024
  br i1 %cmp, label %for.body, label %for.end49

for.body:                                         ; preds = %for.cond
  store double 0.000000e+00, double* %ym1, align 8
  store double 0.000000e+00, double* %ym2, align 8
  store double 0.000000e+00, double* %xm1, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc, %for.body
  %26 = load i32, i32* %j, align 4
  %cmp24 = icmp slt i32 %26, 1024
  br i1 %cmp24, label %for.body25, label %for.end

for.body25:                                       ; preds = %for.cond23
  %27 = load double, double* %a1, align 8
  %28 = load double*, double** %imgIn.addr, align 8
  %29 = load i32, i32* %i, align 4
  %mul26 = mul nsw i32 %29, 1024
  %30 = load i32, i32* %j, align 4
  %add27 = add nsw i32 %mul26, %30
  %idxprom = sext i32 %add27 to i64
  %arrayidx = getelementptr inbounds double, double* %28, i64 %idxprom
  %31 = load double, double* %arrayidx, align 8
  %mul28 = fmul double %27, %31
  %32 = load double, double* %a2, align 8
  %33 = load double, double* %xm1, align 8
  %mul29 = fmul double %32, %33
  %add30 = fadd double %mul28, %mul29
  %34 = load double, double* %b1, align 8
  %35 = load double, double* %ym1, align 8
  %mul31 = fmul double %34, %35
  %add32 = fadd double %add30, %mul31
  %36 = load double, double* %b2, align 8
  %37 = load double, double* %ym2, align 8
  %mul33 = fmul double %36, %37
  %add34 = fadd double %add32, %mul33
  %38 = load double*, double** %y1.addr, align 8
  %39 = load i32, i32* %i, align 4
  %mul35 = mul nsw i32 %39, 1024
  %40 = load i32, i32* %j, align 4
  %add36 = add nsw i32 %mul35, %40
  %idxprom37 = sext i32 %add36 to i64
  %arrayidx38 = getelementptr inbounds double, double* %38, i64 %idxprom37
  store double %add34, double* %arrayidx38, align 8
  %41 = load double*, double** %imgIn.addr, align 8
  %42 = load i32, i32* %i, align 4
  %mul39 = mul nsw i32 %42, 1024
  %43 = load i32, i32* %j, align 4
  %add40 = add nsw i32 %mul39, %43
  %idxprom41 = sext i32 %add40 to i64
  %arrayidx42 = getelementptr inbounds double, double* %41, i64 %idxprom41
  %44 = load double, double* %arrayidx42, align 8
  store double %44, double* %xm1, align 8
  %45 = load double, double* %ym1, align 8
  store double %45, double* %ym2, align 8
  %46 = load double*, double** %y1.addr, align 8
  %47 = load i32, i32* %i, align 4
  %mul43 = mul nsw i32 %47, 1024
  %48 = load i32, i32* %j, align 4
  %add44 = add nsw i32 %mul43, %48
  %idxprom45 = sext i32 %add44 to i64
  %arrayidx46 = getelementptr inbounds double, double* %46, i64 %idxprom45
  %49 = load double, double* %arrayidx46, align 8
  store double %49, double* %ym1, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body25
  %50 = load i32, i32* %j, align 4
  %inc = add nsw i32 %50, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond23

for.end:                                          ; preds = %for.cond23
  br label %for.inc47

for.inc47:                                        ; preds = %for.end
  %51 = load i32, i32* %i, align 4
  %inc48 = add nsw i32 %51, 1
  store i32 %inc48, i32* %i, align 4
  br label %for.cond

for.end49:                                        ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond50

for.cond50:                                       ; preds = %for.inc77, %for.end49
  %52 = load i32, i32* %i, align 4
  %cmp51 = icmp slt i32 %52, 1024
  br i1 %cmp51, label %for.body52, label %for.end79

for.body52:                                       ; preds = %for.cond50
  store double 0.000000e+00, double* %yp1, align 8
  store double 0.000000e+00, double* %yp2, align 8
  store double 0.000000e+00, double* %xp1, align 8
  store double 0.000000e+00, double* %xp2, align 8
  store i32 1023, i32* %j, align 4
  br label %for.cond53

for.cond53:                                       ; preds = %for.inc75, %for.body52
  %53 = load i32, i32* %j, align 4
  %cmp54 = icmp sge i32 %53, 0
  br i1 %cmp54, label %for.body55, label %for.end76

for.body55:                                       ; preds = %for.cond53
  %54 = load double, double* %a3, align 8
  %55 = load double, double* %xp1, align 8
  %mul56 = fmul double %54, %55
  %56 = load double, double* %a4, align 8
  %57 = load double, double* %xp2, align 8
  %mul57 = fmul double %56, %57
  %add58 = fadd double %mul56, %mul57
  %58 = load double, double* %b1, align 8
  %59 = load double, double* %yp1, align 8
  %mul59 = fmul double %58, %59
  %add60 = fadd double %add58, %mul59
  %60 = load double, double* %b2, align 8
  %61 = load double, double* %yp2, align 8
  %mul61 = fmul double %60, %61
  %add62 = fadd double %add60, %mul61
  %62 = load double*, double** %y2.addr, align 8
  %63 = load i32, i32* %i, align 4
  %mul63 = mul nsw i32 %63, 1024
  %64 = load i32, i32* %j, align 4
  %add64 = add nsw i32 %mul63, %64
  %idxprom65 = sext i32 %add64 to i64
  %arrayidx66 = getelementptr inbounds double, double* %62, i64 %idxprom65
  store double %add62, double* %arrayidx66, align 8
  %65 = load double, double* %xp1, align 8
  store double %65, double* %xp2, align 8
  %66 = load double*, double** %imgIn.addr, align 8
  %67 = load i32, i32* %i, align 4
  %mul67 = mul nsw i32 %67, 1024
  %68 = load i32, i32* %j, align 4
  %add68 = add nsw i32 %mul67, %68
  %idxprom69 = sext i32 %add68 to i64
  %arrayidx70 = getelementptr inbounds double, double* %66, i64 %idxprom69
  %69 = load double, double* %arrayidx70, align 8
  store double %69, double* %xp1, align 8
  %70 = load double, double* %yp1, align 8
  store double %70, double* %yp2, align 8
  %71 = load double*, double** %y2.addr, align 8
  %72 = load i32, i32* %i, align 4
  %mul71 = mul nsw i32 %72, 1024
  %73 = load i32, i32* %j, align 4
  %add72 = add nsw i32 %mul71, %73
  %idxprom73 = sext i32 %add72 to i64
  %arrayidx74 = getelementptr inbounds double, double* %71, i64 %idxprom73
  %74 = load double, double* %arrayidx74, align 8
  store double %74, double* %yp1, align 8
  br label %for.inc75

for.inc75:                                        ; preds = %for.body55
  %75 = load i32, i32* %j, align 4
  %dec = add nsw i32 %75, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond53

for.end76:                                        ; preds = %for.cond53
  br label %for.inc77

for.inc77:                                        ; preds = %for.end76
  %76 = load i32, i32* %i, align 4
  %inc78 = add nsw i32 %76, 1
  store i32 %inc78, i32* %i, align 4
  br label %for.cond50

for.end79:                                        ; preds = %for.cond50
  store i32 0, i32* %i, align 4
  br label %for.cond80

for.cond80:                                       ; preds = %for.inc103, %for.end79
  %77 = load i32, i32* %i, align 4
  %cmp81 = icmp slt i32 %77, 1024
  br i1 %cmp81, label %for.body82, label %for.end105

for.body82:                                       ; preds = %for.cond80
  store i32 0, i32* %j, align 4
  br label %for.cond83

for.cond83:                                       ; preds = %for.inc100, %for.body82
  %78 = load i32, i32* %j, align 4
  %cmp84 = icmp slt i32 %78, 1024
  br i1 %cmp84, label %for.body85, label %for.end102

for.body85:                                       ; preds = %for.cond83
  %79 = load double, double* %c1, align 8
  %80 = load double*, double** %y1.addr, align 8
  %81 = load i32, i32* %i, align 4
  %mul86 = mul nsw i32 %81, 1024
  %82 = load i32, i32* %j, align 4
  %add87 = add nsw i32 %mul86, %82
  %idxprom88 = sext i32 %add87 to i64
  %arrayidx89 = getelementptr inbounds double, double* %80, i64 %idxprom88
  %83 = load double, double* %arrayidx89, align 8
  %84 = load double*, double** %y2.addr, align 8
  %85 = load i32, i32* %i, align 4
  %mul90 = mul nsw i32 %85, 1024
  %86 = load i32, i32* %j, align 4
  %add91 = add nsw i32 %mul90, %86
  %idxprom92 = sext i32 %add91 to i64
  %arrayidx93 = getelementptr inbounds double, double* %84, i64 %idxprom92
  %87 = load double, double* %arrayidx93, align 8
  %add94 = fadd double %83, %87
  %mul95 = fmul double %79, %add94
  %88 = load double*, double** %imgOut.addr, align 8
  %89 = load i32, i32* %i, align 4
  %mul96 = mul nsw i32 %89, 1024
  %90 = load i32, i32* %j, align 4
  %add97 = add nsw i32 %mul96, %90
  %idxprom98 = sext i32 %add97 to i64
  %arrayidx99 = getelementptr inbounds double, double* %88, i64 %idxprom98
  store double %mul95, double* %arrayidx99, align 8
  br label %for.inc100

for.inc100:                                       ; preds = %for.body85
  %91 = load i32, i32* %j, align 4
  %inc101 = add nsw i32 %91, 1
  store i32 %inc101, i32* %j, align 4
  br label %for.cond83

for.end102:                                       ; preds = %for.cond83
  br label %for.inc103

for.inc103:                                       ; preds = %for.end102
  %92 = load i32, i32* %i, align 4
  %inc104 = add nsw i32 %92, 1
  store i32 %inc104, i32* %i, align 4
  br label %for.cond80

for.end105:                                       ; preds = %for.cond80
  store i32 0, i32* %j, align 4
  br label %for.cond106

for.cond106:                                      ; preds = %for.inc138, %for.end105
  %93 = load i32, i32* %j, align 4
  %cmp107 = icmp slt i32 %93, 1024
  br i1 %cmp107, label %for.body108, label %for.end140

for.body108:                                      ; preds = %for.cond106
  store double 0.000000e+00, double* %tm1, align 8
  store double 0.000000e+00, double* %ym1, align 8
  store double 0.000000e+00, double* %ym2, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond109

for.cond109:                                      ; preds = %for.inc135, %for.body108
  %94 = load i32, i32* %i, align 4
  %cmp110 = icmp slt i32 %94, 1024
  br i1 %cmp110, label %for.body111, label %for.end137

for.body111:                                      ; preds = %for.cond109
  %95 = load double, double* %a5, align 8
  %96 = load double*, double** %imgOut.addr, align 8
  %97 = load i32, i32* %i, align 4
  %mul112 = mul nsw i32 %97, 1024
  %98 = load i32, i32* %j, align 4
  %add113 = add nsw i32 %mul112, %98
  %idxprom114 = sext i32 %add113 to i64
  %arrayidx115 = getelementptr inbounds double, double* %96, i64 %idxprom114
  %99 = load double, double* %arrayidx115, align 8
  %mul116 = fmul double %95, %99
  %100 = load double, double* %a6, align 8
  %101 = load double, double* %tm1, align 8
  %mul117 = fmul double %100, %101
  %add118 = fadd double %mul116, %mul117
  %102 = load double, double* %b1, align 8
  %103 = load double, double* %ym1, align 8
  %mul119 = fmul double %102, %103
  %add120 = fadd double %add118, %mul119
  %104 = load double, double* %b2, align 8
  %105 = load double, double* %ym2, align 8
  %mul121 = fmul double %104, %105
  %add122 = fadd double %add120, %mul121
  %106 = load double*, double** %y1.addr, align 8
  %107 = load i32, i32* %i, align 4
  %mul123 = mul nsw i32 %107, 1024
  %108 = load i32, i32* %j, align 4
  %add124 = add nsw i32 %mul123, %108
  %idxprom125 = sext i32 %add124 to i64
  %arrayidx126 = getelementptr inbounds double, double* %106, i64 %idxprom125
  store double %add122, double* %arrayidx126, align 8
  %109 = load double*, double** %imgOut.addr, align 8
  %110 = load i32, i32* %i, align 4
  %mul127 = mul nsw i32 %110, 1024
  %111 = load i32, i32* %j, align 4
  %add128 = add nsw i32 %mul127, %111
  %idxprom129 = sext i32 %add128 to i64
  %arrayidx130 = getelementptr inbounds double, double* %109, i64 %idxprom129
  %112 = load double, double* %arrayidx130, align 8
  store double %112, double* %tm1, align 8
  %113 = load double, double* %ym1, align 8
  store double %113, double* %ym2, align 8
  %114 = load double*, double** %y1.addr, align 8
  %115 = load i32, i32* %i, align 4
  %mul131 = mul nsw i32 %115, 1024
  %116 = load i32, i32* %j, align 4
  %add132 = add nsw i32 %mul131, %116
  %idxprom133 = sext i32 %add132 to i64
  %arrayidx134 = getelementptr inbounds double, double* %114, i64 %idxprom133
  %117 = load double, double* %arrayidx134, align 8
  store double %117, double* %ym1, align 8
  br label %for.inc135

for.inc135:                                       ; preds = %for.body111
  %118 = load i32, i32* %i, align 4
  %inc136 = add nsw i32 %118, 1
  store i32 %inc136, i32* %i, align 4
  br label %for.cond109

for.end137:                                       ; preds = %for.cond109
  br label %for.inc138

for.inc138:                                       ; preds = %for.end137
  %119 = load i32, i32* %j, align 4
  %inc139 = add nsw i32 %119, 1
  store i32 %inc139, i32* %j, align 4
  br label %for.cond106

for.end140:                                       ; preds = %for.cond106
  store i32 0, i32* %j, align 4
  br label %for.cond141

for.cond141:                                      ; preds = %for.inc169, %for.end140
  %120 = load i32, i32* %j, align 4
  %cmp142 = icmp slt i32 %120, 1024
  br i1 %cmp142, label %for.body143, label %for.end171

for.body143:                                      ; preds = %for.cond141
  store double 0.000000e+00, double* %tp1, align 8
  store double 0.000000e+00, double* %tp2, align 8
  store double 0.000000e+00, double* %yp1, align 8
  store double 0.000000e+00, double* %yp2, align 8
  store i32 1023, i32* %i, align 4
  br label %for.cond144

for.cond144:                                      ; preds = %for.inc166, %for.body143
  %121 = load i32, i32* %i, align 4
  %cmp145 = icmp sge i32 %121, 0
  br i1 %cmp145, label %for.body146, label %for.end168

for.body146:                                      ; preds = %for.cond144
  %122 = load double, double* %a7, align 8
  %123 = load double, double* %tp1, align 8
  %mul147 = fmul double %122, %123
  %124 = load double, double* %a8, align 8
  %125 = load double, double* %tp2, align 8
  %mul148 = fmul double %124, %125
  %add149 = fadd double %mul147, %mul148
  %126 = load double, double* %b1, align 8
  %127 = load double, double* %yp1, align 8
  %mul150 = fmul double %126, %127
  %add151 = fadd double %add149, %mul150
  %128 = load double, double* %b2, align 8
  %129 = load double, double* %yp2, align 8
  %mul152 = fmul double %128, %129
  %add153 = fadd double %add151, %mul152
  %130 = load double*, double** %y2.addr, align 8
  %131 = load i32, i32* %i, align 4
  %mul154 = mul nsw i32 %131, 1024
  %132 = load i32, i32* %j, align 4
  %add155 = add nsw i32 %mul154, %132
  %idxprom156 = sext i32 %add155 to i64
  %arrayidx157 = getelementptr inbounds double, double* %130, i64 %idxprom156
  store double %add153, double* %arrayidx157, align 8
  %133 = load double, double* %tp1, align 8
  store double %133, double* %tp2, align 8
  %134 = load double*, double** %imgOut.addr, align 8
  %135 = load i32, i32* %i, align 4
  %mul158 = mul nsw i32 %135, 1024
  %136 = load i32, i32* %j, align 4
  %add159 = add nsw i32 %mul158, %136
  %idxprom160 = sext i32 %add159 to i64
  %arrayidx161 = getelementptr inbounds double, double* %134, i64 %idxprom160
  %137 = load double, double* %arrayidx161, align 8
  store double %137, double* %tp1, align 8
  %138 = load double, double* %yp1, align 8
  store double %138, double* %yp2, align 8
  %139 = load double*, double** %y2.addr, align 8
  %140 = load i32, i32* %i, align 4
  %mul162 = mul nsw i32 %140, 1024
  %141 = load i32, i32* %j, align 4
  %add163 = add nsw i32 %mul162, %141
  %idxprom164 = sext i32 %add163 to i64
  %arrayidx165 = getelementptr inbounds double, double* %139, i64 %idxprom164
  %142 = load double, double* %arrayidx165, align 8
  store double %142, double* %yp1, align 8
  br label %for.inc166

for.inc166:                                       ; preds = %for.body146
  %143 = load i32, i32* %i, align 4
  %dec167 = add nsw i32 %143, -1
  store i32 %dec167, i32* %i, align 4
  br label %for.cond144

for.end168:                                       ; preds = %for.cond144
  br label %for.inc169

for.inc169:                                       ; preds = %for.end168
  %144 = load i32, i32* %j, align 4
  %inc170 = add nsw i32 %144, 1
  store i32 %inc170, i32* %j, align 4
  br label %for.cond141

for.end171:                                       ; preds = %for.cond141
  store i32 0, i32* %i, align 4
  br label %for.cond172

for.cond172:                                      ; preds = %for.inc195, %for.end171
  %145 = load i32, i32* %i, align 4
  %cmp173 = icmp slt i32 %145, 1024
  br i1 %cmp173, label %for.body174, label %for.end197

for.body174:                                      ; preds = %for.cond172
  store i32 0, i32* %j, align 4
  br label %for.cond175

for.cond175:                                      ; preds = %for.inc192, %for.body174
  %146 = load i32, i32* %j, align 4
  %cmp176 = icmp slt i32 %146, 1024
  br i1 %cmp176, label %for.body177, label %for.end194

for.body177:                                      ; preds = %for.cond175
  %147 = load double, double* %c2, align 8
  %148 = load double*, double** %y1.addr, align 8
  %149 = load i32, i32* %i, align 4
  %mul178 = mul nsw i32 %149, 1024
  %150 = load i32, i32* %j, align 4
  %add179 = add nsw i32 %mul178, %150
  %idxprom180 = sext i32 %add179 to i64
  %arrayidx181 = getelementptr inbounds double, double* %148, i64 %idxprom180
  %151 = load double, double* %arrayidx181, align 8
  %152 = load double*, double** %y2.addr, align 8
  %153 = load i32, i32* %i, align 4
  %mul182 = mul nsw i32 %153, 1024
  %154 = load i32, i32* %j, align 4
  %add183 = add nsw i32 %mul182, %154
  %idxprom184 = sext i32 %add183 to i64
  %arrayidx185 = getelementptr inbounds double, double* %152, i64 %idxprom184
  %155 = load double, double* %arrayidx185, align 8
  %add186 = fadd double %151, %155
  %mul187 = fmul double %147, %add186
  %156 = load double*, double** %imgOut.addr, align 8
  %157 = load i32, i32* %i, align 4
  %mul188 = mul nsw i32 %157, 1024
  %158 = load i32, i32* %j, align 4
  %add189 = add nsw i32 %mul188, %158
  %idxprom190 = sext i32 %add189 to i64
  %arrayidx191 = getelementptr inbounds double, double* %156, i64 %idxprom190
  store double %mul187, double* %arrayidx191, align 8
  br label %for.inc192

for.inc192:                                       ; preds = %for.body177
  %159 = load i32, i32* %j, align 4
  %inc193 = add nsw i32 %159, 1
  store i32 %inc193, i32* %j, align 4
  br label %for.cond175

for.end194:                                       ; preds = %for.cond175
  br label %for.inc195

for.inc195:                                       ; preds = %for.end194
  %160 = load i32, i32* %i, align 4
  %inc196 = add nsw i32 %160, 1
  store i32 %inc196, i32* %i, align 4
  br label %for.cond172

for.end197:                                       ; preds = %for.cond172
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.exp.f64(double) #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.pow.f64(double, double) #1

attributes #0 = { noinline nounwind optnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 8.0.0 (tags/RELEASE_800/final)"}
