; ModuleID = './ss_bc/fdtd_2d.bc'
source_filename = "./ss_src/fdtd_2d.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define void @fdtd_2d(double* %ey, double* %ex, double* %hz) #0 {
entry:
  %ey.addr = alloca double*, align 8
  %ex.addr = alloca double*, align 8
  %hz.addr = alloca double*, align 8
  %t = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %_fict_ = alloca double, align 8
  store double* %ey, double** %ey.addr, align 8
  store double* %ex, double** %ex.addr, align 8
  store double* %hz, double** %hz.addr, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %j, align 4
  %cmp = icmp slt i32 %0, 1024
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load double, double* %_fict_, align 8
  %2 = load double*, double** %ey.addr, align 8
  %3 = load i32, i32* %j, align 4
  %add = add nsw i32 0, %3
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds double, double* %2, i64 %idxprom
  store double %1, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %j, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc28, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %5, 1024
  br i1 %cmp2, label %for.body3, label %for.end30

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc25, %for.body3
  %6 = load i32, i32* %j, align 4
  %cmp5 = icmp slt i32 %6, 1024
  br i1 %cmp5, label %for.body6, label %for.end27

for.body6:                                        ; preds = %for.cond4
  %7 = load double*, double** %ey.addr, align 8
  %8 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %8, 1024
  %9 = load i32, i32* %j, align 4
  %add7 = add nsw i32 %mul, %9
  %idxprom8 = sext i32 %add7 to i64
  %arrayidx9 = getelementptr inbounds double, double* %7, i64 %idxprom8
  %10 = load double, double* %arrayidx9, align 8
  %11 = load double*, double** %hz.addr, align 8
  %12 = load i32, i32* %i, align 4
  %mul10 = mul nsw i32 %12, 1024
  %13 = load i32, i32* %j, align 4
  %add11 = add nsw i32 %mul10, %13
  %idxprom12 = sext i32 %add11 to i64
  %arrayidx13 = getelementptr inbounds double, double* %11, i64 %idxprom12
  %14 = load double, double* %arrayidx13, align 8
  %15 = load double*, double** %hz.addr, align 8
  %16 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %16, 1
  %mul14 = mul nsw i32 %sub, 1024
  %17 = load i32, i32* %j, align 4
  %add15 = add nsw i32 %mul14, %17
  %idxprom16 = sext i32 %add15 to i64
  %arrayidx17 = getelementptr inbounds double, double* %15, i64 %idxprom16
  %18 = load double, double* %arrayidx17, align 8
  %sub18 = fsub double %14, %18
  %mul19 = fmul double 5.000000e-01, %sub18
  %sub20 = fsub double %10, %mul19
  %19 = load double*, double** %ey.addr, align 8
  %20 = load i32, i32* %i, align 4
  %mul21 = mul nsw i32 %20, 1024
  %21 = load i32, i32* %j, align 4
  %add22 = add nsw i32 %mul21, %21
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds double, double* %19, i64 %idxprom23
  store double %sub20, double* %arrayidx24, align 8
  br label %for.inc25

for.inc25:                                        ; preds = %for.body6
  %22 = load i32, i32* %j, align 4
  %inc26 = add nsw i32 %22, 1
  store i32 %inc26, i32* %j, align 4
  br label %for.cond4

for.end27:                                        ; preds = %for.cond4
  br label %for.inc28

for.inc28:                                        ; preds = %for.end27
  %23 = load i32, i32* %i, align 4
  %inc29 = add nsw i32 %23, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond1

for.end30:                                        ; preds = %for.cond1
  store i32 0, i32* %i, align 4
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc60, %for.end30
  %24 = load i32, i32* %i, align 4
  %cmp32 = icmp slt i32 %24, 1024
  br i1 %cmp32, label %for.body33, label %for.end62

for.body33:                                       ; preds = %for.cond31
  store i32 1, i32* %j, align 4
  br label %for.cond34

for.cond34:                                       ; preds = %for.inc57, %for.body33
  %25 = load i32, i32* %j, align 4
  %cmp35 = icmp slt i32 %25, 1024
  br i1 %cmp35, label %for.body36, label %for.end59

for.body36:                                       ; preds = %for.cond34
  %26 = load double*, double** %ex.addr, align 8
  %27 = load i32, i32* %i, align 4
  %mul37 = mul nsw i32 %27, 1024
  %28 = load i32, i32* %j, align 4
  %add38 = add nsw i32 %mul37, %28
  %idxprom39 = sext i32 %add38 to i64
  %arrayidx40 = getelementptr inbounds double, double* %26, i64 %idxprom39
  %29 = load double, double* %arrayidx40, align 8
  %30 = load double*, double** %hz.addr, align 8
  %31 = load i32, i32* %i, align 4
  %mul41 = mul nsw i32 %31, 1024
  %32 = load i32, i32* %j, align 4
  %add42 = add nsw i32 %mul41, %32
  %idxprom43 = sext i32 %add42 to i64
  %arrayidx44 = getelementptr inbounds double, double* %30, i64 %idxprom43
  %33 = load double, double* %arrayidx44, align 8
  %34 = load double*, double** %hz.addr, align 8
  %35 = load i32, i32* %i, align 4
  %mul45 = mul nsw i32 %35, 1024
  %36 = load i32, i32* %j, align 4
  %add46 = add nsw i32 %mul45, %36
  %sub47 = sub nsw i32 %add46, 1
  %idxprom48 = sext i32 %sub47 to i64
  %arrayidx49 = getelementptr inbounds double, double* %34, i64 %idxprom48
  %37 = load double, double* %arrayidx49, align 8
  %sub50 = fsub double %33, %37
  %mul51 = fmul double 5.000000e-01, %sub50
  %sub52 = fsub double %29, %mul51
  %38 = load double*, double** %ex.addr, align 8
  %39 = load i32, i32* %i, align 4
  %mul53 = mul nsw i32 %39, 1024
  %40 = load i32, i32* %j, align 4
  %add54 = add nsw i32 %mul53, %40
  %idxprom55 = sext i32 %add54 to i64
  %arrayidx56 = getelementptr inbounds double, double* %38, i64 %idxprom55
  store double %sub52, double* %arrayidx56, align 8
  br label %for.inc57

for.inc57:                                        ; preds = %for.body36
  %41 = load i32, i32* %j, align 4
  %inc58 = add nsw i32 %41, 1
  store i32 %inc58, i32* %j, align 4
  br label %for.cond34

for.end59:                                        ; preds = %for.cond34
  br label %for.inc60

for.inc60:                                        ; preds = %for.end59
  %42 = load i32, i32* %i, align 4
  %inc61 = add nsw i32 %42, 1
  store i32 %inc61, i32* %i, align 4
  br label %for.cond31

for.end62:                                        ; preds = %for.cond31
  store i32 0, i32* %i, align 4
  br label %for.cond63

for.cond63:                                       ; preds = %for.inc103, %for.end62
  %43 = load i32, i32* %i, align 4
  %cmp64 = icmp slt i32 %43, 1023
  br i1 %cmp64, label %for.body65, label %for.end105

for.body65:                                       ; preds = %for.cond63
  store i32 0, i32* %j, align 4
  br label %for.cond66

for.cond66:                                       ; preds = %for.inc100, %for.body65
  %44 = load i32, i32* %j, align 4
  %cmp67 = icmp slt i32 %44, 1023
  br i1 %cmp67, label %for.body68, label %for.end102

for.body68:                                       ; preds = %for.cond66
  %45 = load double*, double** %hz.addr, align 8
  %46 = load i32, i32* %i, align 4
  %mul69 = mul nsw i32 %46, 1024
  %47 = load i32, i32* %j, align 4
  %add70 = add nsw i32 %mul69, %47
  %idxprom71 = sext i32 %add70 to i64
  %arrayidx72 = getelementptr inbounds double, double* %45, i64 %idxprom71
  %48 = load double, double* %arrayidx72, align 8
  %49 = load double*, double** %ex.addr, align 8
  %50 = load i32, i32* %i, align 4
  %mul73 = mul nsw i32 %50, 1024
  %51 = load i32, i32* %j, align 4
  %add74 = add nsw i32 %mul73, %51
  %add75 = add nsw i32 %add74, 1
  %idxprom76 = sext i32 %add75 to i64
  %arrayidx77 = getelementptr inbounds double, double* %49, i64 %idxprom76
  %52 = load double, double* %arrayidx77, align 8
  %53 = load double*, double** %ex.addr, align 8
  %54 = load i32, i32* %i, align 4
  %mul78 = mul nsw i32 %54, 1024
  %55 = load i32, i32* %j, align 4
  %add79 = add nsw i32 %mul78, %55
  %idxprom80 = sext i32 %add79 to i64
  %arrayidx81 = getelementptr inbounds double, double* %53, i64 %idxprom80
  %56 = load double, double* %arrayidx81, align 8
  %sub82 = fsub double %52, %56
  %57 = load double*, double** %ey.addr, align 8
  %58 = load i32, i32* %i, align 4
  %add83 = add nsw i32 %58, 1
  %mul84 = mul nsw i32 %add83, 1024
  %59 = load i32, i32* %j, align 4
  %add85 = add nsw i32 %mul84, %59
  %idxprom86 = sext i32 %add85 to i64
  %arrayidx87 = getelementptr inbounds double, double* %57, i64 %idxprom86
  %60 = load double, double* %arrayidx87, align 8
  %add88 = fadd double %sub82, %60
  %61 = load double*, double** %ey.addr, align 8
  %62 = load i32, i32* %i, align 4
  %mul89 = mul nsw i32 %62, 1024
  %63 = load i32, i32* %j, align 4
  %add90 = add nsw i32 %mul89, %63
  %idxprom91 = sext i32 %add90 to i64
  %arrayidx92 = getelementptr inbounds double, double* %61, i64 %idxprom91
  %64 = load double, double* %arrayidx92, align 8
  %sub93 = fsub double %add88, %64
  %mul94 = fmul double 0x3FE6666666666666, %sub93
  %sub95 = fsub double %48, %mul94
  %65 = load double*, double** %hz.addr, align 8
  %66 = load i32, i32* %i, align 4
  %mul96 = mul nsw i32 %66, 1024
  %67 = load i32, i32* %j, align 4
  %add97 = add nsw i32 %mul96, %67
  %idxprom98 = sext i32 %add97 to i64
  %arrayidx99 = getelementptr inbounds double, double* %65, i64 %idxprom98
  store double %sub95, double* %arrayidx99, align 8
  br label %for.inc100

for.inc100:                                       ; preds = %for.body68
  %68 = load i32, i32* %j, align 4
  %inc101 = add nsw i32 %68, 1
  store i32 %inc101, i32* %j, align 4
  br label %for.cond66

for.end102:                                       ; preds = %for.cond66
  br label %for.inc103

for.inc103:                                       ; preds = %for.end102
  %69 = load i32, i32* %i, align 4
  %inc104 = add nsw i32 %69, 1
  store i32 %inc104, i32* %i, align 4
  br label %for.cond63

for.end105:                                       ; preds = %for.cond63
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0 (tags/RELEASE_600/final)"}
