; ModuleID = './ss_bc/fdtd_2d.bc'
source_filename = "./ss_src/fdtd_2d.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define void @fdtd_2d(double* %ey, double* %ex, double* %hz) #0 {
entry:
  %ey.addr = alloca double*, align 8
  %ex.addr = alloca double*, align 8
  %hz.addr = alloca double*, align 8
  %t = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %_fict_ = alloca double, align 8
  store double* %ey, double** %ey.addr, align 8
  store double* %ex, double** %ex.addr, align 8
  store double* %hz, double** %hz.addr, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %j, align 4
  %cmp = icmp slt i32 %0, 1024
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load double, double* %_fict_, align 8
  %2 = load double*, double** %ey.addr, align 8
  %3 = load i32, i32* %j, align 4
  %add = add nsw i32 0, %3
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds double, double* %2, i64 %idxprom
  store double %1, double* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %j, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc30, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %5, 1023
  br i1 %cmp2, label %for.body3, label %for.end32

for.body3:                                        ; preds = %for.cond1
  store i32 0, i32* %j, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc27, %for.body3
  %6 = load i32, i32* %j, align 4
  %cmp5 = icmp slt i32 %6, 1024
  br i1 %cmp5, label %for.body6, label %for.end29

for.body6:                                        ; preds = %for.cond4
  %7 = load double*, double** %ey.addr, align 8
  %8 = load i32, i32* %i, align 4
  %add7 = add nsw i32 %8, 1
  %mul = mul nsw i32 %add7, 1024
  %9 = load i32, i32* %j, align 4
  %add8 = add nsw i32 %mul, %9
  %idxprom9 = sext i32 %add8 to i64
  %arrayidx10 = getelementptr inbounds double, double* %7, i64 %idxprom9
  %10 = load double, double* %arrayidx10, align 8
  %11 = load double*, double** %hz.addr, align 8
  %12 = load i32, i32* %i, align 4
  %add11 = add nsw i32 %12, 1
  %mul12 = mul nsw i32 %add11, 1024
  %13 = load i32, i32* %j, align 4
  %add13 = add nsw i32 %mul12, %13
  %idxprom14 = sext i32 %add13 to i64
  %arrayidx15 = getelementptr inbounds double, double* %11, i64 %idxprom14
  %14 = load double, double* %arrayidx15, align 8
  %15 = load double*, double** %hz.addr, align 8
  %16 = load i32, i32* %i, align 4
  %mul16 = mul nsw i32 %16, 1024
  %17 = load i32, i32* %j, align 4
  %add17 = add nsw i32 %mul16, %17
  %idxprom18 = sext i32 %add17 to i64
  %arrayidx19 = getelementptr inbounds double, double* %15, i64 %idxprom18
  %18 = load double, double* %arrayidx19, align 8
  %sub = fsub double %14, %18
  %mul20 = fmul double 5.000000e-01, %sub
  %sub21 = fsub double %10, %mul20
  %19 = load double*, double** %ey.addr, align 8
  %20 = load i32, i32* %i, align 4
  %add22 = add nsw i32 %20, 1
  %mul23 = mul nsw i32 %add22, 1024
  %21 = load i32, i32* %j, align 4
  %add24 = add nsw i32 %mul23, %21
  %idxprom25 = sext i32 %add24 to i64
  %arrayidx26 = getelementptr inbounds double, double* %19, i64 %idxprom25
  store double %sub21, double* %arrayidx26, align 8
  br label %for.inc27

for.inc27:                                        ; preds = %for.body6
  %22 = load i32, i32* %j, align 4
  %inc28 = add nsw i32 %22, 1
  store i32 %inc28, i32* %j, align 4
  br label %for.cond4

for.end29:                                        ; preds = %for.cond4
  br label %for.inc30

for.inc30:                                        ; preds = %for.end29
  %23 = load i32, i32* %i, align 4
  %inc31 = add nsw i32 %23, 1
  store i32 %inc31, i32* %i, align 4
  br label %for.cond1

for.end32:                                        ; preds = %for.cond1
  store i32 0, i32* %i, align 4
  br label %for.cond33

for.cond33:                                       ; preds = %for.inc64, %for.end32
  %24 = load i32, i32* %i, align 4
  %cmp34 = icmp slt i32 %24, 1024
  br i1 %cmp34, label %for.body35, label %for.end66

for.body35:                                       ; preds = %for.cond33
  store i32 0, i32* %j, align 4
  br label %for.cond36

for.cond36:                                       ; preds = %for.inc61, %for.body35
  %25 = load i32, i32* %j, align 4
  %cmp37 = icmp slt i32 %25, 1023
  br i1 %cmp37, label %for.body38, label %for.end63

for.body38:                                       ; preds = %for.cond36
  %26 = load double*, double** %ex.addr, align 8
  %27 = load i32, i32* %i, align 4
  %mul39 = mul nsw i32 %27, 1024
  %28 = load i32, i32* %j, align 4
  %add40 = add nsw i32 %mul39, %28
  %add41 = add nsw i32 %add40, 1
  %idxprom42 = sext i32 %add41 to i64
  %arrayidx43 = getelementptr inbounds double, double* %26, i64 %idxprom42
  %29 = load double, double* %arrayidx43, align 8
  %30 = load double*, double** %hz.addr, align 8
  %31 = load i32, i32* %i, align 4
  %mul44 = mul nsw i32 %31, 1024
  %32 = load i32, i32* %j, align 4
  %add45 = add nsw i32 %mul44, %32
  %add46 = add nsw i32 %add45, 1
  %idxprom47 = sext i32 %add46 to i64
  %arrayidx48 = getelementptr inbounds double, double* %30, i64 %idxprom47
  %33 = load double, double* %arrayidx48, align 8
  %34 = load double*, double** %hz.addr, align 8
  %35 = load i32, i32* %i, align 4
  %mul49 = mul nsw i32 %35, 1024
  %36 = load i32, i32* %j, align 4
  %add50 = add nsw i32 %mul49, %36
  %idxprom51 = sext i32 %add50 to i64
  %arrayidx52 = getelementptr inbounds double, double* %34, i64 %idxprom51
  %37 = load double, double* %arrayidx52, align 8
  %sub53 = fsub double %33, %37
  %mul54 = fmul double 5.000000e-01, %sub53
  %sub55 = fsub double %29, %mul54
  %38 = load double*, double** %ex.addr, align 8
  %39 = load i32, i32* %i, align 4
  %mul56 = mul nsw i32 %39, 1024
  %40 = load i32, i32* %j, align 4
  %add57 = add nsw i32 %mul56, %40
  %add58 = add nsw i32 %add57, 1
  %idxprom59 = sext i32 %add58 to i64
  %arrayidx60 = getelementptr inbounds double, double* %38, i64 %idxprom59
  store double %sub55, double* %arrayidx60, align 8
  br label %for.inc61

for.inc61:                                        ; preds = %for.body38
  %41 = load i32, i32* %j, align 4
  %inc62 = add nsw i32 %41, 1
  store i32 %inc62, i32* %j, align 4
  br label %for.cond36

for.end63:                                        ; preds = %for.cond36
  br label %for.inc64

for.inc64:                                        ; preds = %for.end63
  %42 = load i32, i32* %i, align 4
  %inc65 = add nsw i32 %42, 1
  store i32 %inc65, i32* %i, align 4
  br label %for.cond33

for.end66:                                        ; preds = %for.cond33
  store i32 0, i32* %i, align 4
  br label %for.cond67

for.cond67:                                       ; preds = %for.inc107, %for.end66
  %43 = load i32, i32* %i, align 4
  %cmp68 = icmp slt i32 %43, 1023
  br i1 %cmp68, label %for.body69, label %for.end109

for.body69:                                       ; preds = %for.cond67
  store i32 0, i32* %j, align 4
  br label %for.cond70

for.cond70:                                       ; preds = %for.inc104, %for.body69
  %44 = load i32, i32* %j, align 4
  %cmp71 = icmp slt i32 %44, 1023
  br i1 %cmp71, label %for.body72, label %for.end106

for.body72:                                       ; preds = %for.cond70
  %45 = load double*, double** %hz.addr, align 8
  %46 = load i32, i32* %i, align 4
  %mul73 = mul nsw i32 %46, 1024
  %47 = load i32, i32* %j, align 4
  %add74 = add nsw i32 %mul73, %47
  %idxprom75 = sext i32 %add74 to i64
  %arrayidx76 = getelementptr inbounds double, double* %45, i64 %idxprom75
  %48 = load double, double* %arrayidx76, align 8
  %49 = load double*, double** %ex.addr, align 8
  %50 = load i32, i32* %i, align 4
  %mul77 = mul nsw i32 %50, 1024
  %51 = load i32, i32* %j, align 4
  %add78 = add nsw i32 %mul77, %51
  %add79 = add nsw i32 %add78, 1
  %idxprom80 = sext i32 %add79 to i64
  %arrayidx81 = getelementptr inbounds double, double* %49, i64 %idxprom80
  %52 = load double, double* %arrayidx81, align 8
  %53 = load double*, double** %ex.addr, align 8
  %54 = load i32, i32* %i, align 4
  %mul82 = mul nsw i32 %54, 1024
  %55 = load i32, i32* %j, align 4
  %add83 = add nsw i32 %mul82, %55
  %idxprom84 = sext i32 %add83 to i64
  %arrayidx85 = getelementptr inbounds double, double* %53, i64 %idxprom84
  %56 = load double, double* %arrayidx85, align 8
  %sub86 = fsub double %52, %56
  %57 = load double*, double** %ey.addr, align 8
  %58 = load i32, i32* %i, align 4
  %add87 = add nsw i32 %58, 1
  %mul88 = mul nsw i32 %add87, 1024
  %59 = load i32, i32* %j, align 4
  %add89 = add nsw i32 %mul88, %59
  %idxprom90 = sext i32 %add89 to i64
  %arrayidx91 = getelementptr inbounds double, double* %57, i64 %idxprom90
  %60 = load double, double* %arrayidx91, align 8
  %add92 = fadd double %sub86, %60
  %61 = load double*, double** %ey.addr, align 8
  %62 = load i32, i32* %i, align 4
  %mul93 = mul nsw i32 %62, 1024
  %63 = load i32, i32* %j, align 4
  %add94 = add nsw i32 %mul93, %63
  %idxprom95 = sext i32 %add94 to i64
  %arrayidx96 = getelementptr inbounds double, double* %61, i64 %idxprom95
  %64 = load double, double* %arrayidx96, align 8
  %sub97 = fsub double %add92, %64
  %mul98 = fmul double 0x3FE6666666666666, %sub97
  %sub99 = fsub double %48, %mul98
  %65 = load double*, double** %hz.addr, align 8
  %66 = load i32, i32* %i, align 4
  %mul100 = mul nsw i32 %66, 1024
  %67 = load i32, i32* %j, align 4
  %add101 = add nsw i32 %mul100, %67
  %idxprom102 = sext i32 %add101 to i64
  %arrayidx103 = getelementptr inbounds double, double* %65, i64 %idxprom102
  store double %sub99, double* %arrayidx103, align 8
  br label %for.inc104

for.inc104:                                       ; preds = %for.body72
  %68 = load i32, i32* %j, align 4
  %inc105 = add nsw i32 %68, 1
  store i32 %inc105, i32* %j, align 4
  br label %for.cond70

for.end106:                                       ; preds = %for.cond70
  br label %for.inc107

for.inc107:                                       ; preds = %for.end106
  %69 = load i32, i32* %i, align 4
  %inc108 = add nsw i32 %69, 1
  store i32 %inc108, i32* %i, align 4
  br label %for.cond67

for.end109:                                       ; preds = %for.cond67
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0 (tags/RELEASE_600/final)"}
